import { aliases, StreetType } from '@universe/models';
import { normalize, titleCase } from '../parser/utils.js';
export const StreetTypeMapping = {};
for (const abbr of Object.keys(aliases.StreetType)) {
    StreetTypeMapping[normalize(abbr)] = abbr;
    for (const val of aliases.StreetType[abbr]) {
        StreetTypeMapping[normalize(val)] = abbr;
    }
}
export function toStreetType(val) {
    return StreetTypeMapping[normalize(val)];
}
const StreetPrefixes = new Set([
    StreetType.HC,
    StreetType.FM,
    StreetType.RR,
    StreetType.SR,
    StreetType.CR,
    StreetType.TSR,
    StreetType.CLL,
    StreetType.CMT,
    StreetType.CAM,
    StreetType.CER,
    StreetType.ENT,
    StreetType.PSO,
    StreetType.PLA,
    StreetType.RCH,
    StreetType.VER,
    StreetType.VIA,
    StreetType.LCMT,
    StreetType.ECAM,
    StreetType.LCER,
    StreetType.LENT,
    StreetType.EPSO,
    StreetType.LPLA,
    StreetType.ERCH,
    StreetType.LVER,
]);
const SpanishPrefixes = new Set([
    StreetType.CLL,
    StreetType.CMT,
    StreetType.CAM,
    StreetType.CER,
    StreetType.ENT,
    StreetType.PSO,
    StreetType.PLA,
    StreetType.RCH,
    StreetType.VER,
    StreetType.VIA,
    StreetType.LCMT,
    StreetType.ECAM,
    StreetType.LCER,
    StreetType.LENT,
    StreetType.EPSO,
    StreetType.LPLA,
    StreetType.ERCH,
    StreetType.LVER,
]);
export function isStreetPrefix(val) {
    if (!val) {
        return false;
    }
    const type = toStreetType(String(val));
    return type ? StreetPrefixes.has(type) : type;
}
export function isSpanishPrefix(val) {
    if (!val) {
        return false;
    }
    const type = toStreetType(String(val));
    return type ? SpanishPrefixes.has(type) : type;
}
// Don't expand abbreveations that may have multiple ambiguous meanings. Ex: Doctor and Saint.
const DO_NOT_EXPAND = new Set([StreetType.DR, StreetType.ST]);
export function streetTypeString(type, force = false) {
    if (type === null) {
        return null;
    }
    if (!force && DO_NOT_EXPAND.has(normalize(type))) {
        return type;
    }
    type = toStreetType(type);
    return titleCase(aliases.StreetType[normalize(type)]?.[0] || '');
}
export function isStreetType(val) {
    if (!val) {
        return false;
    }
    return !!StreetTypeMapping[normalize(val)];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyZWV0VHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhL1N0cmVldFR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUV0RCxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTFELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFpQyxFQUFFLENBQUM7QUFFbEUsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQWlCLEVBQUUsQ0FBQztJQUNuRSxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDMUMsS0FBSyxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDM0MsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQzNDLENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxHQUFXO0lBQ3RDLE9BQU8saUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUVELE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDO0lBQzdCLFVBQVUsQ0FBQyxFQUFFO0lBQ2IsVUFBVSxDQUFDLEVBQUU7SUFDYixVQUFVLENBQUMsRUFBRTtJQUNiLFVBQVUsQ0FBQyxFQUFFO0lBQ2IsVUFBVSxDQUFDLEVBQUU7SUFDYixVQUFVLENBQUMsR0FBRztJQUVkLFVBQVUsQ0FBQyxHQUFHO0lBQ2QsVUFBVSxDQUFDLEdBQUc7SUFDZCxVQUFVLENBQUMsR0FBRztJQUNkLFVBQVUsQ0FBQyxHQUFHO0lBQ2QsVUFBVSxDQUFDLEdBQUc7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QUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzdDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbGlhc2VzLFN0cmVldFR5cGUgfSBmcm9tICdAdW5pdmVyc2UvbW9kZWxzJztcblxuaW1wb3J0IHsgbm9ybWFsaXplLCB0aXRsZUNhc2UgfSBmcm9tICcuLi9wYXJzZXIvdXRpbHMuanMnO1xuXG5leHBvcnQgY29uc3QgU3RyZWV0VHlwZU1hcHBpbmc6IHtba2V5OiBzdHJpbmddOiBTdHJlZXRUeXBlIH0gPSB7fTtcblxuZm9yIChjb25zdCBhYmJyIG9mIE9iamVjdC5rZXlzKGFsaWFzZXMuU3RyZWV0VHlwZSkgYXMgU3RyZWV0VHlwZVtdKSB7XG4gIFN0cmVldFR5cGVNYXBwaW5nW25vcm1hbGl6ZShhYmJyKV0gPSBhYmJyO1xuICBmb3IgKGNvbnN0IHZhbCBvZiBhbGlhc2VzLlN0cmVldFR5cGVbYWJicl0pIHtcbiAgICBTdHJlZXRUeXBlTWFwcGluZ1tub3JtYWxpemUodmFsKV0gPSBhYmJyO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1N0cmVldFR5cGUodmFsOiBzdHJpbmcpOiBTdHJlZXRUeXBlIHtcbiAgcmV0dXJuIFN0cmVldFR5cGVNYXBwaW5nW25vcm1hbGl6ZSh2YWwpXTtcbn1cblxuY29uc3QgU3RyZWV0UHJlZml4ZXMgPSBuZXcgU2V0KFtcbiAgU3RyZWV0VHlwZS5IQyxcbiAgU3RyZWV0VHlwZS5GTSxcbiAgU3RyZWV0VHlwZS5SUixcbiAgU3RyZWV0VHlwZS5TUixcbiAgU3RyZWV0VHlwZS5DUixcbiAgU3RyZWV0VHlwZS5UU1IsXG5cbiAgU3RyZWV0VHlwZS5DTEwsXG4gIFN0cmVldFR5cGUuQ01ULFxuICBTdHJlZXRUeXBlLkNBTSxcbiAgU3RyZWV0VHlwZS5DRVIsXG4gIFN0cmVldFR5cGUuRU5ULFxuICBTdHJlZXRUeXBlLlBTTyxcbiAgU3RyZWV0VHlwZS5QTEEsXG4gIFN0cmVldFR5cGUuUkNILFxuICBTdHJlZXRUeXBlLlZFUixcbiAgU3RyZWV0VHlwZS5WSUEsXG5cbiAgU3RyZWV0VHlwZS5MQ01ULFxuICBTdHJlZXRUeXBlLkVDQU0sXG4gIFN0cmVldFR5cGUuTENFUixcbiAgU3RyZWV0VHlwZS5MRU5ULFxuICBTdHJlZXRUeXBlLkVQU08sXG4gIFN0cmVldFR5cGUuTFBMQSxcbiAgU3RyZWV0VHlwZS5FUkNILFxuICBTdHJlZXRUeXBlLkxWRVIsXG5dKTtcblxuY29uc3QgU3BhbmlzaFByZWZpeGVzID0gbmV3IFNldChbXG4gIFN0cmVldFR5cGUuQ0xMLFxuICBTdHJlZXRUeXBlLkNNVCxcbiAgU3RyZWV0VHlwZS5DQU0sXG4gIFN0cmVldFR5cGUuQ0VSLFxuICBTdHJlZXRUeXBlLkVOVCxcbiAgU3RyZWV0VHlwZS5QU08sXG4gIFN0cmVldFR5cGUuUExBLFxuICBTdHJlZXRUeXBlLlJDSCxcbiAgU3RyZWV0VHlwZS5WRVIsXG4gIFN0cmVldFR5cGUuVklBLFxuXG4gIFN0cmVldFR5cGUuTENNVCxcbiAgU3RyZWV0VHlwZS5FQ0FNLFxuICBTdHJlZXRUeXBlLkxDRVIsXG4gIFN0cmVldFR5cGUuTEVOVCxcbiAgU3RyZWV0VHlwZS5FUFNPLFxuICBTdHJlZXRUeXBlLkxQTEEsXG4gIFN0cmVldFR5cGUuRVJDSCxcbiAgU3RyZWV0VHlwZS5MVkVSLFxuXSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmVldFByZWZpeCh2YWw6IHVua25vd24pOiBib29sZWFuIHtcbiAgaWYgKCF2YWwpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGNvbnN0IHR5cGUgPSB0b1N0cmVldFR5cGUoU3RyaW5nKHZhbCkpO1xuICByZXR1cm4gdHlwZSA/IFN0cmVldFByZWZpeGVzLmhhcyh0eXBlKSA6IHR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NwYW5pc2hQcmVmaXgodmFsOiB1bmtub3duKTogYm9vbGVhbiB7XG4gIGlmICghdmFsKSB7IHJldHVybiBmYWxzZTsgfVxuICBjb25zdCB0eXBlID0gdG9TdHJlZXRUeXBlKFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIHR5cGUgPyBTcGFuaXNoUHJlZml4ZXMuaGFzKHR5cGUpIDogdHlwZTtcbn1cblxuLy8gRG9uJ3QgZXhwYW5kIGFiYnJldmVhdGlvbnMgdGhhdCBtYXkgaGF2ZSBtdWx0aXBsZSBhbWJpZ3VvdXMgbWVhbmluZ3MuIEV4OiBEb2N0b3IgYW5kIFNhaW50LlxuY29uc3QgRE9fTk9UX0VYUEFORDogU2V0PHN0cmluZz4gPSBuZXcgU2V0KFsgU3RyZWV0VHlwZS5EUiwgU3RyZWV0VHlwZS5TVCBdKTtcbmV4cG9ydCBmdW5jdGlvbiBzdHJlZXRUeXBlU3RyaW5nKHR5cGU6IFN0cmVldFR5cGUgfCBudWxsLCBmb3JjZSA9IGZhbHNlKTogc3RyaW5nIHwgbnVsbCB7XG4gIGlmICh0eXBlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKCFmb3JjZSAmJiBET19OT1RfRVhQQU5ELmhhcyhub3JtYWxpemUodHlwZSkpKSB7IHJldHVybiB0eXBlOyB9XG4gIHR5cGUgPSB0b1N0cmVldFR5cGUodHlwZSk7XG4gIHJldHVybiB0aXRsZUNhc2UoYWxpYXNlcy5TdHJlZXRUeXBlW25vcm1hbGl6ZSh0eXBlKSBhcyBTdHJlZXRUeXBlXT8uWzBdIHx8ICcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyZWV0VHlwZSh2YWw/OiBzdHJpbmcgfCBudWxsKTogdmFsIGlzIFN0cmVldFR5cGUge1xuICBpZiAoIXZhbCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgcmV0dXJuICEhU3RyZWV0VHlwZU1hcHBpbmdbbm9ybWFsaXplKHZhbCldO1xufVxuIl19