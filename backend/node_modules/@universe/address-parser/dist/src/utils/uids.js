import { Country } from '@universe/models';
import * as crypto from 'crypto';
const md5 = (value) => crypto.createHash('md5').update(value).digest("hex");
const CACHE = new Map();
export function hash(addr) {
    const val = [
        addr.number,
        addr.streetPreDir,
        addr.streetName,
        addr.streetPostDir,
        addr.unitNum,
        addr.zip,
    ].filter(Boolean).join();
    const hash = CACHE.get(val) || md5(val);
    CACHE.set(val, hash);
    return hash;
}
// TODO: Replace hash() with this implementation once geodata is migrated.
const HASH_CACHE = new Map();
export function unitHash(addr) {
    const val = (addr.country && addr.country !== Country.USA)
        ? [
            addr.care,
            addr.country,
        ].join(':').toLowerCase().replace(/[-_/\\]/g, ' ').replace(/[^a-z0-9: ]/g, '')
        : [
            addr.number,
            addr.streetPreDir,
            addr.streetName,
            addr.streetType,
            addr.streetPostDir,
            addr.unitNum,
            addr.city,
            addr.state,
            addr.zip,
        ].join(':').toLowerCase().replace(/[-_/\\]/g, ' ').replace(/[^a-z0-9: ]/g, '');
    const hash = HASH_CACHE.get(val) || md5(val);
    HASH_CACHE.set(val, hash);
    return hash;
}
export function buildingHash(addr) {
    const val = [
        addr.number,
        addr.streetPreDir,
        addr.streetName,
        addr.streetType,
        addr.streetPostDir,
    ].filter(Boolean).join(' ').toLowerCase().replace(/[-_/\\]/g, ' ').replace(/[^a-z0-9 ]/g, '');
    const hash = HASH_CACHE.get(val) || md5(val);
    HASH_CACHE.set(val, hash);
    return hash;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlkcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy91aWRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQVUsTUFBTSxrQkFBa0IsQ0FBQztBQUNuRCxPQUFPLEtBQUssTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUVqQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXBGLE1BQU0sS0FBSyxHQUF3QixJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzdDLE1BQU0sVUFBVSxJQUFJLENBQUMsSUFBcUI7SUFDeEMsTUFBTSxHQUFHLEdBQUc7UUFDVixJQUFJLENBQUMsTUFBTTtRQUNYLElBQUksQ0FBQyxZQUFZO1FBQ2pCLElBQUksQ0FBQyxVQUFVO1FBQ2YsSUFBSSxDQUFDLGFBQWE7UUFDbEIsSUFBSSxDQUFDLE9BQU87UUFDWixJQUFJLENBQUMsR0FBRztLQUNULENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3JCLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELDBFQUEwRTtBQUMxRSxNQUFNLFVBQVUsR0FBd0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNsRCxNQUFNLFVBQVUsUUFBUSxDQUFDLElBQXFCO0lBQzVDLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDeEQsQ0FBQyxDQUFDO1lBQ0UsSUFBSSxDQUFDLElBQUk7WUFDVCxJQUFJLENBQUMsT0FBTztTQUNiLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUM7UUFDaEYsQ0FBQyxDQUFDO1lBQ0UsSUFBSSxDQUFDLE1BQU07WUFDWCxJQUFJLENBQUMsWUFBWTtZQUNqQixJQUFJLENBQUMsVUFBVTtZQUNmLElBQUksQ0FBQyxVQUFVO1lBQ2YsSUFBSSxDQUFDLGFBQWE7WUFDbEIsSUFBSSxDQUFDLE9BQU87WUFDWixJQUFJLENBQUMsSUFBSTtZQUNULElBQUksQ0FBQyxLQUFLO1lBQ1YsSUFBSSxDQUFDLEdBQUc7U0FDVCxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkYsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0MsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUIsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFxQjtJQUNoRCxNQUFNLEdBQUcsR0FBRztRQUNWLElBQUksQ0FBQyxNQUFNO1FBQ1gsSUFBSSxDQUFDLFlBQVk7UUFDakIsSUFBSSxDQUFDLFVBQVU7UUFDZixJQUFJLENBQUMsVUFBVTtRQUNmLElBQUksQ0FBQyxhQUFhO0tBQ25CLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUYsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0MsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUIsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ291bnRyeSwgSVNpdHVzIH0gZnJvbSAnQHVuaXZlcnNlL21vZGVscyc7XG5pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuY29uc3QgbWQ1ID0gKHZhbHVlOiBzdHJpbmcpID0+IGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUodmFsdWUpLmRpZ2VzdChcImhleFwiKTtcblxuY29uc3QgQ0FDSEU6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG5leHBvcnQgZnVuY3Rpb24gaGFzaChhZGRyOiBQYXJ0aWFsPElTaXR1cz4pOiBzdHJpbmcge1xuICBjb25zdCB2YWwgPSBbXG4gICAgYWRkci5udW1iZXIsXG4gICAgYWRkci5zdHJlZXRQcmVEaXIsXG4gICAgYWRkci5zdHJlZXROYW1lLFxuICAgIGFkZHIuc3RyZWV0UG9zdERpcixcbiAgICBhZGRyLnVuaXROdW0sXG4gICAgYWRkci56aXAsXG4gIF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oKTtcbiAgY29uc3QgaGFzaCA9IENBQ0hFLmdldCh2YWwpIHx8IG1kNSh2YWwpO1xuICBDQUNIRS5zZXQodmFsLCBoYXNoKTtcbiAgcmV0dXJuIGhhc2g7XG59XG5cbi8vIFRPRE86IFJlcGxhY2UgaGFzaCgpIHdpdGggdGhpcyBpbXBsZW1lbnRhdGlvbiBvbmNlIGdlb2RhdGEgaXMgbWlncmF0ZWQuXG5jb25zdCBIQVNIX0NBQ0hFOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuZXhwb3J0IGZ1bmN0aW9uIHVuaXRIYXNoKGFkZHI6IFBhcnRpYWw8SVNpdHVzPik6IHN0cmluZyB7XG4gIGNvbnN0IHZhbCA9IChhZGRyLmNvdW50cnkgJiYgYWRkci5jb3VudHJ5ICE9PSBDb3VudHJ5LlVTQSlcbiAgICA/IFtcbiAgICAgICAgYWRkci5jYXJlLFxuICAgICAgICBhZGRyLmNvdW50cnksXG4gICAgICBdLmpvaW4oJzonKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stXy9cXFxcXS9nLCAnICcpLnJlcGxhY2UoL1teYS16MC05OiBdL2csICcnKVxuICAgIDogW1xuICAgICAgICBhZGRyLm51bWJlcixcbiAgICAgICAgYWRkci5zdHJlZXRQcmVEaXIsXG4gICAgICAgIGFkZHIuc3RyZWV0TmFtZSxcbiAgICAgICAgYWRkci5zdHJlZXRUeXBlLFxuICAgICAgICBhZGRyLnN0cmVldFBvc3REaXIsXG4gICAgICAgIGFkZHIudW5pdE51bSxcbiAgICAgICAgYWRkci5jaXR5LFxuICAgICAgICBhZGRyLnN0YXRlLFxuICAgICAgICBhZGRyLnppcCxcbiAgICAgIF0uam9pbignOicpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fL1xcXFxdL2csICcgJykucmVwbGFjZSgvW15hLXowLTk6IF0vZywgJycpO1xuICBjb25zdCBoYXNoID0gSEFTSF9DQUNIRS5nZXQodmFsKSB8fCBtZDUodmFsKTtcbiAgSEFTSF9DQUNIRS5zZXQodmFsLCBoYXNoKTtcbiAgcmV0dXJuIGhhc2g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZGluZ0hhc2goYWRkcjogUGFydGlhbDxJU2l0dXM+KTogc3RyaW5nIHtcbiAgY29uc3QgdmFsID0gW1xuICAgIGFkZHIubnVtYmVyLFxuICAgIGFkZHIuc3RyZWV0UHJlRGlyLFxuICAgIGFkZHIuc3RyZWV0TmFtZSxcbiAgICBhZGRyLnN0cmVldFR5cGUsXG4gICAgYWRkci5zdHJlZXRQb3N0RGlyLFxuICBdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJykudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV8vXFxcXF0vZywgJyAnKS5yZXBsYWNlKC9bXmEtejAtOSBdL2csICcnKTtcbiAgY29uc3QgaGFzaCA9IEhBU0hfQ0FDSEUuZ2V0KHZhbCkgfHwgbWQ1KHZhbCk7XG4gIEhBU0hfQ0FDSEUuc2V0KHZhbCwgaGFzaCk7XG4gIHJldHVybiBoYXNoO1xufVxuIl19