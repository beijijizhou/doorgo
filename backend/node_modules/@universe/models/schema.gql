# Custom directive to configure spectaql generated documentation.
directive @spectaql(options: [SpectaQLOption]) on QUERY | MUTATION | SUBSCRIPTION | FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | VARIABLE_DEFINITION | SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
input SpectaQLOption { key: String!, value: String! }

"""
The [Date]({{Types.Date}}) scalar type represents a datetime value. In **UNIVERSE** files, [Dates]({{Types.Date}}) are stored
as a Unix Timestamp: the number of milliseconds which have passed since `00:00:00 UTC` on 
`Thursday, 1 January 1970`, which is referred to as the "Unix Epoch". 

For convenience, [Date]({{Types.Date}}) vaues in this documentation will use their string representation.
"""
scalar Date @spectaql(options: [{ key: "example", value: "Sat, 29 Jun 1991 07:00:00 GMT" }])

"""
The `Geometry` scalar type represents a "simple" polygon shape. a Geometry must be a 
single-loop polygon for which the boundary does not intersect itself.
"""
scalar Geometry

directive @primary on FIELD_DEFINITION
directive @computed on FIELD_DEFINITION
directive @unique on FIELD_DEFINITION
directive @merge(method: String) on FIELD_DEFINITION
directive @default(value: String) on FIELD_DEFINITION
directive @index(group: String) on FIELD_DEFINITION

type Metadata {
  key: ID! @primary
  value: String!
}

"""
Unique party identifier for major U.S. Political Parties. Minor parties will be classified as either "Other Liberal", or "Other Conservative".
"""
enum Party {
  "Democrat"
  D
  "Republican"
  R
  "Green"
  G
  "Libertarian"
  L
  "Other Liberal"
  OL
  "Other Conservative"
  OC
  "Other Unknown"
  OU
  "No Party Preference"
  NPP
  "Unknown"
  U
}

"""
Three letter language codes as defined by [ISO639-3](https://iso639-3.sil.org/sites/iso639-3/files/downloads/iso-639-3_Latin1.tab)
"""
enum LanguageCode {
  ABK AAR AFR AKA SQI AMH ARA ARG HYE ASM AVA AVE AYM AZE BAM BAK EUS BEL BEN BIS BOS BRE BUL
  MYA CAT CHA CHE NYA CHV COR COS CRE HRV CES DAN DIV NLD ENG EPO EST EWE FAO
  FIJ FIN FRE FUL FUC FUF GLG KAT DEU ELL GRN GUJ HAT HAU HEB HER HIN HMO HUM INA IND ILE GLE
  IBO IPK IDO ISL ITA IKU JPN JAV KAL KAN KAU KAS KAZ KHM KIK KIN KIR KOM KON KOR KUR KUA LAT
  LTX LUG LIM LIN LAO LIT LUB LAV GLV MKD MLG MSA MAL MLT MRI MAR MAH MON NAU NAV NOB NDE NEP
  NDO NNO NOR III NBL OCI OJI CHU ORM ORI OSS PAN PLI FAS POL PUS POR QUE ROH RUN RON RUS SAN
  SRD SND SME SMO SAG SRP GLA SNA SIN SLK SLV SOM SOT SPA SUN SWA SSW SWE TAM TEL TGK THA TIR
  BOD TUK TGL TSN TON TUR TSO TAT TWI TAH UIG UKR URD UZB VEN VIE VOL WLN CYM WOL FRY XHO YID
  YOR ZHA BHO

  # Chinese
  ZHO CMN YUE NAN
}

"""
Street type as defined by the [USPS Postal Addressing Standards](https://pe.usps.com/text/pub28/28apc_002.htm)
"""
enum StreetType {
  ALY ANX ARC AVE BYU BCH BND BLF BLFS BTM BLVD BR BRG BRK BRKS BG BGS BYP CP CYN CPE CSWY CTR
  CTRS CIR CIRS CLF CLFS CLB CMN CMNS COR CORS CRSE CT CTS CV CVS CRK CRES CRST XING XRD XRDS
  CURV DL DM DV DR DRS EST ESTS EXPY EXT EXTS FALL FLS FRY FLD FLDS FLT FLTS FRD FRDS FRST FRG
  FRGS FRK FRKS FT FWY GDN GDNS GTWY GLN GLNS GRN GRNS GRV GRVS HBR HBRS HVN HTS HL HLS HOLW
  INLT IS ISS ISLE JCT JCTS KY KYS KNL KNLS LK LKS LAND LNDG LN LGT LGTS LF LCK LCKS LDG LOOP
  MALL MNR MNRS MDW MDWS MEWS ML MLS MSN MTWY MT MTN MTNS NCK ORCH OVAL OPAS PARK PKWY PASS PSGE
  PATH PIKE PNE PNES PL PLN PLNS PLZ PT PTS PRT PRTS PR RADL RAMP RNCH RPD RPDS RST RDG RDGS RIV
  RD RDS RTE ROW RUE RUN SHL SHLS SHR SHRS SKWY SPG SPGS SPUR SQ SQS STA STRA STRM ST STS SMT TER
  TRWY TRCE TRAK TRFY TRL TRLR TUNL TPKE UPAS UN UNS VLY VLYS VIA VDCT VW VWS VLG VLGS VL VIS WALK WALL
  WAY WAYS WL WLS

  # These may also be prefixed https://www.txdot.gov/inside-txdot/division/transportation-planning/highway-designation/glossary.html
  HWY CR SR TSR RR HC FM SH IH UR

  # Spanish Language Roads https://pe.usps.com/text/pub28/28aph.htm
  CLL CMT CAM CER ENT PSO PLA RCH VER
  LCMT ECAM LCER LENT EPSO LPLA ERCH LVER
}

"""
Street type as defined by the [USPS Postal Addressing Standards](https://pe.usps.com/text/pub28/28apc_002.htm)
"""
enum FacilityType {
  # Legislative Boundaries
  """Precinct"""
  PCT

  """Puerto Rico Urbanizations >"""
  URB ALT BDA BO BOSQUE BRISA CIUDAD COLINA CHALETS COMUNIDAD EST
  EXT HACIENDA JARD IND LOMA MANS PARQ PARCELA PASEO PRADERA PORTAL
  PORTALES QUINTAS RES REPTO RIBERAS SECT TERR VALLE VILLA VISTA

  """Commercial Facilities >"""
  PIER MLRM

  """Military Ships / Base Titles >"""
  USAS USAV USCGC USS USNV USNS NOAAS

  """PO Boxes"""
  PO

  """[Military Post Offices](https://stamps.custhelp.com/app/answers/detail/a_id/774/~/how-to-send-apo%2Ffpo-military-mail) >"""
  PSC CMR UMR RPO OMDC

  """College and University Facilities"""
  RHO
}

"""
Unit type identifiers as defined by the [USPS Postal Addressing Standards](https://pe.usps.com/text/pub28/28apc_003.htm)
"""
enum UnitAbbr {
  APT BSMT BLDG BOX DEPT FL FRNT HNGR KEY LBBY LOT LOWR
  OFC PH PIER REAR RM SIDE SLIP SPC STOP STE TRLR UNIT UPPR

  # Non-Standard Identifiers
  """(non-standard)"""
  NO 
  """(non-standard)"""
  LFT
  """(non-standard)"""
  LV
  """(non-standard)"""
  COTTAGE
  """(non-standard)"""
  YT
  """(non-standard)"""
  DORM
}

"""
Personal mail delivery identifiers.
"""
enum PersonalIdentifier {
  """Personal Mail Box"""
  PMB

  """Mail Stop Code"""
  MSC 

  """Mail Stop"""
  MS

  """Personal File Number"""
  PFN
  
  """Booking Number"""
  CEN
}

"""
Street Directionals as defined by the [USPS Postal Addressing Standards](https://pe.usps.com/text/pub28/28api_007.htm)
"""
enum Directional {
  """North"""
  N 
  """North East"""
  NE 
  """North West"""
  NW 
  """South"""
  S 
  """South East"""
  SE 
  """South West"""
  SW 
  """East"""
  E 
  """West"""
  W
}

"""
Two letter state codes for the United States, US Military Bases, Canada, and Great Britain as defined by [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2:US) and the [USPS Postal Addressing Standards](https://pe.usps.com/text/pub28/28apb.htm)
"""
enum State {
  # https://en.wikipedia.org/wiki/ISO_3166-2:US / https://pe.usps.com/text/pub28/28apb.htm
  """US State Codes >"""
  AL AK AS AZ AR CA CO CT DE DC FM FL GA GU HI ID IL IN IA KS KY LA ME MH MD MA
  MI MN MS MO MT NE NV NH NJ NM NY NC ND MP OH OK OR PW PA PR RI SC SD TN TX UM
  UT VT VI VA WA WV WI WY

  # https://pe.usps.com/text/pub28/28apa_005.htm
  """Canadian States >"""
  AB BC MB NB NL NT NS NU ON PE QC SK YT

  # https://en.wikipedia.org/wiki/ISO_3166-2:GB#Countries_and_province
  """Great Britain Provinces >"""
  ENG NIR SCT WLS

  # https://support.shippingeasy.com/hc/en-us/articles/203085299-How-to-Format-Military-mail-addresses
  """US Military Bases >"""
  AE AP AA
}

"""
Three Letter Country Codes as defined by [ISO 3166](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)
"""
enum Country {
  ABW AFG AGO AIA ALA ALB AND ARE ARG ARM ASM ATA ATF ATG AUS AUT AZE
  BDI BEL BEN BES BFA BGD BGR BHR BHS BIH BLM BLR BLZ BMU BOL BRA BRB
  BRN BTN BVT BWA CAF CAN CCK CHE CHL CHN CIV CMR COD COG COK COL COM
  CPV CRI CUB CUW CXR CYM CYP CZE DEU DJI DMA DNK DOM DZA ECU EGY ERI
  ESH ESP EST ETH FIN FJI FLK FRA FRO FSM GAB GBR GEO GGY GHA GIB GIN
  GLP GMB GNB GNQ GRC GRD GRL GTM GUF GUM GUY HKG HMD HND HRV HTI HUN
  IDN IMN IND IOT IRL IRN IRQ ISL ISR ITA JAM JEY JOR JPN KAZ KEN KGZ
  KHM KIR KNA KOR KWT LAO LBN LBR LBY LCA LIE LKA LSO LTU LUX LVA MAC
  MAF MAR MCO MDA MDG MDV MEX MHL MKD MLI MLT MMR MNE MNG MNP MOZ MRT
  MSR MTQ MUS MWI MYS MYT NAM NCL NER NFK NGA NIC NIU NLD NOR NPL NRU
  NZL OMN PAK PAN PCN PER PHL PLW PNG POL PRI PRK PRT PRY PSE PYF QAT
  REU ROU RUS RWA SAU SDN SEN SGP SGS SHN SJM SLB SLE SLV SMR SOM SPM
  SRB SSD STP SUR SVK SVN SWE SWZ SXM SYC SYR TCA TCD TGO THA TJK TKL
  TKM TLS TON TTO TUN TUR TUV TWN TZA UGA UKR UMI URY USA UZB VAT VCT
  VEN VGB VIR VNM VUT WLF WSM YEM ZAF ZMB ZWE

  # Special Codes
  """(non-standard)"""
  UN
  """(non-standard)"""
  NT
  """(non-standard)"""
  FOREIGN
}

"""
The Ethnicity Taxonomy creates a hierarchy of up to three levels of ethnic specificity.

E.g. `Asian -> East Asian -> Chinese`

  1. Base ethnicity values are the OMB and Census [five primary ethnicities, plus hispanic](https://www.census.gov/newsroom/blogs/random-samplings/2021/08/measuring-racial-ethnic-diversity-2020-census.html)

  2. Each top level ethnicity classifier is then split by geographic region, where applicable.

  3. Ethnicities are then further split by major ancestry group, selected from the [Census Detailed Ancestry Code](https://www2.census.gov/programs-surveys/decennial/2000/phc/phc-t-43/tab01.pdf).


## Ethnicity Inference

Where voter files do not include self-declared ethnicity data, we will attempt to fill in the blanks with
inferred ethnicity classifiers. If you are using the Catalist file, these values will come from purchased
commercial data sources. When you bring your own data to our platform, we run a basic ethnicity inference
script on your dataset that uses self-declared ethnicities from other voters files to create best guess
classifications.

Our ethnicity classifier will first identify the self-declared ethnicities that appear as significant outliers
for unique first and last names in our voter file dataset. These names must exceed the standard deviation for
ethnicity value prevalence by 85% to be considered a confident ethnicity indicator. Where a name does not exceed
the confidence interval for a specific ethnicity (e.g. `Japanese`) the averages for that name are propagated up
the ethnicity specificity tree (e.g. `East Asian`) and the standard deviation is run again. These best-effort
ethnicity indicators are then used to mark un-coded voters in the dataset with their corresponding likely ethnicity
IDs.

> TODO: Align this taxonomy with the [DDX's](https://demexchange.com) new Race and Ethnicity taxonomy.
"""
enum Ethnicity {
  "**Asian**"
  ASIAN
    "Asian -> East Asian"
    EAST_ASIAN
      "Asian -> East Asian -> Chinese"
      CHINESE
      "Asian -> East Asian -> Japanese"
      JAPANESE
      "Asian -> East Asian -> Korean"
      KOREAN
    "Asian -> South Asian"
    SOUTH_ASIAN
      "Asian -> South Asian -> Indian"
      INDIAN
      "Asian -> South Asian -> Vietnamese"
      VIETNAMESE
      "Asian -> South Asian -> Thai"
      THAI
      "Asian -> South Asian -> Filipino"
      FILIPINO
      "Asian -> South Asian -> Pakistani"
      PAKISTANI
    "Asian -> West Asian"
    WEST_ASIAN
      "Asian -> West Asian -> Arab"
      ARAB
      "Asian -> West Asian -> Israeli"
      ISRAELI
  "**White**"
  WHITE
    "White -> Northern European"
    NORTH
      "White -> Northern European -> Swedish"
      SWEDISH
      "White -> Northern European -> Norwegian"
      NORWEGIAN
    "White -> Eastern European"
    EAST
      "White -> Eastern European -> Polish"
      POLISH
      "White -> Eastern European -> Russian"
      RUSSIAN
    "White -> Western European"
    WEST
      "White -> Western European -> German"
      GERMAN
      "White -> Western European -> French"
      FRENCH
      "White -> Western European -> Irish"
      IRISH
      "White -> Western European -> Italian"
      ITALIAN
      "White -> Western European -> Greek"
      GREEK
      "White -> Western European -> Portuguese"
      PORTUGUESE
      "White -> Western European -> Scottish"
      SCOTTISH
  "**Hispanic**"
  HISPANIC
    "Hispanic -> Mexican"
    MEXICAN
    "Hispanic -> Puerto Rican"
    PUERTO_RICAN
    "Hispanic -> Cuban"
    CUBAN
    "Hispanic -> Dominican"
    DOMINICAN
    "Hispanic -> Salvadoran"
    SALVADORAN
    "Hispanic -> Spanish"
    SPANISH
  "**Black**"
  BLACK
    "**Black** -> African"
    AFRICAN
  "**Pacific Islander**"
  PACIFIC
    "Pacific Islander -> Native Hawaiian"
    HAWAIIAN
  "**Native American**"
  NATIVE

  # Deprecated
  EURO @spectaql(options: [{ key: "undocumented", value: "true" }])
  JEWISH @spectaql(options: [{ key: "undocumented", value: "true" }])
}

"""
Ballot registration type.
"""
enum BallotType {
  """Polling Location"""
  PL 
  """Absentee / Vote by Mail Ballot"""
  AB
  """Digital Ballot"""
  DB
  """Political Overseas"""
  PO
  """Political Domestic"""
  PD
  """Military Overseas"""
  MO
  """Military Domestic"""
  MD
  """Non-Registered Voter"""
  NR
}

"""
Gender values are typically self reported in the source voter file. 
Some gender values may be inferred by user provided gendered preNominals, or by first name inference 
(e.g. Scott is likely male, Lilly is likely female). Inferred gender values are only included where 
confidence is over 90%.

> **TODO:** This ENUM encodes gender values accepted by the U.S. Government. We need to expand the enumerated 
values to include more variety, and add a self-reported gender column to [Person]({{Types.Person}}) to allow
further self identification.
"""
enum Gender {
  """Male"""
  M
  """Female"""
  F
  """Non-Binary / Other"""
  X
  """Unknown"""
  U
}

"""
Generational designation that follow a person's full name.
"""
enum NameSuffix {
  "Junior"
  JR 
  "Senior"
  SR 
  "The Second"
  II
  "The Third"
  III
  "The Fourth"
  IV
  "The Fifth"
  V
  "The Sixth"
  VI
  "The Seventh"
  VII
  "The Eigth"
  VIII
  "The Nineth"
  IX
  "The Tenth"
  X
}

"""
Standardized [english language honorifics](https://en.wikipedia.org/wiki/English_honorifics)
and [military titles](https://www.va.gov/vetsinworkplace/docs/em_rank.html) that prefix a name.
"""
enum PreNominal {
  # English Common Titles
  MR MSS MS MRS MX

  # French Titles
  MME MLLE MSSR

  # Academic and Professional Titles
  DR PROF HON JUS JUD

  # Religious Titles
  # TODO: Complete
  REV FR PR BR SIS

  # Military Titles
  # Shared
  PVT PFC CPL SGT SSG MSG SG1 SGM WO1 CW2 CW3 CW4 CW5 LT2
  LT1 CPT MAJ LTC COL BG  MG  LTG GEN

  # Army
  PV2 SPC SFC CSM SMA GA

  # Air Force
  AB AMN A1C SRA TSGT SMS CMS CCM GOAF

  # Navy
  SR    SA  SN   PO3 PO2  PO1  CPO  SCPO MCPO MCPOC FLTCM
  FORCM ENS LTJG LT  LCDR CDR  RDML RADM VADM ADM   FADM

  # Marines
  LCPL GYSGT MGYSGT SMMC
}

# TODO: Finish adding all designations.
"""
[Professional, legal, and academic designations](https://en.wikipedia.org/wiki/British_degree_abbreviations) that follow a person's full name.
"""
enum PostNominal {
  # Legal Honoraries
  ESQ PC QC CL SCL

  # Financial Honoraries
  CLU CHFC CFP CPA

  # Academic Bachelor Honoraries
  # https://en.wikipedia.org/wiki/Bachelor%27s_degree#Types
  BA BS LLB BCL BENG BED

  # Academic Masters Honoraries
  # https://en.wikipedia.org/wiki/Master%27s_degree#Titles
  LLM MA MFA MS MBA MD MPHL

  # Academic Doctor Honoraries
  # https://en.wikipedia.org/wiki/Doctorate#Types
  PHD JD LLD DO DC
}

"""
Addresses may be classified by their Residence Use Type. These values are simplified from
[Regrid's Standardized Land Use Codes](https://support.regrid.com/parcel-data/lbcs), and
resident data from the voter file.
"""
enum ResidenceUseType {
  """Single Family Home"""
  FAM
  """Multi Family Home (2-3 units)"""
  MULT
  """Small Building (4-10 units)"""
  SMALL
  """Big Building (10+ units)"""
  BIG
  """Single Room Occupancy"""
  SRO
  """Educational Facility (e.g. Dorms)"""
  EDU
  """Jail, Prison, or Penitentiary"""
  JAIL
  """Medical Facility (e.g. Assisted Living)"""
  MED
}

"""
Addresses may be classified by their Commercial Use Type. These values are simplified from
[Regrid's Standardized Land Use Codes](https://support.regrid.com/parcel-data/lbcs).
"""
enum CommercialUseType {
  """Commercial Office Space"""
  OFFICE
  """Retail"""
  RETAIL
  """Government Building"""
  GOV
  """Industrial Building or Warehouse"""
  IND
  """Institutional Facility (e.g. School or Hospital)"""
  INST
  """Agricultural Land"""
  AGR
  """Miscellaneous Commercial Use"""
  MISC
}

"""
Geocode Accuracy Types as defined by [Geocod.io](https://www.geocod.io/docs/#accuracy-score)
"""
enum AccuracyType {
  """The exact point was found with rooftop level accuracy"""
  ROOFTOP
  """The exact point was found from address range interpolation where the range contained a single point"""
  POINT
  """The point was found by performing [address range interpolation](https://en.wikipedia.org/wiki/Address_geocoding#Address_interpolation)"""
  INTERPOLATION
  """The exact house number was not found, so a close, neighboring house number was used instead"""
  NEAREST
  """The result is an intersection between two streets"""
  INTERSECTION
  """The result is a geocoded street centroid"""
  STREET
  """The point is a city/town/place zip code centroid"""
  PLACE
  """The point is a county centroid"""
  COUNTY
  """The point is a state centroid"""
  STATE
  """Result is on the boundary of the closest precinct"""
  NEAREST_PRECINCT_BOUNDS 
}

"""
Every geographic [Turf]({{Types.Turf}}) must be classified as a single TurfType.
"""
enum TurfType {
  """Administrative Boundary<br>(e.g. Town or County Borders)"""
  ADMIN
  """Legislative Boundary<br>(e.g. Precincts, School Boards)"""
  LEGIS
  """Local Boundary<br>(e.g. Neighborhoods)"""
  LOCAL
  """Postal Boundary<br>(e.g. Zip Codes)"""
  POSTAL
  """Statistical Boundary<br>(e.g. Census Blocks)"""
  STAT
  """User Defined Custom Boundary"""
  CUSTOM
}

"""
Every [Phone]({{Types.Phone}}) is described by the kind of network it connects to.
"""
enum PhoneSystem {
  """Cell Phone"""
  CELL
  """Land Line"""
  LAND
  """Fax Number"""
  FAX
  """Voice over IP"""
  VOIP
  """Toll Free Number"""
  TOLLFREE
  """Other Telecom System"""
  OTHER
}

"""
Every [PersonPhone]({{Types.PersonPhone}}) describes the [Person's]({{Types.Person}}) relationship to the [Phone]({{Types.Phone}}) as one of the following.
"""
enum PhoneType {
  """Home Phone"""
  HOME
  """Personal Phone"""
  PERS
  """Work Phone"""
  WORK
  """Other Phone"""
  OTHER
}

"""
Every [PersonAddress]({{Types.PersonAddress}}) describes the [Person's]({{Types.Person}}) relationship to the [Address]({{Types.Address}}) as one of the following.
"""
enum AddressType {
  """Renter"""
  RENT 
  """Rent Controlled Renter"""
  CONT
  """Subletted Renter"""
  SUB
  """Below Market Rate Renter"""
  BMR
  """Home Owner"""
  OWN
  """Lives With Home Owner"""
  LOWN
  """Residential Address"""
  RES 
  """Mailing Address"""
  MAIL
  """Work Address"""
  WORK
  """Investment Proeprty"""
  INV
  """Other Address"""
  OTHER
}

"""
Every [Election]({{Types.Election}}) is described by one of the following types.
"""
enum ElectionType {
  """Primary Election"""
  PRIMARY
  """General Election"""
  GENERAL
  """Special Election"""
  SPECIAL
  """Local Election"""
  LOCAL
}

"""
Education Levels
"""
enum Education {
  """Middle School"""
  MS
  """GED Certification"""
  GED
  """High School Degree"""
  HS
  """Vocational Degree"""
  VOC
  """Two Year Associates Degree"""
  ASS
  """Four Year Bachelor's Degree"""
  BACH
  """Graduate Degree"""
  GRAD
  """Doctorate Degree"""
  DOC
}

"""
Major world religions
"""
enum Religion {
  ATHEIST
  SPIRITUAL

  # Abrihamic
  JEWISH
  MUSLIM
  MORMAN
  DRUZE
  CHRISTIAN
    CATHOLIC
      EVANGELICAL
      EASTERN_ORTHODOX
      ROMAN_CATHOLIC
    PROTESTANT
      LUTHERAN

  # East Asian
  CONFUCIAN
  SHINTO
  TAOIST

  # Korean
  CHEONDO

  # Indian (Dharmic)
  HINDU
  BUDDHIST
  JAIN
  SIKH

  # African
  VODUN

  OTHER
}

"""
A Situs described a USPS addressable location
"""
interface Situs @spectaql(options: [{ key: "undocumented", value: "true" }]) {
  care: String
  facility: String
  facilityType: FacilityType

  pinType: PersonalIdentifier
  pinNum: String
  unitAbbr: UnitAbbr
  unitNum: String

  number: String

  streetPreDir: Directional
  streetName: String
  streetType: StreetType
  streetPostDir: Directional

  city: String
  state: State
  zip: String
  zip4: String

  country: Country
}

"""
An [Address']({{Types.Address}}) represents a physical building or unit in the real world.

U.S. addresses will have all of their component address parts parsed out in accordance with the [USPS Postal Addressing Standards](https://pe.usps.com/text/pub28/welcome.htm).

International addresses will have the full address – including newlines – in the `care` field, and the appropriate [Country]({{Types.Country}}) in the `country` field.

### Data Appends
To supplement the parsed and sanitized address from your file, we append assessor file metadata from
[Regrid](https://regrid.com) to include homeowner status, building type, rooftop level geocodes, and more.

Residential addresses we are not able to match to an assessor file record, we geocode with [Geocod.io](https://geocod.io).

[USPS Delivery Point Validation](https://en.wikipedia.org/wiki/Postal_address_verification#Delivery_Point_Validation)  metadata can be appended on request.

### Geocode Validation
When an [Address]({{Types.Address}}) is listed as the residential address of a voter whose profile includes a precinct number,
we validate that the `(lat, lng)` coordinate of the [Address]({{Types.Address}}) is within the precinct boundaries. 

If an [Address]({{Types.Address}}) is not within the precinct boundary, but under 30 feet away, the geocode is nudged to be within the boundary. 

If an [Address]({{Types.Address}}) is not within the precinct boundary, and over 30 feet away, we add new `(legLat, legLng)` coordinate just inside 
the nearest edge of the precinct.

### Turf Membership
Using this guaranteed precinct geographic membership, we can easily compute additional `Turf` memberships on the fly, including
for non-standard `Turf`s like neighborhoods, or even custom `Turf`s defined by an end user.
"""
type Address implements Situs {
  "Unique ID" 
  id: ID! @primary
  "Date added to the database"
  createdAt: Date! @merge(method: "min") @default(value: "now")
  "Date last modified"
  updatedAt: Date! @merge(method: "max") @default(value: "now")
  "Date deleted"
  deletedAt: Date @spectaql(options: [{ key: "example", value: "null" }])

  # SITUS Info
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): 'Care Of' Address Line"
  care: String @spectaql(options: [{ key: "example", value: "null" }])
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Facility Identifier<br>Typically used to identify a specific building on a larger campus."
  facility: String @spectaql(options: [{ key: "example", value: "null" }])
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Type of the Facility"
  facilityType: FacilityType @spectaql(options: [{ key: "example", value: "null" }])
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Personal Identification Number (PIN)<br>Typically used to identify an individual inside a facility."
  pinNum: String @spectaql(options: [{ key: "example", value: "null" }])
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): PIN Type"
  pinType: PersonalIdentifier @spectaql(options: [{ key: "example", value: "null" }])

  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Building Number<br>E.g. '123' in '123 Main St'"
  number: String @spectaql(options: [{ key: "example", value: "123" }])

  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Street Pre Directional<br>E.g. 'N' in '123 N Main St'"
  streetPreDir: Directional @spectaql(options: [{ key: "example", value: "N" }])
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Street Name<br>E.g. 'Main' in '123 Main St'"
  streetName: String @index @spectaql(options: [{ key: "example", value: "Main" }])
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Street Type<br>E.g. 'ST' in '123 Main St'"
  streetType: StreetType @spectaql(options: [{ key: "example", value: "ST" }])
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Street Post Directional<br>E.g. 'S' in '123 Main St S'"
  streetPostDir: Directional
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Unit Abbreviation<br>E.g. 'APT' in '123 Main St Apartment 456'"
  unitAbbr: UnitAbbr @spectaql(options: [{ key: "example", value: "APT" }])
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Unit Number<br>E.g. '456' in '123 Main St Apartment 456'"
  unitNum: String @spectaql(options: [{ key: "example", value: "456" }])

  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): City Name"
  city: String @spectaql(options: [{ key: "example", value: "Springfield" }])
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Two Letter [State]({{Types.State}}) Code"
  state: State @spectaql(options: [{ key: "example", value: "MA" }])
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Five Digit Zip Code"
  zip: String @index @spectaql(options: [{ key: "example", value: "01247" }])
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Four Digit Zip Code Extension"
  zip4: String @spectaql(options: [{ key: "example", value: "0142" }])
  "[USPS SITUS](https://pe.usps.com/text/pub28/welcome.htm): Three Character [Country]({{Types.Country}}) Code"
  country: Country @spectaql(options: [{ key: "example", value: "USA" }])

  "[USPS Verification](https://en.wikipedia.org/wiki/Postal_address_verification#Delivery_Point_Validation) Date"
  verifiedAt: Date
  "[USPS Verification](https://en.wikipedia.org/wiki/Postal_address_verification#Delivery_Point_Validation) Status"
  verification: String
  "[USPS Verification](https://en.wikipedia.org/wiki/Postal_address_verification#Delivery_Point_Validation) Carrier Route"
  carrierRoute: String
  "[USPS Verification](https://en.wikipedia.org/wiki/Postal_address_verification#Delivery_Point_Validation) Estimated Line of Travel (ELOT) number"
  lineOfTravel: Int
  "[USPS Verification](https://en.wikipedia.org/wiki/Postal_address_verification#Delivery_Point_Validation) Delivery Point ID"
  deliveryPoint: Int

  "Latitude"
  lat: Float
  "Longitude"
  lng: Float
  "Elevation"
  elv: Float
  "Geocode Accuracy Score"
  accuracyScore: Float
  "Geocode Accuracy Type"
  accuracyType: AccuracyType
  "Legislative Latitude for Turf Membership Correction"
  legLat: Float
  "Legislative Longitude for Turf Membership Correction"
  legLng: Float

  "Property Owner from [Regrid.com](https://regrid.com)"
  owner: String
  "Property Value from [Regrid.com](https://regrid.com)"
  value: Int
  "Parcel Area from [Regrid.com](https://regrid.com)"
  area: Int

  "Year of Building Construction from [Regrid.com](https://regrid.com)"
  yearBuilt: Int
  "Simplified Residential Use Code from [Regrid.com](https://regrid.com)"
  residentialCode: ResidenceUseType
  "Simplified Commercial Use Code from [Regrid.com](https://regrid.com)"
  commercialCode: CommercialUseType
  "Original Assessor Use Code from [Regrid.com](https://regrid.com)"
  assessorCode: String
  "Building Footprint in Square Feet from [Regrid.com](https://regrid.com)"
  footprint: Int
  "Number of Stories in Building from [Regrid.com](https://regrid.com)"
  stories: Int
  "Number of Street Facing Addressable Doors in Building from [Regrid.com](https://regrid.com)"
  doors: Int
  "Number of Units in Building from [Regrid.com](https://regrid.com)"
  units: Int

  "Property Size in Square Feet from [Regrid.com](https://regrid.com)"
  squareFeet: Int
  "Property Floors in Square Feet from [Regrid.com](https://regrid.com)"
  floors: Int
  "Property Room Count from [Regrid.com](https://regrid.com)"
  rooms: Int
  "Property Bedroom Count from [Regrid.com](https://regrid.com)"
  bedrooms: Int
  "Property Bathroom Count from [Regrid.com](https://regrid.com)"
  bathrooms: Float

  residents: [PersonAddress!]! @spectaql(options: [{ key: "undocumented", value: "true" }])

}

"""
A `Turf` represents an arbitrary geographical boundary and may represent any number of [TurfTypes]({{Types.TurfType}}).

`Turf` objects contain the original geometry in the `shape` field, and some pre-computed convenience values like bounding box, centroid, and area.

The `Turf`'s `shape` must be a "simple" polygon - that is, a single-loop polygon for which the boundary does not intersect itself.

`Turf`s may be a member of a `group` (e.g. "Council Districts"), and have a `name` (e.g. "District 6"). This `group` + `name` combination 
may be shared by multiple `Turf`s in the data set when a `Turf` can not be represented by a single "simple" polygon.

Using any [Address']({{Types.Address}}) `(lat, lng)` coordinates – or `(legLat, legLng)` coordinates which have been selected to 
guarantee correct legislative membership – we can easily determine `Turf` membership on the fly, and easily compute `Turf` membership
for non-standard `Turf`s like neighborhoods, or custom `Turf`s defined by an end user.
"""
type Turf {
  "Unique Turf ID"
  id: ID! @primary
  "The Turf's Geometry. Must be a 'simple' polygon - that is, a single-loop for which the boundary does not intersect itself."
  shape: Geometry!
  "Created Date"
  createdAt: Date! @merge(method: "min") @default(value: "now")
  "Last Modified Date"
  updatedAt: Date! @merge(method: "max") @default(value: "now")
  "Deleted Date"
  deletedAt: Date @spectaql(options: [{ key: "example", value: "null" }])

  "Turf Type"
  type: TurfType! @default(value: "TurfType.CUSTOM")
  "State FIPS Code"
  state: Int
  "County FIPS Code"
  county: Int
  """Group name for this turf type (e.g. "Council Districts")"""
  group: String!
  """Turf Name (e.g. "District 6")"""
  name: String! @index
  """Label Point Latitude using [Polylabel](https://www.npmjs.com/package/polylabel)"""
  lat: Float
  """Label Point Longitude using [Polylabel](https://www.npmjs.com/package/polylabel)"""
  lng: Float
  """Bounding Box Min Latitude"""
  latMin: Float @index(group: "Bounds")
  """Bounding Box Max Latitude"""
  latMax: Float @index(group: "Bounds")
  """Bounding Box Min Longitude"""
  lngMin: Float @index(group: "Bounds")
  """Bounding Box Max Latitude"""
  lngMax: Float @index(group: "Bounds")
  """Geometry Area"""
  area: Float
}

"""
Email addresses are validated and de-duplicated on import.

Additional bounce verification available from [bounceless.io](bounceless.io) on request.
"""
type Email {
  "Person associated with this email address"
  person: Person! @primary
  "Validated and formatted email address"
  email: String! @primary @index @spectaql(options: [{ key: "example", value: "alex@hamilton.gov" }])
  "Created Date"
  createdAt: Date! @merge(method: "min") @default(value: "now")
  "Last Modified Date"
  updatedAt: Date! @merge(method: "max") @default(value: "now")
  "Deleted Date"
  deletedAt: Date @spectaql(options: [{ key: "example", value: "null" }])
  "True if deliverable, False if un-deliverable, null if unknown."
  deliverable: Boolean
}

"""
Phone numbers are formatted and de-duplicated on import.
"""
type Phone {
  "[E.164 formatted](https://en.wikipedia.org/wiki/E.164) phone number"
  number: String! @primary @spectaql(options: [{ key: "example", value: "+12345678900" }])
  "Created Date"
  createdAt: Date! @merge(method: "min") @default(value: "now")
  "Last Modified Date"
  updatedAt: Date! @merge(method: "max") @default(value: "now")
  "Deleted Date"
  deletedAt: Date @spectaql(options: [{ key: "example", value: "null" }])

  "The type of phone system this line is connected with."
  system: PhoneSystem
  "True if SMS capable, False if not, null if unknown."
  sms: Boolean
  "True if voice capable, False if not, null if unknown."
  voice: Boolean
  "True if present in the National Do Not Call database, False if not, null if unknown."
  ndnc: Boolean

  owners: [PersonPhone!]! @spectaql(options: [{ key: "undocumented", value: "true" }])
}

"""
Describes the relationship between a [Person]({{Types.Person}}) and an [Address]({{Types.Address}}).
"""
type PersonAddress {
  "Date this [Address]({{Types.Address}}) was associated with this [Person]({{Types.Person}})."
  createdAt: Date! @merge(method: "min") @default(value: "now")
  "Date this [Person]({{Types.Person}}) and [Address]({{Types.Address}}) relationship was last updated."
  updatedAt: Date! @merge(method: "max") @default(value: "now")
  "Date this [Address]({{Types.Address}}) was no longer associated with this [Person]({{Types.Person}}). See `PersonAddress.ncoa` for details."
  deletedAt: Date @spectaql(options: [{ key: "example", value: "null" }])
  "USPS NCOA record, if available."
  ncoa: String
  "The [Person]({{Types.Person}}) record described by this relationship."
  person: Person! @primary
  "The [Address]({{Types.Address}}) record described by this relationship."
  address: Address! @primary @index
  "The kind of relationship between this [Person]({{Types.Person}}) and [Address]({{Types.Address}})."
  type: AddressType
}

"""
Describes the relationship between a [Person]({{Types.Person}}) and an [Phone]({{Types.Phone}}).
"""
type PersonPhone {
  "Date this [Phone]({{Types.Phone}}) was associated with this [Person]({{Types.Person}})."
  createdAt: Date! @merge(method: "min") @default(value: "now")
  "Date this [Person]({{Types.Person}}) and [Phone]({{Types.Phone}}) relationship was last updated."
  updatedAt: Date! @merge(method: "max") @default(value: "now")
  "Date this [Phone]({{Types.Phone}}) was no longer associated with this [Person]({{Types.Person}})."
  deletedAt: Date @spectaql(options: [{ key: "example", value: "null" }])
  "The [Person]({{Types.Person}}) record described by this relationship."
  person: Person! @primary
  "The [Phone]({{Types.Phone}}) record described by this relationship."
  phone: Phone! @primary @index
  "The kind of relationship between this [Person]({{Types.Person}}) and [Phone]({{Types.Phone}})."
  type: PhoneType
}

"""
Common Account Type Identifiers
"""
enum AccountType {
  "NGPVAN Voter ID"
  VAN
  "Catalist ID"
  CAT
  "TargetSmart"
  TS
  "PDI Voter ID"
  PDI
  "Nation Builder ID"
  NB
  "Facebook ID"
  FB
  "Twitter Handle"
  TW
  "LinkedIn User ID"
  LI
  "Unknown ID Type"
  UNK
}

"""
Represents a 3rd party account identifier associated with a [Person]({{Types.Person}}).
This may include other Voter CRMs (e.g. NGPVAN, Nation Builder), Voter Data Files 
(e.g. Catalist, TargetSmart, PDI), Social Networks (e.g. Twitter, Facebook), or any other
user defined account identifier.

Depending on where your account's data is sourced from, your database may be pre-seeded with
identifiers from either Catalist, NGPVAN, or VoteBuilder IDs.
"""
type Account {
  "Person associated with this account ID"
  person: Person! @primary
  "Type of Account"
  accountType: AccountType! @primary @default(value: "AccountType.UNK") @spectaql(options: [{ key: "example", value: "VAN" }])
  "Account Identifier"
  accountId: String! @primary @index @spectaql(options: [{ key: "example", value: "UUID_1234567890" }])
  "Created Date"
  createdAt: Date! @merge(method: "min") @default(value: "now")
  "Date Updated"
  updatedAt: Date! @merge(method: "max") @default(value: "now")
  "Deleted Date"
  deletedAt: Date @spectaql(options: [{ key: "example", value: "null" }])
}

"""
Work experience types inspired by LinkedIn profile options.
"""
enum ExperienceType {
  "Full Time"
  FULL
  "Part Time"
  PART
  "Contract"
  CONT
  "Volunteer"
  VOL
  "Self Employed"
  SELF
  "Freelance"
  FREE
  "Apprenticeship"
  APPR
  "Seasonal"
  SEAS
  "Unknown"
  UNK
}

"""
Military Status. This data is infrequently available, except as imported by the user, or independently purchased through 3rd party vendors.
"""
enum MilitaryStatus {
  "Civilian (default)"
  CIVILIAN
  "Military, Unknown Status"
  MILITARY
  "Active Military"
  ACTIVE
  "Military Reservist"
  RESERVE
  "Service Veteran"
  VETERAN
}

"""
Current or past work experience. This data is infrequently available, except as imported by the user, or independently purchased through 3rd party vendors.
"""
type Experience {
  "The [Person]({{Types.Person}}) associated with this work experience."
  person: Person! @primary
  "The type of experience. (E.g. Full Time, Volunteer)."
  type: ExperienceType! @primary @default(value: "ExperienceType.UNK")
  "Name of employer."
  employer: String! @primary
  "Role in organization."
  role: String! @primary
  "Experiecne start date."
  startDate: Date
  "Experiecne end date. Null if current."
  endDate: Date

  "Record creation date."
  createdAt: Date! @merge(method: "min") @default(value: "now")
  "Date last updated."
  updatedAt: Date! @merge(method: "max") @default(value: "now")
  "Date deleted."
  deletedAt: Date @spectaql(options: [{ key: "example", value: "null" }])
}

type Campaign {
  id: ID! @primary
  contest: Contest!
  name: String!
}

type Contest {
  id: ID! @primary
  election: Election!
  name: String!
}

"""
Represents an election. Election ID is used by [Vote]({{Types.Vote}}).
"""
type Election {
  "Unique Election ID"
  id: ID! @primary
  "Date of the Election"
  electionDate: Date
  "Human Readable Name"
  name: String
  "Election Type"
  type: ElectionType
  "Turf ID covered by this election"
  turf: String
}

"""
Represents a single vote cast by a [Person]({{Types.Person}}) in an [Election]({{Types.Election}}).

Every vote cast will have a [BallotType]({{Types.BallotType}}), representing the voting method (e.g. 
Polling Place or Mail In Ballot), an optional [Party]({{Types.Party}}) if the election was a partisan primary,
if their vote was counted in the election or not.

Depending on the granularity of returns data available for the jurisdiction, the vote record may also include 
the date the ballot was "issued" and the date the ballot was "returned". Issued dates for mail in ballots 
represent the day it was mailed out, and return date represent the date it was recieved by the elections office, 
and can be used to find early voters.

## Voter Turnout Score
Our built-in Voter Turnout Scores are calculated on the fly based on weighted vote history. 
A score of 0 means the voter has not cast a ballot in a single election, and a score of 100 
means they have voted in every election since their registration.

Voters who have registered recently, and have not had many opportunities to cast a vote yet,
are assigned a score ranging from 50 to 100 depending on their age and voting history within
that election cycle.

Weighted vote history means we account for both vote recency, and election type when factoring
each cast ballot into the voter's final score. A single vote's weight drops off linerarly
with time, and an individual election's weight is pegged to total turnout for that election.

In addition to our baked-in voter turnout score, we also allow users to filter by specific
election turnout criteria in-app (e.g. "Voted in 3 of the last 5 General Elections", or
"Voted in last year's Primary Election") so you can fine-tune your turnout calculations.
"""
type Vote {
  "The [Person]({{Types.Person}}) associated with this vote"
  person: Person! @primary @index
  "The [Election]({{Types.Election}}) associated with this vote"
  election: Election! @primary
  "The [BallotType]({{Types.BallotType}}) used to submit this vote"
  method: BallotType
  "In partisan primaries, this will show the [Party]({{Types.Party}})'s election this voter participated in."
  party: Party
  "Date of ballot issuance. Issued dates for mail in ballots represent the day it was mailed."
  issued: Date
  "Date of ballot return. Return dates for mail in ballots represent the day it was recieved back."
  returned: Date
  "True if the ballot was counted in the election tally. False if the ballot was not counted. Not that not all returned ballots are counted."
  counted: Boolean
}

type Returns {
  contest: Contest! @primary
  turf: Turf! @primary
  party: Party! @primary @default(value: "Party.U")
  rank: Int! @primary
  tally: Int!
}

"""
Scores represent a value assigned to a [Person]({{Types.Person}}) for a particular predictive model.

**UNIVERSE** does not provide any custom models ourselves, but we are happy to load predictive models from
third party vendors.

Depending on the source of your voter file, some predictive models may already be included in your file.
"""
type Score {
  "The [Person]({{Types.Person}}) associated with this score."
  person: Person! @primary @unique
  "Name of this model"
  name: String! @primary @unique
  "Numeric score value between 0 and 1 assigned to this Person for this model."
  value: Float! @unique
  "Date of last update"
  updatedAt: Date
}

"""
[People]({{Types.Person}}) are literally at the center of every **UNIVERSE** voter file: 
The Person model connects all the other models in this data dictionary.

Properties found directly on the [Person]({{Types.Person}}) model largely come from the voter data file.
See below for details.

"""
type Person {
  "Unique **UNIVERSE** identifier. IDs are unique per-campaign for security."
  id: ID! @primary
  "County identifier as provided by the voter file."
  countyId: String @index
  "Affidavit number as provided by the voter file."
  affidavitNum: String @index
  "Precinct identifier as provided by the voter file."
  precinct: String

  "Original registration date of this person"
  createdAt: Date! @merge(method: "min") @default(value: "now")
  "Date this person record was last updated"
  updatedAt: Date! @merge(method: "max") @default(value: "now")
  "Date this person was removed from the database"
  deletedAt: Date @spectaql(options: [{ key: "example", value: "null" }])

  "Standardized Name [PreNominal]({{Types.PreNominal}})"
  preNominal: PreNominal
  "Person First Name"
  firstName: String @index
  "Person Middle Name"
  middleName: String
  "Person Last Name"
  lastName: String @index
  "Standardized [NameSuffix]({{Types.NameSuffix}})"
  suffix: NameSuffix
  "Standardized Name [PostNominal]({{Types.PostNominal}})"
  postNominal: PostNominal
  "Person Nickname"
  nickname: String
  "Date of Birth. If the data source only provides a birth year, the month and date will be set to Jan 1st of that year."
  birthDate: Date @index
  "Birth State. Only available in select jurisdictions."
  birthState: State
  "Birth State. Only available in select jurisdictions."
  birthCountry: Country

  """
  Standardized [Gender]({{Types.Gender}}) as provided by the voter file, where available. 
  
  Some gender values may be inferred by user provided gendered preNominals, or by first name inference (e.g. Scott is likely male, Lilly is likely female). Inferred gender values are only included where confidence is over 90%.
  """
  gender: Gender
  "Standardized [Party]({{Types.Party}}) Identifier as provided by the voter file."
  party: Party
  "Standardized [BallotType]({{Types.BallotType}}) as provided by the voter file."
  ballot: BallotType
  "Religious Practice"
  religion: Religion
  "Highest Education Level Achieved"
  education: Education
  "Current Military Status"
  military: MilitaryStatus
  "Income Bracket"
  income: Int

  "Primary spoken [LanguageCode]({{Types.LanguageCode}}). Data may come from the language of ballot requested, or past interactions by volunteers in the field."
  primaryLanguageCode: LanguageCode
  "Secondary spoken [LanguageCode]({{Types.LanguageCode}}), if available."
  secondaryLanguageCode: LanguageCode
  "Self-identified ethnicity provided in the voter data file, by country of origin, or past interactions by volunteers in the field."
  primaryEthnicityCode: Ethnicity
  "Inferred ethnicity may be determined by `Person.firstName` and `Person.lastName` (see [Ethnicity Inference](#ethnicity-inference) for details), or through the use of purchased data appended separately."
  secondaryEthnicityCode: Ethnicity

  "Zero to many [Email]({{Types.Email}}) addresses associated with this Person."
  emails: [Email!]!
  "Zero to many other [Account]({{Types.Account}}) identifiers tied to this Person."
  accounts: [Account!]!
  """
  Zero to many [Vote]({{Types.Vote}}) history records cast by this Person. 
  
  To learn more about our voter turnout scores in the app, see the [Voter Turnout Score](#voter-turnout-score) section below.
  """
  votes: [Vote!]!
  "Zero to many [PersonPhone]({{Types.PersonPhone}}) records related to this Person."
  phones: [PersonPhone!]!
  "Zero to many [Address]({{Types.Address}}) records related to this Person."
  addresses: [PersonAddress!]!
  "Zero to many past work [Experience]({{Types.Experience}}) records related to this Person."
  experience: [Experience!]!
  "Zero to many 3rd party [Scores]({{Types.Score}}) associated with this Person."
  scores: [Score!]!
}

type Query {
  person(id: ID!): Person
  turf(id: ID!): Turf
  people(firstName: String, middleName: String, lastName: String, email: String, tel: String, languageCode: LanguageCode, streetName: String, zip: String): [Person]!
}

type Mutation {
  version: String
}
