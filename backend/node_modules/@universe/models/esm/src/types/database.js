import * as Diff from './diffs.js';
import * as Helpers from './helpers.js';
import metadataCreateSQL from '../sql/metadata_create.sql.js';
import metadataGetByIdSQL from '../sql/metadata_get_by_id.sql.js';
import metadataInsertSQL from '../sql/metadata_insert.sql.js';
import metadataUpsertSQL from '../sql/metadata_upsert.sql.js';
import metadataDeleteSQL from '../sql/metadata_delete.sql.js';
import addressCreateSQL from '../sql/address_create.sql.js';
import addressGetByIdSQL from '../sql/address_get_by_id.sql.js';
import addressInsertSQL from '../sql/address_insert.sql.js';
import addressUpsertSQL from '../sql/address_upsert.sql.js';
import addressDeleteSQL from '../sql/address_delete.sql.js';
import turfCreateSQL from '../sql/turf_create.sql.js';
import turfGetByIdSQL from '../sql/turf_get_by_id.sql.js';
import turfInsertSQL from '../sql/turf_insert.sql.js';
import turfUpsertSQL from '../sql/turf_upsert.sql.js';
import turfDeleteSQL from '../sql/turf_delete.sql.js';
import emailCreateSQL from '../sql/email_create.sql.js';
import emailGetByIdSQL from '../sql/email_get_by_id.sql.js';
import emailInsertSQL from '../sql/email_insert.sql.js';
import emailUpsertSQL from '../sql/email_upsert.sql.js';
import emailDeleteSQL from '../sql/email_delete.sql.js';
import phoneCreateSQL from '../sql/phone_create.sql.js';
import phoneGetByIdSQL from '../sql/phone_get_by_id.sql.js';
import phoneInsertSQL from '../sql/phone_insert.sql.js';
import phoneUpsertSQL from '../sql/phone_upsert.sql.js';
import phoneDeleteSQL from '../sql/phone_delete.sql.js';
import personaddressCreateSQL from '../sql/person_address_create.sql.js';
import personaddressGetByIdSQL from '../sql/person_address_get_by_id.sql.js';
import personaddressInsertSQL from '../sql/person_address_insert.sql.js';
import personaddressUpsertSQL from '../sql/person_address_upsert.sql.js';
import personaddressDeleteSQL from '../sql/person_address_delete.sql.js';
import personphoneCreateSQL from '../sql/person_phone_create.sql.js';
import personphoneGetByIdSQL from '../sql/person_phone_get_by_id.sql.js';
import personphoneInsertSQL from '../sql/person_phone_insert.sql.js';
import personphoneUpsertSQL from '../sql/person_phone_upsert.sql.js';
import personphoneDeleteSQL from '../sql/person_phone_delete.sql.js';
import accountCreateSQL from '../sql/account_create.sql.js';
import accountGetByIdSQL from '../sql/account_get_by_id.sql.js';
import accountInsertSQL from '../sql/account_insert.sql.js';
import accountUpsertSQL from '../sql/account_upsert.sql.js';
import accountDeleteSQL from '../sql/account_delete.sql.js';
import experienceCreateSQL from '../sql/experience_create.sql.js';
import experienceGetByIdSQL from '../sql/experience_get_by_id.sql.js';
import experienceInsertSQL from '../sql/experience_insert.sql.js';
import experienceUpsertSQL from '../sql/experience_upsert.sql.js';
import experienceDeleteSQL from '../sql/experience_delete.sql.js';
import campaignCreateSQL from '../sql/campaign_create.sql.js';
import campaignGetByIdSQL from '../sql/campaign_get_by_id.sql.js';
import campaignInsertSQL from '../sql/campaign_insert.sql.js';
import campaignUpsertSQL from '../sql/campaign_upsert.sql.js';
import campaignDeleteSQL from '../sql/campaign_delete.sql.js';
import contestCreateSQL from '../sql/contest_create.sql.js';
import contestGetByIdSQL from '../sql/contest_get_by_id.sql.js';
import contestInsertSQL from '../sql/contest_insert.sql.js';
import contestUpsertSQL from '../sql/contest_upsert.sql.js';
import contestDeleteSQL from '../sql/contest_delete.sql.js';
import electionCreateSQL from '../sql/election_create.sql.js';
import electionGetByIdSQL from '../sql/election_get_by_id.sql.js';
import electionInsertSQL from '../sql/election_insert.sql.js';
import electionUpsertSQL from '../sql/election_upsert.sql.js';
import electionDeleteSQL from '../sql/election_delete.sql.js';
import voteCreateSQL from '../sql/vote_create.sql.js';
import voteGetByIdSQL from '../sql/vote_get_by_id.sql.js';
import voteInsertSQL from '../sql/vote_insert.sql.js';
import voteUpsertSQL from '../sql/vote_upsert.sql.js';
import voteDeleteSQL from '../sql/vote_delete.sql.js';
import returnsCreateSQL from '../sql/returns_create.sql.js';
import returnsGetByIdSQL from '../sql/returns_get_by_id.sql.js';
import returnsInsertSQL from '../sql/returns_insert.sql.js';
import returnsUpsertSQL from '../sql/returns_upsert.sql.js';
import returnsDeleteSQL from '../sql/returns_delete.sql.js';
import scoreCreateSQL from '../sql/score_create.sql.js';
import scoreGetByIdSQL from '../sql/score_get_by_id.sql.js';
import scoreInsertSQL from '../sql/score_insert.sql.js';
import scoreUpsertSQL from '../sql/score_upsert.sql.js';
import scoreDeleteSQL from '../sql/score_delete.sql.js';
import personCreateSQL from '../sql/person_create.sql.js';
import personGetByIdSQL from '../sql/person_get_by_id.sql.js';
import personInsertSQL from '../sql/person_insert.sql.js';
import personUpsertSQL from '../sql/person_upsert.sql.js';
import personDeleteSQL from '../sql/person_delete.sql.js';
import createIndexesSQL from '../sql/create_indexes.sql.js';
import deleteIndexesSQL from '../sql/delete_indexes.sql.js';
export function database(db, onDiff) {
    db.exec(metadataCreateSQL);
    db.exec(addressCreateSQL);
    db.exec(turfCreateSQL);
    db.exec(emailCreateSQL);
    db.exec(phoneCreateSQL);
    db.exec(personaddressCreateSQL);
    db.exec(personphoneCreateSQL);
    db.exec(accountCreateSQL);
    db.exec(experienceCreateSQL);
    db.exec(campaignCreateSQL);
    db.exec(contestCreateSQL);
    db.exec(electionCreateSQL);
    db.exec(voteCreateSQL);
    db.exec(returnsCreateSQL);
    db.exec(scoreCreateSQL);
    db.exec(personCreateSQL);
    db.exec(createIndexesSQL);
    // Metadata
    const MetadataGetById = db.prepare(metadataGetByIdSQL);
    const MetadataInsert = db.prepare(metadataInsertSQL);
    const MetadataUpsert = db.prepare(metadataUpsertSQL);
    const MetadataDelete = db.prepare(metadataDeleteSQL);
    // Address
    const AddressGetById = db.prepare(addressGetByIdSQL);
    const AddressInsert = db.prepare(addressInsertSQL);
    const AddressUpsert = db.prepare(addressUpsertSQL);
    const AddressDelete = db.prepare(addressDeleteSQL);
    // Turf
    const TurfGetById = db.prepare(turfGetByIdSQL);
    const TurfInsert = db.prepare(turfInsertSQL);
    const TurfUpsert = db.prepare(turfUpsertSQL);
    const TurfDelete = db.prepare(turfDeleteSQL);
    // Email
    const EmailGetById = db.prepare(emailGetByIdSQL);
    const EmailInsert = db.prepare(emailInsertSQL);
    const EmailUpsert = db.prepare(emailUpsertSQL);
    const EmailDelete = db.prepare(emailDeleteSQL);
    // Phone
    const PhoneGetById = db.prepare(phoneGetByIdSQL);
    const PhoneInsert = db.prepare(phoneInsertSQL);
    const PhoneUpsert = db.prepare(phoneUpsertSQL);
    const PhoneDelete = db.prepare(phoneDeleteSQL);
    // PersonAddress
    const PersonAddressGetById = db.prepare(personaddressGetByIdSQL);
    const PersonAddressInsert = db.prepare(personaddressInsertSQL);
    const PersonAddressUpsert = db.prepare(personaddressUpsertSQL);
    const PersonAddressDelete = db.prepare(personaddressDeleteSQL);
    // PersonPhone
    const PersonPhoneGetById = db.prepare(personphoneGetByIdSQL);
    const PersonPhoneInsert = db.prepare(personphoneInsertSQL);
    const PersonPhoneUpsert = db.prepare(personphoneUpsertSQL);
    const PersonPhoneDelete = db.prepare(personphoneDeleteSQL);
    // Account
    const AccountGetById = db.prepare(accountGetByIdSQL);
    const AccountInsert = db.prepare(accountInsertSQL);
    const AccountUpsert = db.prepare(accountUpsertSQL);
    const AccountDelete = db.prepare(accountDeleteSQL);
    // Experience
    const ExperienceGetById = db.prepare(experienceGetByIdSQL);
    const ExperienceInsert = db.prepare(experienceInsertSQL);
    const ExperienceUpsert = db.prepare(experienceUpsertSQL);
    const ExperienceDelete = db.prepare(experienceDeleteSQL);
    // Campaign
    const CampaignGetById = db.prepare(campaignGetByIdSQL);
    const CampaignInsert = db.prepare(campaignInsertSQL);
    const CampaignUpsert = db.prepare(campaignUpsertSQL);
    const CampaignDelete = db.prepare(campaignDeleteSQL);
    // Contest
    const ContestGetById = db.prepare(contestGetByIdSQL);
    const ContestInsert = db.prepare(contestInsertSQL);
    const ContestUpsert = db.prepare(contestUpsertSQL);
    const ContestDelete = db.prepare(contestDeleteSQL);
    // Election
    const ElectionGetById = db.prepare(electionGetByIdSQL);
    const ElectionInsert = db.prepare(electionInsertSQL);
    const ElectionUpsert = db.prepare(electionUpsertSQL);
    const ElectionDelete = db.prepare(electionDeleteSQL);
    // Vote
    const VoteGetById = db.prepare(voteGetByIdSQL);
    const VoteInsert = db.prepare(voteInsertSQL);
    const VoteUpsert = db.prepare(voteUpsertSQL);
    const VoteDelete = db.prepare(voteDeleteSQL);
    // Returns
    const ReturnsGetById = db.prepare(returnsGetByIdSQL);
    const ReturnsInsert = db.prepare(returnsInsertSQL);
    const ReturnsUpsert = db.prepare(returnsUpsertSQL);
    const ReturnsDelete = db.prepare(returnsDeleteSQL);
    // Score
    const ScoreGetById = db.prepare(scoreGetByIdSQL);
    const ScoreInsert = db.prepare(scoreInsertSQL);
    const ScoreUpsert = db.prepare(scoreUpsertSQL);
    const ScoreDelete = db.prepare(scoreDeleteSQL);
    // Person
    const PersonGetById = db.prepare(personGetByIdSQL);
    const PersonInsert = db.prepare(personInsertSQL);
    const PersonUpsert = db.prepare(personUpsertSQL);
    const PersonDelete = db.prepare(personDeleteSQL);
    // Ensure our file version metadata is set.
    db.exec(`INSERT INTO "Metadata" ("key","value") VALUES ('version', '3.0.13') ON CONFLICT ("key") DO UPDATE SET "value" = '3.0.13'`);
    return {
        indexes: {
            create() {
                db.exec(createIndexesSQL);
            },
            delete() {
                db.exec(deleteIndexesSQL);
            },
        },
        Metadata: {
            getById(key) {
                const val = MetadataGetById.get(key);
                return val ? Helpers.Metadata.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Metadata.hydrate(data);
                MetadataInsert.run(Helpers.Metadata.sql(after));
                const diff = Diff.diffMetadata(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Metadata.dehydrate(data);
                const before = MetadataGetById.get(after.key);
                const diff = Diff.diffMetadata(before, after);
                if (!diff) {
                    return null;
                }
                MetadataUpsert.run(Helpers.Metadata.sql({ ...Helpers.Metadata.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(key, silent) {
                const before = MetadataGetById.get(key);
                if (!before) {
                    return null;
                }
                MetadataDelete.run(key);
                const diff = Diff.diffMetadata(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.key, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.key, true);
            },
        },
        Address: {
            getById(id) {
                const val = AddressGetById.get(id);
                return val ? Helpers.Address.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Address.hydrate(data);
                AddressInsert.run(Helpers.Address.sql(after));
                const diff = Diff.diffAddress(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Address.dehydrate(data);
                const before = AddressGetById.get(after.id);
                const diff = Diff.diffAddress(before, after);
                if (!diff) {
                    return null;
                }
                AddressUpsert.run(Helpers.Address.sql({ ...Helpers.Address.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(id, silent) {
                const before = AddressGetById.get(id);
                if (!before) {
                    return null;
                }
                AddressDelete.run(id);
                const diff = Diff.diffAddress(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.id, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.id, true);
            },
        },
        Turf: {
            getById(id) {
                const val = TurfGetById.get(id);
                return val ? Helpers.Turf.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Turf.hydrate(data);
                TurfInsert.run(Helpers.Turf.sql(after));
                const diff = Diff.diffTurf(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Turf.dehydrate(data);
                const before = TurfGetById.get(after.id);
                const diff = Diff.diffTurf(before, after);
                if (!diff) {
                    return null;
                }
                TurfUpsert.run(Helpers.Turf.sql({ ...Helpers.Turf.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(id, silent) {
                const before = TurfGetById.get(id);
                if (!before) {
                    return null;
                }
                TurfDelete.run(id);
                const diff = Diff.diffTurf(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.id, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.id, true);
            },
        },
        Email: {
            getById(personId, email) {
                const val = EmailGetById.get(personId, email);
                return val ? Helpers.Email.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Email.hydrate(data);
                EmailInsert.run(Helpers.Email.sql(after));
                const diff = Diff.diffEmail(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Email.dehydrate(data);
                const before = EmailGetById.get(after.personId, after.email);
                const diff = Diff.diffEmail(before, after);
                if (!diff) {
                    return null;
                }
                EmailUpsert.run(Helpers.Email.sql({ ...Helpers.Email.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(personId, email, silent) {
                const before = EmailGetById.get(personId, email);
                if (!before) {
                    return null;
                }
                EmailDelete.run(personId, email);
                const diff = Diff.diffEmail(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.personId, diff.before.email, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.personId, diff.after.email, true);
            },
        },
        Phone: {
            getById(number) {
                const val = PhoneGetById.get(number);
                return val ? Helpers.Phone.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Phone.hydrate(data);
                PhoneInsert.run(Helpers.Phone.sql(after));
                const diff = Diff.diffPhone(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Phone.dehydrate(data);
                const before = PhoneGetById.get(after.number);
                const diff = Diff.diffPhone(before, after);
                if (!diff) {
                    return null;
                }
                PhoneUpsert.run(Helpers.Phone.sql({ ...Helpers.Phone.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(number, silent) {
                const before = PhoneGetById.get(number);
                if (!before) {
                    return null;
                }
                PhoneDelete.run(number);
                const diff = Diff.diffPhone(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.number, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.number, true);
            },
        },
        PersonAddress: {
            getById(personId, addressId) {
                const val = PersonAddressGetById.get(personId, addressId);
                return val ? Helpers.PersonAddress.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.PersonAddress.hydrate(data);
                PersonAddressInsert.run(Helpers.PersonAddress.sql(after));
                const diff = Diff.diffPersonAddress(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.PersonAddress.dehydrate(data);
                const before = PersonAddressGetById.get(after.personId, after.addressId);
                const diff = Diff.diffPersonAddress(before, after);
                if (!diff) {
                    return null;
                }
                PersonAddressUpsert.run(Helpers.PersonAddress.sql({ ...Helpers.PersonAddress.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(personId, addressId, silent) {
                const before = PersonAddressGetById.get(personId, addressId);
                if (!before) {
                    return null;
                }
                PersonAddressDelete.run(personId, addressId);
                const diff = Diff.diffPersonAddress(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.personId, diff.before.addressId, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.personId, diff.after.addressId, true);
            },
        },
        PersonPhone: {
            getById(personId, phoneId) {
                const val = PersonPhoneGetById.get(personId, phoneId);
                return val ? Helpers.PersonPhone.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.PersonPhone.hydrate(data);
                PersonPhoneInsert.run(Helpers.PersonPhone.sql(after));
                const diff = Diff.diffPersonPhone(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.PersonPhone.dehydrate(data);
                const before = PersonPhoneGetById.get(after.personId, after.phoneId);
                const diff = Diff.diffPersonPhone(before, after);
                if (!diff) {
                    return null;
                }
                PersonPhoneUpsert.run(Helpers.PersonPhone.sql({ ...Helpers.PersonPhone.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(personId, phoneId, silent) {
                const before = PersonPhoneGetById.get(personId, phoneId);
                if (!before) {
                    return null;
                }
                PersonPhoneDelete.run(personId, phoneId);
                const diff = Diff.diffPersonPhone(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.personId, diff.before.phoneId, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.personId, diff.after.phoneId, true);
            },
        },
        Account: {
            getById(personId, accountType, accountId) {
                const val = AccountGetById.get(personId, accountType, accountId);
                return val ? Helpers.Account.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Account.hydrate(data);
                AccountInsert.run(Helpers.Account.sql(after));
                const diff = Diff.diffAccount(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Account.dehydrate(data);
                const before = AccountGetById.get(after.personId, after.accountType, after.accountId);
                const diff = Diff.diffAccount(before, after);
                if (!diff) {
                    return null;
                }
                AccountUpsert.run(Helpers.Account.sql({ ...Helpers.Account.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(personId, accountType, accountId, silent) {
                const before = AccountGetById.get(personId, accountType, accountId);
                if (!before) {
                    return null;
                }
                AccountDelete.run(personId, accountType, accountId);
                const diff = Diff.diffAccount(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.personId, diff.before.accountType, diff.before.accountId, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.personId, diff.after.accountType, diff.after.accountId, true);
            },
        },
        Experience: {
            getById(personId, type, employer, role) {
                const val = ExperienceGetById.get(personId, type, employer, role);
                return val ? Helpers.Experience.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Experience.hydrate(data);
                ExperienceInsert.run(Helpers.Experience.sql(after));
                const diff = Diff.diffExperience(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Experience.dehydrate(data);
                const before = ExperienceGetById.get(after.personId, after.type, after.employer, after.role);
                const diff = Diff.diffExperience(before, after);
                if (!diff) {
                    return null;
                }
                ExperienceUpsert.run(Helpers.Experience.sql({ ...Helpers.Experience.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(personId, type, employer, role, silent) {
                const before = ExperienceGetById.get(personId, type, employer, role);
                if (!before) {
                    return null;
                }
                ExperienceDelete.run(personId, type, employer, role);
                const diff = Diff.diffExperience(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.personId, diff.before.type, diff.before.employer, diff.before.role, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.personId, diff.after.type, diff.after.employer, diff.after.role, true);
            },
        },
        Campaign: {
            getById(id) {
                const val = CampaignGetById.get(id);
                return val ? Helpers.Campaign.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Campaign.hydrate(data);
                CampaignInsert.run(Helpers.Campaign.sql(after));
                const diff = Diff.diffCampaign(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Campaign.dehydrate(data);
                const before = CampaignGetById.get(after.id);
                const diff = Diff.diffCampaign(before, after);
                if (!diff) {
                    return null;
                }
                CampaignUpsert.run(Helpers.Campaign.sql({ ...Helpers.Campaign.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(id, silent) {
                const before = CampaignGetById.get(id);
                if (!before) {
                    return null;
                }
                CampaignDelete.run(id);
                const diff = Diff.diffCampaign(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.id, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.id, true);
            },
        },
        Contest: {
            getById(id) {
                const val = ContestGetById.get(id);
                return val ? Helpers.Contest.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Contest.hydrate(data);
                ContestInsert.run(Helpers.Contest.sql(after));
                const diff = Diff.diffContest(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Contest.dehydrate(data);
                const before = ContestGetById.get(after.id);
                const diff = Diff.diffContest(before, after);
                if (!diff) {
                    return null;
                }
                ContestUpsert.run(Helpers.Contest.sql({ ...Helpers.Contest.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(id, silent) {
                const before = ContestGetById.get(id);
                if (!before) {
                    return null;
                }
                ContestDelete.run(id);
                const diff = Diff.diffContest(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.id, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.id, true);
            },
        },
        Election: {
            getById(id) {
                const val = ElectionGetById.get(id);
                return val ? Helpers.Election.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Election.hydrate(data);
                ElectionInsert.run(Helpers.Election.sql(after));
                const diff = Diff.diffElection(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Election.dehydrate(data);
                const before = ElectionGetById.get(after.id);
                const diff = Diff.diffElection(before, after);
                if (!diff) {
                    return null;
                }
                ElectionUpsert.run(Helpers.Election.sql({ ...Helpers.Election.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(id, silent) {
                const before = ElectionGetById.get(id);
                if (!before) {
                    return null;
                }
                ElectionDelete.run(id);
                const diff = Diff.diffElection(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.id, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.id, true);
            },
        },
        Vote: {
            getById(personId, electionId) {
                const val = VoteGetById.get(personId, electionId);
                return val ? Helpers.Vote.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Vote.hydrate(data);
                VoteInsert.run(Helpers.Vote.sql(after));
                const diff = Diff.diffVote(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Vote.dehydrate(data);
                const before = VoteGetById.get(after.personId, after.electionId);
                const diff = Diff.diffVote(before, after);
                if (!diff) {
                    return null;
                }
                VoteUpsert.run(Helpers.Vote.sql({ ...Helpers.Vote.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(personId, electionId, silent) {
                const before = VoteGetById.get(personId, electionId);
                if (!before) {
                    return null;
                }
                VoteDelete.run(personId, electionId);
                const diff = Diff.diffVote(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.personId, diff.before.electionId, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.personId, diff.after.electionId, true);
            },
        },
        Returns: {
            getById(contestId, turfId, party, rank) {
                const val = ReturnsGetById.get(contestId, turfId, party, rank);
                return val ? Helpers.Returns.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Returns.hydrate(data);
                ReturnsInsert.run(Helpers.Returns.sql(after));
                const diff = Diff.diffReturns(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Returns.dehydrate(data);
                const before = ReturnsGetById.get(after.contestId, after.turfId, after.party, after.rank);
                const diff = Diff.diffReturns(before, after);
                if (!diff) {
                    return null;
                }
                ReturnsUpsert.run(Helpers.Returns.sql({ ...Helpers.Returns.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(contestId, turfId, party, rank, silent) {
                const before = ReturnsGetById.get(contestId, turfId, party, rank);
                if (!before) {
                    return null;
                }
                ReturnsDelete.run(contestId, turfId, party, rank);
                const diff = Diff.diffReturns(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.contestId, diff.before.turfId, diff.before.party, diff.before.rank, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.contestId, diff.after.turfId, diff.after.party, diff.after.rank, true);
            },
        },
        Score: {
            getById(personId, name) {
                const val = ScoreGetById.get(personId, name);
                return val ? Helpers.Score.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Score.hydrate(data);
                ScoreInsert.run(Helpers.Score.sql(after));
                const diff = Diff.diffScore(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Score.dehydrate(data);
                const before = ScoreGetById.get(after.personId, after.name);
                const diff = Diff.diffScore(before, after);
                if (!diff) {
                    return null;
                }
                ScoreUpsert.run(Helpers.Score.sql({ ...Helpers.Score.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(personId, name, silent) {
                const before = ScoreGetById.get(personId, name);
                if (!before) {
                    return null;
                }
                ScoreDelete.run(personId, name);
                const diff = Diff.diffScore(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.personId, diff.before.name, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.personId, diff.after.name, true);
            },
        },
        Person: {
            getById(id) {
                const val = PersonGetById.get(id);
                return val ? Helpers.Person.hydrate(val) : null;
            },
            insert(data, silent) {
                const after = Helpers.Person.hydrate(data);
                PersonInsert.run(Helpers.Person.sql(after));
                const diff = Diff.diffPerson(null, after);
                !silent && onDiff(diff);
                return diff;
            },
            upsert(data, silent) {
                const after = Helpers.Person.dehydrate(data);
                const before = PersonGetById.get(after.id);
                const diff = Diff.diffPerson(before, after);
                if (!diff) {
                    return null;
                }
                PersonUpsert.run(Helpers.Person.sql({ ...Helpers.Person.hydrate(before), ...after }));
                !silent && onDiff(diff);
                return diff;
            },
            delete(id, silent) {
                const before = PersonGetById.get(id);
                if (!before) {
                    return null;
                }
                PersonDelete.run(id);
                const diff = Diff.diffPerson(before, null);
                !silent && onDiff(diff);
                return diff;
            },
            apply(diff) {
                return diff.after ? this.upsert(diff.after, true) : this.delete(diff.before.id, true);
            },
            rollback(diff) {
                return diff.before ? this.upsert(diff.before, true) : this.delete(diff.after.id, true);
            },
        },
    };
}
//# sourceMappingURL=data:application/json;base64,