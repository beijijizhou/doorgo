import * as enums from './enums.js';
export type Maybe<T> = T | null;
export type Omit<T, K> = {
    [P in Exclude<keyof T, K>]: T[P];
};
export type FilterType<Base, Condition> = Pick<Base, {
    [Key in keyof Base]: Base[Key] extends Condition ? never : Key;
}[keyof Base]>;
export interface IMetadata {
    key: string;
    value: string;
}
export type IPartialMetadata = Partial<Omit<IMetadata, ''>> & Pick<IMetadata, 'key'>;
export type IDehydratedMetadata = Partial<Omit<IMetadata, ''>> & Pick<IMetadata, 'key'>;
export interface IAddress {
    id: string;
    createdAt: number;
    updatedAt: number;
    deletedAt: Maybe<number>;
    care: Maybe<string>;
    facility: Maybe<string>;
    facilityType: Maybe<enums.FacilityType>;
    pinNum: Maybe<string>;
    pinType: Maybe<enums.PersonalIdentifier>;
    number: Maybe<string>;
    streetPreDir: Maybe<enums.Directional>;
    streetName: Maybe<string>;
    streetType: Maybe<enums.StreetType>;
    streetPostDir: Maybe<enums.Directional>;
    unitAbbr: Maybe<enums.UnitAbbr>;
    unitNum: Maybe<string>;
    city: Maybe<string>;
    state: Maybe<enums.State>;
    zip: Maybe<string>;
    zip4: Maybe<string>;
    country: Maybe<enums.Country>;
    verifiedAt: Maybe<number>;
    verification: Maybe<string>;
    carrierRoute: Maybe<string>;
    lineOfTravel: Maybe<number>;
    deliveryPoint: Maybe<number>;
    lat: Maybe<number>;
    lng: Maybe<number>;
    elv: Maybe<number>;
    accuracyScore: Maybe<number>;
    accuracyType: Maybe<enums.AccuracyType>;
    legLat: Maybe<number>;
    legLng: Maybe<number>;
    owner: Maybe<string>;
    value: Maybe<number>;
    area: Maybe<number>;
    yearBuilt: Maybe<number>;
    residentialCode: Maybe<enums.ResidenceUseType>;
    commercialCode: Maybe<enums.CommercialUseType>;
    assessorCode: Maybe<string>;
    footprint: Maybe<number>;
    stories: Maybe<number>;
    doors: Maybe<number>;
    units: Maybe<number>;
    squareFeet: Maybe<number>;
    floors: Maybe<number>;
    rooms: Maybe<number>;
    bedrooms: Maybe<number>;
    bathrooms: Maybe<number>;
    residents?: IPersonAddress[];
}
export type IPartialAddress = Partial<Omit<IAddress, 'residents'>> & Pick<IAddress, 'id'> & {
    residents?: IPartialPersonAddress[];
};
export type IDehydratedAddress = Partial<Omit<IAddress, 'residents'>> & Pick<IAddress, 'id'>;
export interface ITurf {
    id: string;
    shape: number[][];
    createdAt: number;
    updatedAt: number;
    deletedAt: Maybe<number>;
    type: enums.TurfType;
    state: Maybe<number>;
    county: Maybe<number>;
    group: string;
    name: string;
    lat: Maybe<number>;
    lng: Maybe<number>;
    latMin: Maybe<number>;
    latMax: Maybe<number>;
    lngMin: Maybe<number>;
    lngMax: Maybe<number>;
    area: Maybe<number>;
}
export type IPartialTurf = Partial<Omit<ITurf, ''>> & Pick<ITurf, 'id'>;
export type IDehydratedTurf = Partial<Omit<ITurf, ''>> & Pick<ITurf, 'id'>;
export interface IEmail {
    email: string;
    createdAt: number;
    updatedAt: number;
    deletedAt: Maybe<number>;
    deliverable: Maybe<boolean>;
    personId: string;
    person?: IPerson;
}
export type IPartialEmail = Partial<Omit<IEmail, 'person'>> & Pick<IEmail, 'personId' | 'email'> & {
    person?: IPartialPerson;
};
export type IDehydratedEmail = Partial<Omit<IEmail, 'person'>> & Pick<IEmail, 'personId' | 'email'>;
export interface IPhone {
    number: string;
    createdAt: number;
    updatedAt: number;
    deletedAt: Maybe<number>;
    system: Maybe<enums.PhoneSystem>;
    sms: Maybe<boolean>;
    voice: Maybe<boolean>;
    ndnc: Maybe<boolean>;
    owners?: IPersonPhone[];
}
export type IPartialPhone = Partial<Omit<IPhone, 'owners'>> & Pick<IPhone, 'number'> & {
    owners?: IPartialPersonPhone[];
};
export type IDehydratedPhone = Partial<Omit<IPhone, 'owners'>> & Pick<IPhone, 'number'>;
export interface IPersonAddress {
    createdAt: number;
    updatedAt: number;
    deletedAt: Maybe<number>;
    ncoa: Maybe<string>;
    type: Maybe<enums.AddressType>;
    personId: string;
    person?: IPerson;
    addressId: string;
    address?: IAddress;
}
export type IPartialPersonAddress = Partial<Omit<IPersonAddress, 'person' | 'address'>> & Pick<IPersonAddress, 'personId' | 'addressId'> & {
    person?: IPartialPerson;
} & {
    address?: IPartialAddress;
};
export type IDehydratedPersonAddress = Partial<Omit<IPersonAddress, 'person' | 'address'>> & Pick<IPersonAddress, 'personId' | 'addressId'>;
export interface IPersonPhone {
    createdAt: number;
    updatedAt: number;
    deletedAt: Maybe<number>;
    type: Maybe<enums.PhoneType>;
    personId: string;
    person?: IPerson;
    phoneId: string;
    phone?: IPhone;
}
export type IPartialPersonPhone = Partial<Omit<IPersonPhone, 'person' | 'phone'>> & Pick<IPersonPhone, 'personId' | 'phoneId'> & {
    person?: IPartialPerson;
} & {
    phone?: IPartialPhone;
};
export type IDehydratedPersonPhone = Partial<Omit<IPersonPhone, 'person' | 'phone'>> & Pick<IPersonPhone, 'personId' | 'phoneId'>;
export interface IAccount {
    accountType: enums.AccountType;
    accountId: string;
    createdAt: number;
    updatedAt: number;
    deletedAt: Maybe<number>;
    personId: string;
    person?: IPerson;
}
export type IPartialAccount = Partial<Omit<IAccount, 'person'>> & Pick<IAccount, 'personId' | 'accountType' | 'accountId'> & {
    person?: IPartialPerson;
};
export type IDehydratedAccount = Partial<Omit<IAccount, 'person'>> & Pick<IAccount, 'personId' | 'accountType' | 'accountId'>;
export interface IExperience {
    type: enums.ExperienceType;
    employer: string;
    role: string;
    startDate: Maybe<number>;
    endDate: Maybe<number>;
    createdAt: number;
    updatedAt: number;
    deletedAt: Maybe<number>;
    personId: string;
    person?: IPerson;
}
export type IPartialExperience = Partial<Omit<IExperience, 'person'>> & Pick<IExperience, 'personId' | 'type' | 'employer' | 'role'> & {
    person?: IPartialPerson;
};
export type IDehydratedExperience = Partial<Omit<IExperience, 'person'>> & Pick<IExperience, 'personId' | 'type' | 'employer' | 'role'>;
export interface ICampaign {
    id: string;
    name: string;
    contestId: string;
    contest?: IContest;
}
export type IPartialCampaign = Partial<Omit<ICampaign, 'contest'>> & Pick<ICampaign, 'id'> & {
    contest?: IPartialContest;
};
export type IDehydratedCampaign = Partial<Omit<ICampaign, 'contest'>> & Pick<ICampaign, 'id'>;
export interface IContest {
    id: string;
    name: string;
    electionId: string;
    election?: IElection;
}
export type IPartialContest = Partial<Omit<IContest, 'election'>> & Pick<IContest, 'id'> & {
    election?: IPartialElection;
};
export type IDehydratedContest = Partial<Omit<IContest, 'election'>> & Pick<IContest, 'id'>;
export interface IElection {
    id: string;
    electionDate: Maybe<number>;
    name: Maybe<string>;
    type: Maybe<enums.ElectionType>;
    turf: Maybe<string>;
}
export type IPartialElection = Partial<Omit<IElection, ''>> & Pick<IElection, 'id'>;
export type IDehydratedElection = Partial<Omit<IElection, ''>> & Pick<IElection, 'id'>;
export interface IVote {
    method: Maybe<enums.BallotType>;
    party: Maybe<enums.Party>;
    issued: Maybe<number>;
    returned: Maybe<number>;
    counted: Maybe<boolean>;
    personId: string;
    person?: IPerson;
    electionId: string;
    election?: IElection;
}
export type IPartialVote = Partial<Omit<IVote, 'person' | 'election'>> & Pick<IVote, 'personId' | 'electionId'> & {
    person?: IPartialPerson;
} & {
    election?: IPartialElection;
};
export type IDehydratedVote = Partial<Omit<IVote, 'person' | 'election'>> & Pick<IVote, 'personId' | 'electionId'>;
export interface IReturns {
    party: enums.Party;
    rank: number;
    tally: number;
    contestId: string;
    contest?: IContest;
    turfId: string;
    turf?: ITurf;
}
export type IPartialReturns = Partial<Omit<IReturns, 'contest' | 'turf'>> & Pick<IReturns, 'contestId' | 'turfId' | 'party' | 'rank'> & {
    contest?: IPartialContest;
} & {
    turf?: IPartialTurf;
};
export type IDehydratedReturns = Partial<Omit<IReturns, 'contest' | 'turf'>> & Pick<IReturns, 'contestId' | 'turfId' | 'party' | 'rank'>;
export interface IScore {
    name: string;
    value: number;
    updatedAt: Maybe<number>;
    personId: string;
    person?: IPerson;
}
export type IPartialScore = Partial<Omit<IScore, 'person'>> & Pick<IScore, 'personId' | 'name'> & {
    person?: IPartialPerson;
};
export type IDehydratedScore = Partial<Omit<IScore, 'person'>> & Pick<IScore, 'personId' | 'name'>;
export interface IPerson {
    id: string;
    countyId: Maybe<string>;
    affidavitNum: Maybe<string>;
    precinct: Maybe<string>;
    createdAt: number;
    updatedAt: number;
    deletedAt: Maybe<number>;
    preNominal: Maybe<enums.PreNominal>;
    firstName: Maybe<string>;
    middleName: Maybe<string>;
    lastName: Maybe<string>;
    suffix: Maybe<enums.NameSuffix>;
    postNominal: Maybe<enums.PostNominal>;
    nickname: Maybe<string>;
    birthDate: Maybe<number>;
    birthState: Maybe<enums.State>;
    birthCountry: Maybe<enums.Country>;
    gender: Maybe<enums.Gender>;
    party: Maybe<enums.Party>;
    ballot: Maybe<enums.BallotType>;
    religion: Maybe<enums.Religion>;
    education: Maybe<enums.Education>;
    military: Maybe<enums.MilitaryStatus>;
    income: Maybe<number>;
    primaryLanguageCode: Maybe<enums.LanguageCode>;
    secondaryLanguageCode: Maybe<enums.LanguageCode>;
    primaryEthnicityCode: Maybe<enums.Ethnicity>;
    secondaryEthnicityCode: Maybe<enums.Ethnicity>;
    emails?: IEmail[];
    accounts?: IAccount[];
    votes?: IVote[];
    phones?: IPersonPhone[];
    addresses?: IPersonAddress[];
    experience?: IExperience[];
    scores?: IScore[];
}
export type IPartialPerson = Partial<Omit<IPerson, 'emails' | 'accounts' | 'votes' | 'phones' | 'addresses' | 'experience' | 'scores'>> & Pick<IPerson, 'id'> & {
    emails?: IPartialEmail[];
} & {
    accounts?: IPartialAccount[];
} & {
    votes?: IPartialVote[];
} & {
    phones?: IPartialPersonPhone[];
} & {
    addresses?: IPartialPersonAddress[];
} & {
    experience?: IPartialExperience[];
} & {
    scores?: IPartialScore[];
};
export type IDehydratedPerson = Partial<Omit<IPerson, 'emails' | 'accounts' | 'votes' | 'phones' | 'addresses' | 'experience' | 'scores'>> & Pick<IPerson, 'id'>;
