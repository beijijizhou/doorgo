/* eslint-disable */
/*
* CODE GENERATED AUTOMATICALLY
* THIS FILE SHOULD NOT BE EDITED BY HAND
*/
import { uuid } from '@universe/util';
import * as enums from './enums.js';
export function sqliteGeopolyBufferToGeoJSON(buff) {
    // See "4.1 Binary Encoding of Polygons" https://www.sqlite.org/geopoly.html
    // The first byte of the header is a flag byte. The least significant bit of the flag byte determines
    // whether the coordinate pairs that follow the header are stored big-endian or little-endian.
    const littleEndian = !!(buff[0] % 2);
    const geojson = [];
    const lat = new DataView(new ArrayBuffer(4));
    const lng = new DataView(new ArrayBuffer(4));
    for (let i = 4; i < buff.length; i += 8) {
        lat.setUint8(0, buff[i]);
        lat.setUint8(1, buff[i + 1]);
        lat.setUint8(2, buff[i + 2]);
        lat.setUint8(3, buff[i + 3]);
        lng.setUint8(0, buff[i + 4]);
        lng.setUint8(1, buff[i + 5]);
        lng.setUint8(2, buff[i + 6]);
        lng.setUint8(3, buff[i + 7]);
        geojson.push([lat.getFloat32(0, littleEndian), lng.getFloat32(0, littleEndian)]);
    }
    // Geopoly does not include the duplicate end point. Add it back in.
    geojson.push([geojson[0][0], geojson[0][1]]);
    return geojson;
}
function ensureGeojson(obj) {
    if (Buffer.isBuffer(obj)) {
        return sqliteGeopolyBufferToGeoJSON(obj);
    }
    return typeof obj === 'string' ? JSON.parse(obj) : JSON.parse(JSON.stringify(obj));
}
const ENCOUNTERED = new WeakMap();
const isNullOrUndefined = (v) => v === null || v === undefined;
const MetadataKeys = new Set(['key', 'value']);
const MetadataTypes = {
    key: { type: "string", isRequired: true, isPrimaryKey: true },
    value: { type: "string", isRequired: true, isPrimaryKey: false },
};
function stampMetadata(metadata) {
    if (metadata && ENCOUNTERED.has(metadata)) {
        return ENCOUNTERED.get(metadata);
    }
    const obj = {
        key: metadata?.key ?? '',
        value: metadata?.value ?? '',
    };
    metadata && ENCOUNTERED.set(metadata, obj);
    metadata && ENCOUNTERED.delete(metadata);
    return obj;
}
function sqlMetadata(metadata) {
    if (metadata && ENCOUNTERED.has(metadata)) {
        return ENCOUNTERED.get(metadata);
    }
    const obj = {
        key: metadata?.key ?? '',
        value: metadata?.value ?? '',
    };
    metadata && ENCOUNTERED.set(metadata, obj);
    metadata && ENCOUNTERED.delete(metadata);
    return obj;
}
function dehydrateMetadata(metadata) {
    if (metadata && ENCOUNTERED.has(metadata)) {
        return ENCOUNTERED.get(metadata);
    }
    // Required properties
    const obj = {
        key: metadata?.key ?? '',
        value: metadata?.value ?? '',
    };
    // Optional properties
    // Optional Relations
    metadata && ENCOUNTERED.set(metadata, obj);
    metadata && ENCOUNTERED.delete(metadata);
    return obj;
}
function flattenMetadata(metadata) {
    if (metadata && ENCOUNTERED.has(metadata)) {
        return ENCOUNTERED.get(metadata);
    }
    // Required properties
    const obj = {
        key: metadata?.key ?? '',
        value: metadata?.value ?? '',
    };
    // Optional properties
    return obj;
}
const AddressKeys = new Set(['id', 'createdAt', 'updatedAt', 'deletedAt', 'care', 'facility', 'facilityType', 'pinNum', 'pinType', 'number', 'streetPreDir', 'streetName', 'streetType', 'streetPostDir', 'unitAbbr', 'unitNum', 'city', 'state', 'zip', 'zip4', 'country', 'verifiedAt', 'verification', 'carrierRoute', 'lineOfTravel', 'deliveryPoint', 'lat', 'lng', 'elv', 'accuracyScore', 'accuracyType', 'legLat', 'legLng', 'owner', 'value', 'area', 'yearBuilt', 'residentialCode', 'commercialCode', 'assessorCode', 'footprint', 'stories', 'doors', 'units', 'squareFeet', 'floors', 'rooms', 'bedrooms', 'bathrooms']);
const AddressTypes = {
    id: { type: "string", isRequired: true, isPrimaryKey: true },
    createdAt: { type: "date", isRequired: true, isPrimaryKey: false },
    updatedAt: { type: "date", isRequired: true, isPrimaryKey: false },
    deletedAt: { type: "date", isRequired: false, isPrimaryKey: false },
    care: { type: "string", isRequired: false, isPrimaryKey: false },
    facility: { type: "string", isRequired: false, isPrimaryKey: false },
    facilityType: { type: "enum.FacilityType", isRequired: false, isPrimaryKey: false },
    pinNum: { type: "string", isRequired: false, isPrimaryKey: false },
    pinType: { type: "enum.PersonalIdentifier", isRequired: false, isPrimaryKey: false },
    number: { type: "string", isRequired: false, isPrimaryKey: false },
    streetPreDir: { type: "enum.Directional", isRequired: false, isPrimaryKey: false },
    streetName: { type: "string", isRequired: false, isPrimaryKey: false },
    streetType: { type: "enum.StreetType", isRequired: false, isPrimaryKey: false },
    streetPostDir: { type: "enum.Directional", isRequired: false, isPrimaryKey: false },
    unitAbbr: { type: "enum.UnitAbbr", isRequired: false, isPrimaryKey: false },
    unitNum: { type: "string", isRequired: false, isPrimaryKey: false },
    city: { type: "string", isRequired: false, isPrimaryKey: false },
    state: { type: "enum.State", isRequired: false, isPrimaryKey: false },
    zip: { type: "string", isRequired: false, isPrimaryKey: false },
    zip4: { type: "string", isRequired: false, isPrimaryKey: false },
    country: { type: "enum.Country", isRequired: false, isPrimaryKey: false },
    verifiedAt: { type: "date", isRequired: false, isPrimaryKey: false },
    verification: { type: "string", isRequired: false, isPrimaryKey: false },
    carrierRoute: { type: "string", isRequired: false, isPrimaryKey: false },
    lineOfTravel: { type: "int", isRequired: false, isPrimaryKey: false },
    deliveryPoint: { type: "int", isRequired: false, isPrimaryKey: false },
    lat: { type: "float", isRequired: false, isPrimaryKey: false },
    lng: { type: "float", isRequired: false, isPrimaryKey: false },
    elv: { type: "float", isRequired: false, isPrimaryKey: false },
    accuracyScore: { type: "float", isRequired: false, isPrimaryKey: false },
    accuracyType: { type: "enum.AccuracyType", isRequired: false, isPrimaryKey: false },
    legLat: { type: "float", isRequired: false, isPrimaryKey: false },
    legLng: { type: "float", isRequired: false, isPrimaryKey: false },
    owner: { type: "string", isRequired: false, isPrimaryKey: false },
    value: { type: "int", isRequired: false, isPrimaryKey: false },
    area: { type: "int", isRequired: false, isPrimaryKey: false },
    yearBuilt: { type: "int", isRequired: false, isPrimaryKey: false },
    residentialCode: { type: "enum.ResidenceUseType", isRequired: false, isPrimaryKey: false },
    commercialCode: { type: "enum.CommercialUseType", isRequired: false, isPrimaryKey: false },
    assessorCode: { type: "string", isRequired: false, isPrimaryKey: false },
    footprint: { type: "int", isRequired: false, isPrimaryKey: false },
    stories: { type: "int", isRequired: false, isPrimaryKey: false },
    doors: { type: "int", isRequired: false, isPrimaryKey: false },
    units: { type: "int", isRequired: false, isPrimaryKey: false },
    squareFeet: { type: "int", isRequired: false, isPrimaryKey: false },
    floors: { type: "int", isRequired: false, isPrimaryKey: false },
    rooms: { type: "int", isRequired: false, isPrimaryKey: false },
    bedrooms: { type: "int", isRequired: false, isPrimaryKey: false },
    bathrooms: { type: "float", isRequired: false, isPrimaryKey: false },
};
function stampAddress(address) {
    if (address && ENCOUNTERED.has(address)) {
        return ENCOUNTERED.get(address);
    }
    const obj = {
        id: address?.id ?? '',
        createdAt: address?.createdAt ?? Date.now(),
        updatedAt: address?.updatedAt ?? Date.now(),
        deletedAt: address?.deletedAt ?? null,
        care: address?.care ?? null,
        facility: address?.facility ?? null,
        facilityType: address?.facilityType ?? null,
        pinNum: address?.pinNum ?? null,
        pinType: address?.pinType ?? null,
        number: address?.number ?? null,
        streetPreDir: address?.streetPreDir ?? null,
        streetName: address?.streetName ?? null,
        streetType: address?.streetType ?? null,
        streetPostDir: address?.streetPostDir ?? null,
        unitAbbr: address?.unitAbbr ?? null,
        unitNum: address?.unitNum ?? null,
        city: address?.city ?? null,
        state: address?.state ?? null,
        zip: address?.zip ?? null,
        zip4: address?.zip4 ?? null,
        country: address?.country ?? null,
        verifiedAt: address?.verifiedAt ?? null,
        verification: address?.verification ?? null,
        carrierRoute: address?.carrierRoute ?? null,
        lineOfTravel: address?.lineOfTravel ?? null,
        deliveryPoint: address?.deliveryPoint ?? null,
        lat: address?.lat ?? null,
        lng: address?.lng ?? null,
        elv: address?.elv ?? null,
        accuracyScore: address?.accuracyScore ?? null,
        accuracyType: address?.accuracyType ?? null,
        legLat: address?.legLat ?? null,
        legLng: address?.legLng ?? null,
        owner: address?.owner ?? null,
        value: address?.value ?? null,
        area: address?.area ?? null,
        yearBuilt: address?.yearBuilt ?? null,
        residentialCode: address?.residentialCode ?? null,
        commercialCode: address?.commercialCode ?? null,
        assessorCode: address?.assessorCode ?? null,
        footprint: address?.footprint ?? null,
        stories: address?.stories ?? null,
        doors: address?.doors ?? null,
        units: address?.units ?? null,
        squareFeet: address?.squareFeet ?? null,
        floors: address?.floors ?? null,
        rooms: address?.rooms ?? null,
        bedrooms: address?.bedrooms ?? null,
        bathrooms: address?.bathrooms ?? null,
        residents: undefined,
    };
    address && ENCOUNTERED.set(address, obj);
    obj.residents = address?.residents?.filter(Boolean)?.map(stampPersonAddress) ?? undefined;
    address && ENCOUNTERED.delete(address);
    return obj;
}
function sqlAddress(address) {
    if (address && ENCOUNTERED.has(address)) {
        return ENCOUNTERED.get(address);
    }
    const obj = {
        id: address?.id ?? '',
        createdAt: address?.createdAt ?? Date.now(),
        updatedAt: address?.updatedAt ?? Date.now(),
        deletedAt: address?.deletedAt ?? null,
        care: address?.care ?? null,
        facility: address?.facility ?? null,
        facilityType: address?.facilityType ?? null,
        pinNum: address?.pinNum ?? null,
        pinType: address?.pinType ?? null,
        number: address?.number ?? null,
        streetPreDir: address?.streetPreDir ?? null,
        streetName: address?.streetName ?? null,
        streetType: address?.streetType ?? null,
        streetPostDir: address?.streetPostDir ?? null,
        unitAbbr: address?.unitAbbr ?? null,
        unitNum: address?.unitNum ?? null,
        city: address?.city ?? null,
        state: address?.state ?? null,
        zip: address?.zip ?? null,
        zip4: address?.zip4 ?? null,
        country: address?.country ?? null,
        verifiedAt: address?.verifiedAt ?? null,
        verification: address?.verification ?? null,
        carrierRoute: address?.carrierRoute ?? null,
        lineOfTravel: address?.lineOfTravel ?? null,
        deliveryPoint: address?.deliveryPoint ?? null,
        lat: address?.lat ?? null,
        lng: address?.lng ?? null,
        elv: address?.elv ?? null,
        accuracyScore: address?.accuracyScore ?? null,
        accuracyType: address?.accuracyType ?? null,
        legLat: address?.legLat ?? null,
        legLng: address?.legLng ?? null,
        owner: address?.owner ?? null,
        value: address?.value ?? null,
        area: address?.area ?? null,
        yearBuilt: address?.yearBuilt ?? null,
        residentialCode: address?.residentialCode ?? null,
        commercialCode: address?.commercialCode ?? null,
        assessorCode: address?.assessorCode ?? null,
        footprint: address?.footprint ?? null,
        stories: address?.stories ?? null,
        doors: address?.doors ?? null,
        units: address?.units ?? null,
        squareFeet: address?.squareFeet ?? null,
        floors: address?.floors ?? null,
        rooms: address?.rooms ?? null,
        bedrooms: address?.bedrooms ?? null,
        bathrooms: address?.bathrooms ?? null,
    };
    address && ENCOUNTERED.set(address, obj);
    address && ENCOUNTERED.delete(address);
    return obj;
}
function dehydrateAddress(address) {
    if (address && ENCOUNTERED.has(address)) {
        return ENCOUNTERED.get(address);
    }
    // Required properties
    const obj = {
        id: address?.id ?? '',
        createdAt: address?.createdAt ?? Date.now(),
        updatedAt: address?.updatedAt ?? Date.now(),
    };
    // Optional properties
    !isNullOrUndefined(address?.deletedAt) && (obj.deletedAt = address?.deletedAt);
    !isNullOrUndefined(address?.care) && (obj.care = address?.care);
    !isNullOrUndefined(address?.facility) && (obj.facility = address?.facility);
    !isNullOrUndefined(address?.facilityType) && (obj.facilityType = address?.facilityType);
    !isNullOrUndefined(address?.pinNum) && (obj.pinNum = address?.pinNum);
    !isNullOrUndefined(address?.pinType) && (obj.pinType = address?.pinType);
    !isNullOrUndefined(address?.number) && (obj.number = address?.number);
    !isNullOrUndefined(address?.streetPreDir) && (obj.streetPreDir = address?.streetPreDir);
    !isNullOrUndefined(address?.streetName) && (obj.streetName = address?.streetName);
    !isNullOrUndefined(address?.streetType) && (obj.streetType = address?.streetType);
    !isNullOrUndefined(address?.streetPostDir) && (obj.streetPostDir = address?.streetPostDir);
    !isNullOrUndefined(address?.unitAbbr) && (obj.unitAbbr = address?.unitAbbr);
    !isNullOrUndefined(address?.unitNum) && (obj.unitNum = address?.unitNum);
    !isNullOrUndefined(address?.city) && (obj.city = address?.city);
    !isNullOrUndefined(address?.state) && (obj.state = address?.state);
    !isNullOrUndefined(address?.zip) && (obj.zip = address?.zip);
    !isNullOrUndefined(address?.zip4) && (obj.zip4 = address?.zip4);
    !isNullOrUndefined(address?.country) && (obj.country = address?.country);
    !isNullOrUndefined(address?.verifiedAt) && (obj.verifiedAt = address?.verifiedAt);
    !isNullOrUndefined(address?.verification) && (obj.verification = address?.verification);
    !isNullOrUndefined(address?.carrierRoute) && (obj.carrierRoute = address?.carrierRoute);
    !isNullOrUndefined(address?.lineOfTravel) && (obj.lineOfTravel = address?.lineOfTravel);
    !isNullOrUndefined(address?.deliveryPoint) && (obj.deliveryPoint = address?.deliveryPoint);
    !isNullOrUndefined(address?.lat) && (obj.lat = address?.lat);
    !isNullOrUndefined(address?.lng) && (obj.lng = address?.lng);
    !isNullOrUndefined(address?.elv) && (obj.elv = address?.elv);
    !isNullOrUndefined(address?.accuracyScore) && (obj.accuracyScore = address?.accuracyScore);
    !isNullOrUndefined(address?.accuracyType) && (obj.accuracyType = address?.accuracyType);
    !isNullOrUndefined(address?.legLat) && (obj.legLat = address?.legLat);
    !isNullOrUndefined(address?.legLng) && (obj.legLng = address?.legLng);
    !isNullOrUndefined(address?.owner) && (obj.owner = address?.owner);
    !isNullOrUndefined(address?.value) && (obj.value = address?.value);
    !isNullOrUndefined(address?.area) && (obj.area = address?.area);
    !isNullOrUndefined(address?.yearBuilt) && (obj.yearBuilt = address?.yearBuilt);
    !isNullOrUndefined(address?.residentialCode) && (obj.residentialCode = address?.residentialCode);
    !isNullOrUndefined(address?.commercialCode) && (obj.commercialCode = address?.commercialCode);
    !isNullOrUndefined(address?.assessorCode) && (obj.assessorCode = address?.assessorCode);
    !isNullOrUndefined(address?.footprint) && (obj.footprint = address?.footprint);
    !isNullOrUndefined(address?.stories) && (obj.stories = address?.stories);
    !isNullOrUndefined(address?.doors) && (obj.doors = address?.doors);
    !isNullOrUndefined(address?.units) && (obj.units = address?.units);
    !isNullOrUndefined(address?.squareFeet) && (obj.squareFeet = address?.squareFeet);
    !isNullOrUndefined(address?.floors) && (obj.floors = address?.floors);
    !isNullOrUndefined(address?.rooms) && (obj.rooms = address?.rooms);
    !isNullOrUndefined(address?.bedrooms) && (obj.bedrooms = address?.bedrooms);
    !isNullOrUndefined(address?.bathrooms) && (obj.bathrooms = address?.bathrooms);
    // Optional Relations
    address && ENCOUNTERED.set(address, obj);
    !isNullOrUndefined(address?.residents) && (obj.residents = address?.residents?.filter(Boolean)?.map(dehydratePersonAddress));
    address && ENCOUNTERED.delete(address);
    return obj;
}
function flattenAddress(address) {
    if (address && ENCOUNTERED.has(address)) {
        return ENCOUNTERED.get(address);
    }
    // Required properties
    const obj = {
        id: address?.id ?? '',
        createdAt: address?.createdAt ?? Date.now(),
        updatedAt: address?.updatedAt ?? Date.now(),
    };
    // Optional properties
    !isNullOrUndefined(address?.deletedAt) && (obj.deletedAt = address?.deletedAt);
    !isNullOrUndefined(address?.care) && (obj.care = address?.care);
    !isNullOrUndefined(address?.facility) && (obj.facility = address?.facility);
    !isNullOrUndefined(address?.facilityType) && (obj.facilityType = address?.facilityType);
    !isNullOrUndefined(address?.pinNum) && (obj.pinNum = address?.pinNum);
    !isNullOrUndefined(address?.pinType) && (obj.pinType = address?.pinType);
    !isNullOrUndefined(address?.number) && (obj.number = address?.number);
    !isNullOrUndefined(address?.streetPreDir) && (obj.streetPreDir = address?.streetPreDir);
    !isNullOrUndefined(address?.streetName) && (obj.streetName = address?.streetName);
    !isNullOrUndefined(address?.streetType) && (obj.streetType = address?.streetType);
    !isNullOrUndefined(address?.streetPostDir) && (obj.streetPostDir = address?.streetPostDir);
    !isNullOrUndefined(address?.unitAbbr) && (obj.unitAbbr = address?.unitAbbr);
    !isNullOrUndefined(address?.unitNum) && (obj.unitNum = address?.unitNum);
    !isNullOrUndefined(address?.city) && (obj.city = address?.city);
    !isNullOrUndefined(address?.state) && (obj.state = address?.state);
    !isNullOrUndefined(address?.zip) && (obj.zip = address?.zip);
    !isNullOrUndefined(address?.zip4) && (obj.zip4 = address?.zip4);
    !isNullOrUndefined(address?.country) && (obj.country = address?.country);
    !isNullOrUndefined(address?.verifiedAt) && (obj.verifiedAt = address?.verifiedAt);
    !isNullOrUndefined(address?.verification) && (obj.verification = address?.verification);
    !isNullOrUndefined(address?.carrierRoute) && (obj.carrierRoute = address?.carrierRoute);
    !isNullOrUndefined(address?.lineOfTravel) && (obj.lineOfTravel = address?.lineOfTravel);
    !isNullOrUndefined(address?.deliveryPoint) && (obj.deliveryPoint = address?.deliveryPoint);
    !isNullOrUndefined(address?.lat) && (obj.lat = address?.lat);
    !isNullOrUndefined(address?.lng) && (obj.lng = address?.lng);
    !isNullOrUndefined(address?.elv) && (obj.elv = address?.elv);
    !isNullOrUndefined(address?.accuracyScore) && (obj.accuracyScore = address?.accuracyScore);
    !isNullOrUndefined(address?.accuracyType) && (obj.accuracyType = address?.accuracyType);
    !isNullOrUndefined(address?.legLat) && (obj.legLat = address?.legLat);
    !isNullOrUndefined(address?.legLng) && (obj.legLng = address?.legLng);
    !isNullOrUndefined(address?.owner) && (obj.owner = address?.owner);
    !isNullOrUndefined(address?.value) && (obj.value = address?.value);
    !isNullOrUndefined(address?.area) && (obj.area = address?.area);
    !isNullOrUndefined(address?.yearBuilt) && (obj.yearBuilt = address?.yearBuilt);
    !isNullOrUndefined(address?.residentialCode) && (obj.residentialCode = address?.residentialCode);
    !isNullOrUndefined(address?.commercialCode) && (obj.commercialCode = address?.commercialCode);
    !isNullOrUndefined(address?.assessorCode) && (obj.assessorCode = address?.assessorCode);
    !isNullOrUndefined(address?.footprint) && (obj.footprint = address?.footprint);
    !isNullOrUndefined(address?.stories) && (obj.stories = address?.stories);
    !isNullOrUndefined(address?.doors) && (obj.doors = address?.doors);
    !isNullOrUndefined(address?.units) && (obj.units = address?.units);
    !isNullOrUndefined(address?.squareFeet) && (obj.squareFeet = address?.squareFeet);
    !isNullOrUndefined(address?.floors) && (obj.floors = address?.floors);
    !isNullOrUndefined(address?.rooms) && (obj.rooms = address?.rooms);
    !isNullOrUndefined(address?.bedrooms) && (obj.bedrooms = address?.bedrooms);
    !isNullOrUndefined(address?.bathrooms) && (obj.bathrooms = address?.bathrooms);
    return obj;
}
const TurfKeys = new Set(['id', 'shape', 'createdAt', 'updatedAt', 'deletedAt', 'type', 'state', 'county', 'group', 'name', 'lat', 'lng', 'latMin', 'latMax', 'lngMin', 'lngMax', 'area']);
const TurfTypes = {
    id: { type: "string", isRequired: true, isPrimaryKey: true },
    shape: { type: "geometry", isRequired: true, isPrimaryKey: false },
    createdAt: { type: "date", isRequired: true, isPrimaryKey: false },
    updatedAt: { type: "date", isRequired: true, isPrimaryKey: false },
    deletedAt: { type: "date", isRequired: false, isPrimaryKey: false },
    type: { type: "enum.TurfType", isRequired: true, isPrimaryKey: false },
    state: { type: "int", isRequired: false, isPrimaryKey: false },
    county: { type: "int", isRequired: false, isPrimaryKey: false },
    group: { type: "string", isRequired: true, isPrimaryKey: false },
    name: { type: "string", isRequired: true, isPrimaryKey: false },
    lat: { type: "float", isRequired: false, isPrimaryKey: false },
    lng: { type: "float", isRequired: false, isPrimaryKey: false },
    latMin: { type: "float", isRequired: false, isPrimaryKey: false },
    latMax: { type: "float", isRequired: false, isPrimaryKey: false },
    lngMin: { type: "float", isRequired: false, isPrimaryKey: false },
    lngMax: { type: "float", isRequired: false, isPrimaryKey: false },
    area: { type: "float", isRequired: false, isPrimaryKey: false },
};
function stampTurf(turf) {
    if (turf && ENCOUNTERED.has(turf)) {
        return ENCOUNTERED.get(turf);
    }
    const obj = {
        id: turf?.id ?? '',
        shapeId: turf?.shapeId ?? 0,
        shape: turf?.shape ?? [],
        createdAt: turf?.createdAt ?? Date.now(),
        updatedAt: turf?.updatedAt ?? Date.now(),
        deletedAt: turf?.deletedAt ?? null,
        type: turf?.type ?? enums.TurfType.CUSTOM,
        state: turf?.state ?? null,
        county: turf?.county ?? null,
        group: turf?.group ?? '',
        name: turf?.name ?? '',
        lat: turf?.lat ?? null,
        lng: turf?.lng ?? null,
        latMin: turf?.latMin ?? null,
        latMax: turf?.latMax ?? null,
        lngMin: turf?.lngMin ?? null,
        lngMax: turf?.lngMax ?? null,
        area: turf?.area ?? null,
    };
    turf && ENCOUNTERED.set(turf, obj);
    turf && ENCOUNTERED.delete(turf);
    return obj;
}
function sqlTurf(turf) {
    if (turf && ENCOUNTERED.has(turf)) {
        return ENCOUNTERED.get(turf);
    }
    const obj = {
        id: turf?.id ?? '',
        shapeId: turf?.shapeId ?? 0,
        shape: turf?.shape ?? [],
        createdAt: turf?.createdAt ?? Date.now(),
        updatedAt: turf?.updatedAt ?? Date.now(),
        deletedAt: turf?.deletedAt ?? null,
        type: turf?.type ?? enums.TurfType.CUSTOM,
        state: turf?.state ?? null,
        county: turf?.county ?? null,
        group: turf?.group ?? '',
        name: turf?.name ?? '',
        lat: turf?.lat ?? null,
        lng: turf?.lng ?? null,
        latMin: turf?.latMin ?? null,
        latMax: turf?.latMax ?? null,
        lngMin: turf?.lngMin ?? null,
        lngMax: turf?.lngMax ?? null,
        area: turf?.area ?? null,
    };
    turf && ENCOUNTERED.set(turf, obj);
    turf && ENCOUNTERED.delete(turf);
    return obj;
}
function dehydrateTurf(turf) {
    if (turf && ENCOUNTERED.has(turf)) {
        return ENCOUNTERED.get(turf);
    }
    // Required properties
    const obj = {
        id: turf?.id ?? '',
        shape: turf?.shape ?? [],
        createdAt: turf?.createdAt ?? Date.now(),
        updatedAt: turf?.updatedAt ?? Date.now(),
        type: turf?.type ?? enums.TurfType.CUSTOM,
        group: turf?.group ?? '',
        name: turf?.name ?? '',
    };
    // Optional properties
    !isNullOrUndefined(turf?.deletedAt) && (obj.deletedAt = turf?.deletedAt);
    !isNullOrUndefined(turf?.state) && (obj.state = turf?.state);
    !isNullOrUndefined(turf?.county) && (obj.county = turf?.county);
    !isNullOrUndefined(turf?.lat) && (obj.lat = turf?.lat);
    !isNullOrUndefined(turf?.lng) && (obj.lng = turf?.lng);
    !isNullOrUndefined(turf?.latMin) && (obj.latMin = turf?.latMin);
    !isNullOrUndefined(turf?.latMax) && (obj.latMax = turf?.latMax);
    !isNullOrUndefined(turf?.lngMin) && (obj.lngMin = turf?.lngMin);
    !isNullOrUndefined(turf?.lngMax) && (obj.lngMax = turf?.lngMax);
    !isNullOrUndefined(turf?.area) && (obj.area = turf?.area);
    // Optional Relations
    turf && ENCOUNTERED.set(turf, obj);
    turf && ENCOUNTERED.delete(turf);
    return obj;
}
function flattenTurf(turf) {
    if (turf && ENCOUNTERED.has(turf)) {
        return ENCOUNTERED.get(turf);
    }
    // Required properties
    const obj = {
        id: turf?.id ?? '',
        shape: turf?.shape ?? [],
        createdAt: turf?.createdAt ?? Date.now(),
        updatedAt: turf?.updatedAt ?? Date.now(),
        type: turf?.type ?? enums.TurfType.CUSTOM,
        group: turf?.group ?? '',
        name: turf?.name ?? '',
    };
    // Optional properties
    !isNullOrUndefined(turf?.deletedAt) && (obj.deletedAt = turf?.deletedAt);
    !isNullOrUndefined(turf?.state) && (obj.state = turf?.state);
    !isNullOrUndefined(turf?.county) && (obj.county = turf?.county);
    !isNullOrUndefined(turf?.lat) && (obj.lat = turf?.lat);
    !isNullOrUndefined(turf?.lng) && (obj.lng = turf?.lng);
    !isNullOrUndefined(turf?.latMin) && (obj.latMin = turf?.latMin);
    !isNullOrUndefined(turf?.latMax) && (obj.latMax = turf?.latMax);
    !isNullOrUndefined(turf?.lngMin) && (obj.lngMin = turf?.lngMin);
    !isNullOrUndefined(turf?.lngMax) && (obj.lngMax = turf?.lngMax);
    !isNullOrUndefined(turf?.area) && (obj.area = turf?.area);
    return obj;
}
const EmailKeys = new Set(['email', 'createdAt', 'updatedAt', 'deletedAt', 'deliverable', 'personId']);
const EmailTypes = {
    email: { type: "string", isRequired: true, isPrimaryKey: true },
    createdAt: { type: "date", isRequired: true, isPrimaryKey: false },
    updatedAt: { type: "date", isRequired: true, isPrimaryKey: false },
    deletedAt: { type: "date", isRequired: false, isPrimaryKey: false },
    deliverable: { type: "boolean", isRequired: false, isPrimaryKey: false },
    personId: { type: "string", isRequired: true, isPrimaryKey: true },
};
function stampEmail(email) {
    if (email && ENCOUNTERED.has(email)) {
        return ENCOUNTERED.get(email);
    }
    const obj = {
        email: email?.email ?? '',
        createdAt: email?.createdAt ?? Date.now(),
        updatedAt: email?.updatedAt ?? Date.now(),
        deletedAt: email?.deletedAt ?? null,
        deliverable: email?.deliverable ?? null,
        personId: email?.personId ?? uuid(),
        person: undefined,
    };
    email && ENCOUNTERED.set(email, obj);
    obj.deliverable = (obj.deliverable ?? null) !== null ? !!obj.deliverable : obj.deliverable;
    obj.person = email?.person ? stampPerson(email?.person) : undefined;
    email && ENCOUNTERED.delete(email);
    return obj;
}
function sqlEmail(email) {
    if (email && ENCOUNTERED.has(email)) {
        return ENCOUNTERED.get(email);
    }
    const obj = {
        email: email?.email ?? '',
        createdAt: email?.createdAt ?? Date.now(),
        updatedAt: email?.updatedAt ?? Date.now(),
        deletedAt: email?.deletedAt ?? null,
        deliverable: email?.deliverable ?? null,
        personId: email?.personId ?? uuid(),
    };
    email && ENCOUNTERED.set(email, obj);
    obj.deliverable = typeof obj.deliverable === 'boolean' ? +obj.deliverable : obj.deliverable;
    email && ENCOUNTERED.delete(email);
    return obj;
}
function dehydrateEmail(email) {
    if (email && ENCOUNTERED.has(email)) {
        return ENCOUNTERED.get(email);
    }
    // Required properties
    const obj = {
        email: email?.email ?? '',
        createdAt: email?.createdAt ?? Date.now(),
        updatedAt: email?.updatedAt ?? Date.now(),
        personId: email?.personId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(email?.deletedAt) && (obj.deletedAt = email?.deletedAt);
    !isNullOrUndefined(email?.deliverable) && (obj.deliverable = email?.deliverable);
    // Optional Relations
    email && ENCOUNTERED.set(email, obj);
    !isNullOrUndefined(email?.person) && (obj.person = dehydratePerson(email?.person));
    email && ENCOUNTERED.delete(email);
    return obj;
}
function flattenEmail(email) {
    if (email && ENCOUNTERED.has(email)) {
        return ENCOUNTERED.get(email);
    }
    // Required properties
    const obj = {
        email: email?.email ?? '',
        createdAt: email?.createdAt ?? Date.now(),
        updatedAt: email?.updatedAt ?? Date.now(),
        personId: email?.personId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(email?.deletedAt) && (obj.deletedAt = email?.deletedAt);
    !isNullOrUndefined(email?.deliverable) && (obj.deliverable = email?.deliverable);
    return obj;
}
const PhoneKeys = new Set(['number', 'createdAt', 'updatedAt', 'deletedAt', 'system', 'sms', 'voice', 'ndnc']);
const PhoneTypes = {
    number: { type: "string", isRequired: true, isPrimaryKey: true },
    createdAt: { type: "date", isRequired: true, isPrimaryKey: false },
    updatedAt: { type: "date", isRequired: true, isPrimaryKey: false },
    deletedAt: { type: "date", isRequired: false, isPrimaryKey: false },
    system: { type: "enum.PhoneSystem", isRequired: false, isPrimaryKey: false },
    sms: { type: "boolean", isRequired: false, isPrimaryKey: false },
    voice: { type: "boolean", isRequired: false, isPrimaryKey: false },
    ndnc: { type: "boolean", isRequired: false, isPrimaryKey: false },
};
function stampPhone(phone) {
    if (phone && ENCOUNTERED.has(phone)) {
        return ENCOUNTERED.get(phone);
    }
    const obj = {
        number: phone?.number ?? '',
        createdAt: phone?.createdAt ?? Date.now(),
        updatedAt: phone?.updatedAt ?? Date.now(),
        deletedAt: phone?.deletedAt ?? null,
        system: phone?.system ?? null,
        sms: phone?.sms ?? null,
        voice: phone?.voice ?? null,
        ndnc: phone?.ndnc ?? null,
        owners: undefined,
    };
    phone && ENCOUNTERED.set(phone, obj);
    obj.sms = (obj.sms ?? null) !== null ? !!obj.sms : obj.sms;
    obj.voice = (obj.voice ?? null) !== null ? !!obj.voice : obj.voice;
    obj.ndnc = (obj.ndnc ?? null) !== null ? !!obj.ndnc : obj.ndnc;
    obj.owners = phone?.owners?.filter(Boolean)?.map(stampPersonPhone) ?? undefined;
    phone && ENCOUNTERED.delete(phone);
    return obj;
}
function sqlPhone(phone) {
    if (phone && ENCOUNTERED.has(phone)) {
        return ENCOUNTERED.get(phone);
    }
    const obj = {
        number: phone?.number ?? '',
        createdAt: phone?.createdAt ?? Date.now(),
        updatedAt: phone?.updatedAt ?? Date.now(),
        deletedAt: phone?.deletedAt ?? null,
        system: phone?.system ?? null,
        sms: phone?.sms ?? null,
        voice: phone?.voice ?? null,
        ndnc: phone?.ndnc ?? null,
    };
    phone && ENCOUNTERED.set(phone, obj);
    obj.sms = typeof obj.sms === 'boolean' ? +obj.sms : obj.sms;
    obj.voice = typeof obj.voice === 'boolean' ? +obj.voice : obj.voice;
    obj.ndnc = typeof obj.ndnc === 'boolean' ? +obj.ndnc : obj.ndnc;
    phone && ENCOUNTERED.delete(phone);
    return obj;
}
function dehydratePhone(phone) {
    if (phone && ENCOUNTERED.has(phone)) {
        return ENCOUNTERED.get(phone);
    }
    // Required properties
    const obj = {
        number: phone?.number ?? '',
        createdAt: phone?.createdAt ?? Date.now(),
        updatedAt: phone?.updatedAt ?? Date.now(),
    };
    // Optional properties
    !isNullOrUndefined(phone?.deletedAt) && (obj.deletedAt = phone?.deletedAt);
    !isNullOrUndefined(phone?.system) && (obj.system = phone?.system);
    !isNullOrUndefined(phone?.sms) && (obj.sms = phone?.sms);
    !isNullOrUndefined(phone?.voice) && (obj.voice = phone?.voice);
    !isNullOrUndefined(phone?.ndnc) && (obj.ndnc = phone?.ndnc);
    // Optional Relations
    phone && ENCOUNTERED.set(phone, obj);
    !isNullOrUndefined(phone?.owners) && (obj.owners = phone?.owners?.filter(Boolean)?.map(dehydratePersonPhone));
    phone && ENCOUNTERED.delete(phone);
    return obj;
}
function flattenPhone(phone) {
    if (phone && ENCOUNTERED.has(phone)) {
        return ENCOUNTERED.get(phone);
    }
    // Required properties
    const obj = {
        number: phone?.number ?? '',
        createdAt: phone?.createdAt ?? Date.now(),
        updatedAt: phone?.updatedAt ?? Date.now(),
    };
    // Optional properties
    !isNullOrUndefined(phone?.deletedAt) && (obj.deletedAt = phone?.deletedAt);
    !isNullOrUndefined(phone?.system) && (obj.system = phone?.system);
    !isNullOrUndefined(phone?.sms) && (obj.sms = phone?.sms);
    !isNullOrUndefined(phone?.voice) && (obj.voice = phone?.voice);
    !isNullOrUndefined(phone?.ndnc) && (obj.ndnc = phone?.ndnc);
    return obj;
}
const PersonAddressKeys = new Set(['createdAt', 'updatedAt', 'deletedAt', 'ncoa', 'type', 'personId', 'addressId']);
const PersonAddressTypes = {
    createdAt: { type: "date", isRequired: true, isPrimaryKey: false },
    updatedAt: { type: "date", isRequired: true, isPrimaryKey: false },
    deletedAt: { type: "date", isRequired: false, isPrimaryKey: false },
    ncoa: { type: "string", isRequired: false, isPrimaryKey: false },
    type: { type: "enum.AddressType", isRequired: false, isPrimaryKey: false },
    personId: { type: "string", isRequired: true, isPrimaryKey: true },
    addressId: { type: "string", isRequired: true, isPrimaryKey: true },
};
function stampPersonAddress(personaddress) {
    if (personaddress && ENCOUNTERED.has(personaddress)) {
        return ENCOUNTERED.get(personaddress);
    }
    const obj = {
        createdAt: personaddress?.createdAt ?? Date.now(),
        updatedAt: personaddress?.updatedAt ?? Date.now(),
        deletedAt: personaddress?.deletedAt ?? null,
        ncoa: personaddress?.ncoa ?? null,
        type: personaddress?.type ?? null,
        personId: personaddress?.personId ?? uuid(),
        person: undefined, addressId: personaddress?.addressId ?? uuid(),
        address: undefined,
    };
    personaddress && ENCOUNTERED.set(personaddress, obj);
    obj.person = personaddress?.person ? stampPerson(personaddress?.person) : undefined;
    obj.address = personaddress?.address ? stampAddress(personaddress?.address) : undefined;
    personaddress && ENCOUNTERED.delete(personaddress);
    return obj;
}
function sqlPersonAddress(personaddress) {
    if (personaddress && ENCOUNTERED.has(personaddress)) {
        return ENCOUNTERED.get(personaddress);
    }
    const obj = {
        createdAt: personaddress?.createdAt ?? Date.now(),
        updatedAt: personaddress?.updatedAt ?? Date.now(),
        deletedAt: personaddress?.deletedAt ?? null,
        ncoa: personaddress?.ncoa ?? null,
        type: personaddress?.type ?? null,
        personId: personaddress?.personId ?? uuid(),
        addressId: personaddress?.addressId ?? uuid(),
    };
    personaddress && ENCOUNTERED.set(personaddress, obj);
    personaddress && ENCOUNTERED.delete(personaddress);
    return obj;
}
function dehydratePersonAddress(personaddress) {
    if (personaddress && ENCOUNTERED.has(personaddress)) {
        return ENCOUNTERED.get(personaddress);
    }
    // Required properties
    const obj = {
        createdAt: personaddress?.createdAt ?? Date.now(),
        updatedAt: personaddress?.updatedAt ?? Date.now(),
        personId: personaddress?.personId ?? uuid(),
        addressId: personaddress?.addressId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(personaddress?.deletedAt) && (obj.deletedAt = personaddress?.deletedAt);
    !isNullOrUndefined(personaddress?.ncoa) && (obj.ncoa = personaddress?.ncoa);
    !isNullOrUndefined(personaddress?.type) && (obj.type = personaddress?.type);
    // Optional Relations
    personaddress && ENCOUNTERED.set(personaddress, obj);
    !isNullOrUndefined(personaddress?.person) && (obj.person = dehydratePerson(personaddress?.person));
    !isNullOrUndefined(personaddress?.address) && (obj.address = dehydrateAddress(personaddress?.address));
    personaddress && ENCOUNTERED.delete(personaddress);
    return obj;
}
function flattenPersonAddress(personaddress) {
    if (personaddress && ENCOUNTERED.has(personaddress)) {
        return ENCOUNTERED.get(personaddress);
    }
    // Required properties
    const obj = {
        createdAt: personaddress?.createdAt ?? Date.now(),
        updatedAt: personaddress?.updatedAt ?? Date.now(),
        personId: personaddress?.personId ?? uuid(),
        addressId: personaddress?.addressId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(personaddress?.deletedAt) && (obj.deletedAt = personaddress?.deletedAt);
    !isNullOrUndefined(personaddress?.ncoa) && (obj.ncoa = personaddress?.ncoa);
    !isNullOrUndefined(personaddress?.type) && (obj.type = personaddress?.type);
    return obj;
}
const PersonPhoneKeys = new Set(['createdAt', 'updatedAt', 'deletedAt', 'type', 'personId', 'phoneId']);
const PersonPhoneTypes = {
    createdAt: { type: "date", isRequired: true, isPrimaryKey: false },
    updatedAt: { type: "date", isRequired: true, isPrimaryKey: false },
    deletedAt: { type: "date", isRequired: false, isPrimaryKey: false },
    type: { type: "enum.PhoneType", isRequired: false, isPrimaryKey: false },
    personId: { type: "string", isRequired: true, isPrimaryKey: true },
    phoneId: { type: "string", isRequired: true, isPrimaryKey: true },
};
function stampPersonPhone(personphone) {
    if (personphone && ENCOUNTERED.has(personphone)) {
        return ENCOUNTERED.get(personphone);
    }
    const obj = {
        createdAt: personphone?.createdAt ?? Date.now(),
        updatedAt: personphone?.updatedAt ?? Date.now(),
        deletedAt: personphone?.deletedAt ?? null,
        type: personphone?.type ?? null,
        personId: personphone?.personId ?? uuid(),
        person: undefined, phoneId: personphone?.phoneId ?? uuid(),
        phone: undefined,
    };
    personphone && ENCOUNTERED.set(personphone, obj);
    obj.person = personphone?.person ? stampPerson(personphone?.person) : undefined;
    obj.phone = personphone?.phone ? stampPhone(personphone?.phone) : undefined;
    personphone && ENCOUNTERED.delete(personphone);
    return obj;
}
function sqlPersonPhone(personphone) {
    if (personphone && ENCOUNTERED.has(personphone)) {
        return ENCOUNTERED.get(personphone);
    }
    const obj = {
        createdAt: personphone?.createdAt ?? Date.now(),
        updatedAt: personphone?.updatedAt ?? Date.now(),
        deletedAt: personphone?.deletedAt ?? null,
        type: personphone?.type ?? null,
        personId: personphone?.personId ?? uuid(),
        phoneId: personphone?.phoneId ?? uuid(),
    };
    personphone && ENCOUNTERED.set(personphone, obj);
    personphone && ENCOUNTERED.delete(personphone);
    return obj;
}
function dehydratePersonPhone(personphone) {
    if (personphone && ENCOUNTERED.has(personphone)) {
        return ENCOUNTERED.get(personphone);
    }
    // Required properties
    const obj = {
        createdAt: personphone?.createdAt ?? Date.now(),
        updatedAt: personphone?.updatedAt ?? Date.now(),
        personId: personphone?.personId ?? uuid(),
        phoneId: personphone?.phoneId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(personphone?.deletedAt) && (obj.deletedAt = personphone?.deletedAt);
    !isNullOrUndefined(personphone?.type) && (obj.type = personphone?.type);
    // Optional Relations
    personphone && ENCOUNTERED.set(personphone, obj);
    !isNullOrUndefined(personphone?.person) && (obj.person = dehydratePerson(personphone?.person));
    !isNullOrUndefined(personphone?.phone) && (obj.phone = dehydratePhone(personphone?.phone));
    personphone && ENCOUNTERED.delete(personphone);
    return obj;
}
function flattenPersonPhone(personphone) {
    if (personphone && ENCOUNTERED.has(personphone)) {
        return ENCOUNTERED.get(personphone);
    }
    // Required properties
    const obj = {
        createdAt: personphone?.createdAt ?? Date.now(),
        updatedAt: personphone?.updatedAt ?? Date.now(),
        personId: personphone?.personId ?? uuid(),
        phoneId: personphone?.phoneId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(personphone?.deletedAt) && (obj.deletedAt = personphone?.deletedAt);
    !isNullOrUndefined(personphone?.type) && (obj.type = personphone?.type);
    return obj;
}
const AccountKeys = new Set(['accountType', 'accountId', 'createdAt', 'updatedAt', 'deletedAt', 'personId']);
const AccountTypes = {
    accountType: { type: "enum.AccountType", isRequired: true, isPrimaryKey: true },
    accountId: { type: "string", isRequired: true, isPrimaryKey: true },
    createdAt: { type: "date", isRequired: true, isPrimaryKey: false },
    updatedAt: { type: "date", isRequired: true, isPrimaryKey: false },
    deletedAt: { type: "date", isRequired: false, isPrimaryKey: false },
    personId: { type: "string", isRequired: true, isPrimaryKey: true },
};
function stampAccount(account) {
    if (account && ENCOUNTERED.has(account)) {
        return ENCOUNTERED.get(account);
    }
    const obj = {
        accountType: account?.accountType ?? enums.AccountType.UNK,
        accountId: account?.accountId ?? '',
        createdAt: account?.createdAt ?? Date.now(),
        updatedAt: account?.updatedAt ?? Date.now(),
        deletedAt: account?.deletedAt ?? null,
        personId: account?.personId ?? uuid(),
        person: undefined,
    };
    account && ENCOUNTERED.set(account, obj);
    obj.person = account?.person ? stampPerson(account?.person) : undefined;
    account && ENCOUNTERED.delete(account);
    return obj;
}
function sqlAccount(account) {
    if (account && ENCOUNTERED.has(account)) {
        return ENCOUNTERED.get(account);
    }
    const obj = {
        accountType: account?.accountType ?? enums.AccountType.UNK,
        accountId: account?.accountId ?? '',
        createdAt: account?.createdAt ?? Date.now(),
        updatedAt: account?.updatedAt ?? Date.now(),
        deletedAt: account?.deletedAt ?? null,
        personId: account?.personId ?? uuid(),
    };
    account && ENCOUNTERED.set(account, obj);
    account && ENCOUNTERED.delete(account);
    return obj;
}
function dehydrateAccount(account) {
    if (account && ENCOUNTERED.has(account)) {
        return ENCOUNTERED.get(account);
    }
    // Required properties
    const obj = {
        accountType: account?.accountType ?? enums.AccountType.UNK,
        accountId: account?.accountId ?? '',
        createdAt: account?.createdAt ?? Date.now(),
        updatedAt: account?.updatedAt ?? Date.now(),
        personId: account?.personId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(account?.deletedAt) && (obj.deletedAt = account?.deletedAt);
    // Optional Relations
    account && ENCOUNTERED.set(account, obj);
    !isNullOrUndefined(account?.person) && (obj.person = dehydratePerson(account?.person));
    account && ENCOUNTERED.delete(account);
    return obj;
}
function flattenAccount(account) {
    if (account && ENCOUNTERED.has(account)) {
        return ENCOUNTERED.get(account);
    }
    // Required properties
    const obj = {
        accountType: account?.accountType ?? enums.AccountType.UNK,
        accountId: account?.accountId ?? '',
        createdAt: account?.createdAt ?? Date.now(),
        updatedAt: account?.updatedAt ?? Date.now(),
        personId: account?.personId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(account?.deletedAt) && (obj.deletedAt = account?.deletedAt);
    return obj;
}
const ExperienceKeys = new Set(['type', 'employer', 'role', 'startDate', 'endDate', 'createdAt', 'updatedAt', 'deletedAt', 'personId']);
const ExperienceTypes = {
    type: { type: "enum.ExperienceType", isRequired: true, isPrimaryKey: true },
    employer: { type: "string", isRequired: true, isPrimaryKey: true },
    role: { type: "string", isRequired: true, isPrimaryKey: true },
    startDate: { type: "date", isRequired: false, isPrimaryKey: false },
    endDate: { type: "date", isRequired: false, isPrimaryKey: false },
    createdAt: { type: "date", isRequired: true, isPrimaryKey: false },
    updatedAt: { type: "date", isRequired: true, isPrimaryKey: false },
    deletedAt: { type: "date", isRequired: false, isPrimaryKey: false },
    personId: { type: "string", isRequired: true, isPrimaryKey: true },
};
function stampExperience(experience) {
    if (experience && ENCOUNTERED.has(experience)) {
        return ENCOUNTERED.get(experience);
    }
    const obj = {
        type: experience?.type ?? enums.ExperienceType.UNK,
        employer: experience?.employer ?? '',
        role: experience?.role ?? '',
        startDate: experience?.startDate ?? null,
        endDate: experience?.endDate ?? null,
        createdAt: experience?.createdAt ?? Date.now(),
        updatedAt: experience?.updatedAt ?? Date.now(),
        deletedAt: experience?.deletedAt ?? null,
        personId: experience?.personId ?? uuid(),
        person: undefined,
    };
    experience && ENCOUNTERED.set(experience, obj);
    obj.person = experience?.person ? stampPerson(experience?.person) : undefined;
    experience && ENCOUNTERED.delete(experience);
    return obj;
}
function sqlExperience(experience) {
    if (experience && ENCOUNTERED.has(experience)) {
        return ENCOUNTERED.get(experience);
    }
    const obj = {
        type: experience?.type ?? enums.ExperienceType.UNK,
        employer: experience?.employer ?? '',
        role: experience?.role ?? '',
        startDate: experience?.startDate ?? null,
        endDate: experience?.endDate ?? null,
        createdAt: experience?.createdAt ?? Date.now(),
        updatedAt: experience?.updatedAt ?? Date.now(),
        deletedAt: experience?.deletedAt ?? null,
        personId: experience?.personId ?? uuid(),
    };
    experience && ENCOUNTERED.set(experience, obj);
    experience && ENCOUNTERED.delete(experience);
    return obj;
}
function dehydrateExperience(experience) {
    if (experience && ENCOUNTERED.has(experience)) {
        return ENCOUNTERED.get(experience);
    }
    // Required properties
    const obj = {
        type: experience?.type ?? enums.ExperienceType.UNK,
        employer: experience?.employer ?? '',
        role: experience?.role ?? '',
        createdAt: experience?.createdAt ?? Date.now(),
        updatedAt: experience?.updatedAt ?? Date.now(),
        personId: experience?.personId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(experience?.startDate) && (obj.startDate = experience?.startDate);
    !isNullOrUndefined(experience?.endDate) && (obj.endDate = experience?.endDate);
    !isNullOrUndefined(experience?.deletedAt) && (obj.deletedAt = experience?.deletedAt);
    // Optional Relations
    experience && ENCOUNTERED.set(experience, obj);
    !isNullOrUndefined(experience?.person) && (obj.person = dehydratePerson(experience?.person));
    experience && ENCOUNTERED.delete(experience);
    return obj;
}
function flattenExperience(experience) {
    if (experience && ENCOUNTERED.has(experience)) {
        return ENCOUNTERED.get(experience);
    }
    // Required properties
    const obj = {
        type: experience?.type ?? enums.ExperienceType.UNK,
        employer: experience?.employer ?? '',
        role: experience?.role ?? '',
        createdAt: experience?.createdAt ?? Date.now(),
        updatedAt: experience?.updatedAt ?? Date.now(),
        personId: experience?.personId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(experience?.startDate) && (obj.startDate = experience?.startDate);
    !isNullOrUndefined(experience?.endDate) && (obj.endDate = experience?.endDate);
    !isNullOrUndefined(experience?.deletedAt) && (obj.deletedAt = experience?.deletedAt);
    return obj;
}
const CampaignKeys = new Set(['id', 'name', 'contestId']);
const CampaignTypes = {
    id: { type: "string", isRequired: true, isPrimaryKey: true },
    name: { type: "string", isRequired: true, isPrimaryKey: false },
    contestId: { type: "string", isRequired: true, isPrimaryKey: false },
};
function stampCampaign(campaign) {
    if (campaign && ENCOUNTERED.has(campaign)) {
        return ENCOUNTERED.get(campaign);
    }
    const obj = {
        id: campaign?.id ?? '',
        name: campaign?.name ?? '',
        contestId: campaign?.contestId ?? uuid(),
        contest: undefined,
    };
    campaign && ENCOUNTERED.set(campaign, obj);
    obj.contest = campaign?.contest ? stampContest(campaign?.contest) : undefined;
    campaign && ENCOUNTERED.delete(campaign);
    return obj;
}
function sqlCampaign(campaign) {
    if (campaign && ENCOUNTERED.has(campaign)) {
        return ENCOUNTERED.get(campaign);
    }
    const obj = {
        id: campaign?.id ?? '',
        name: campaign?.name ?? '',
        contestId: campaign?.contestId ?? uuid(),
    };
    campaign && ENCOUNTERED.set(campaign, obj);
    campaign && ENCOUNTERED.delete(campaign);
    return obj;
}
function dehydrateCampaign(campaign) {
    if (campaign && ENCOUNTERED.has(campaign)) {
        return ENCOUNTERED.get(campaign);
    }
    // Required properties
    const obj = {
        id: campaign?.id ?? '',
        name: campaign?.name ?? '',
        contestId: campaign?.contestId ?? uuid(),
    };
    // Optional properties
    // Optional Relations
    campaign && ENCOUNTERED.set(campaign, obj);
    !isNullOrUndefined(campaign?.contest) && (obj.contest = dehydrateContest(campaign?.contest));
    campaign && ENCOUNTERED.delete(campaign);
    return obj;
}
function flattenCampaign(campaign) {
    if (campaign && ENCOUNTERED.has(campaign)) {
        return ENCOUNTERED.get(campaign);
    }
    // Required properties
    const obj = {
        id: campaign?.id ?? '',
        name: campaign?.name ?? '',
        contestId: campaign?.contestId ?? uuid(),
    };
    // Optional properties
    return obj;
}
const ContestKeys = new Set(['id', 'name', 'electionId']);
const ContestTypes = {
    id: { type: "string", isRequired: true, isPrimaryKey: true },
    name: { type: "string", isRequired: true, isPrimaryKey: false },
    electionId: { type: "string", isRequired: true, isPrimaryKey: false },
};
function stampContest(contest) {
    if (contest && ENCOUNTERED.has(contest)) {
        return ENCOUNTERED.get(contest);
    }
    const obj = {
        id: contest?.id ?? '',
        name: contest?.name ?? '',
        electionId: contest?.electionId ?? uuid(),
        election: undefined,
    };
    contest && ENCOUNTERED.set(contest, obj);
    obj.election = contest?.election ? stampElection(contest?.election) : undefined;
    contest && ENCOUNTERED.delete(contest);
    return obj;
}
function sqlContest(contest) {
    if (contest && ENCOUNTERED.has(contest)) {
        return ENCOUNTERED.get(contest);
    }
    const obj = {
        id: contest?.id ?? '',
        name: contest?.name ?? '',
        electionId: contest?.electionId ?? uuid(),
    };
    contest && ENCOUNTERED.set(contest, obj);
    contest && ENCOUNTERED.delete(contest);
    return obj;
}
function dehydrateContest(contest) {
    if (contest && ENCOUNTERED.has(contest)) {
        return ENCOUNTERED.get(contest);
    }
    // Required properties
    const obj = {
        id: contest?.id ?? '',
        name: contest?.name ?? '',
        electionId: contest?.electionId ?? uuid(),
    };
    // Optional properties
    // Optional Relations
    contest && ENCOUNTERED.set(contest, obj);
    !isNullOrUndefined(contest?.election) && (obj.election = dehydrateElection(contest?.election));
    contest && ENCOUNTERED.delete(contest);
    return obj;
}
function flattenContest(contest) {
    if (contest && ENCOUNTERED.has(contest)) {
        return ENCOUNTERED.get(contest);
    }
    // Required properties
    const obj = {
        id: contest?.id ?? '',
        name: contest?.name ?? '',
        electionId: contest?.electionId ?? uuid(),
    };
    // Optional properties
    return obj;
}
const ElectionKeys = new Set(['id', 'electionDate', 'name', 'type', 'turf']);
const ElectionTypes = {
    id: { type: "string", isRequired: true, isPrimaryKey: true },
    electionDate: { type: "date", isRequired: false, isPrimaryKey: false },
    name: { type: "string", isRequired: false, isPrimaryKey: false },
    type: { type: "enum.ElectionType", isRequired: false, isPrimaryKey: false },
    turf: { type: "string", isRequired: false, isPrimaryKey: false },
};
function stampElection(election) {
    if (election && ENCOUNTERED.has(election)) {
        return ENCOUNTERED.get(election);
    }
    const obj = {
        id: election?.id ?? '',
        electionDate: election?.electionDate ?? null,
        name: election?.name ?? null,
        type: election?.type ?? null,
        turf: election?.turf ?? null,
    };
    election && ENCOUNTERED.set(election, obj);
    election && ENCOUNTERED.delete(election);
    return obj;
}
function sqlElection(election) {
    if (election && ENCOUNTERED.has(election)) {
        return ENCOUNTERED.get(election);
    }
    const obj = {
        id: election?.id ?? '',
        electionDate: election?.electionDate ?? null,
        name: election?.name ?? null,
        type: election?.type ?? null,
        turf: election?.turf ?? null,
    };
    election && ENCOUNTERED.set(election, obj);
    election && ENCOUNTERED.delete(election);
    return obj;
}
function dehydrateElection(election) {
    if (election && ENCOUNTERED.has(election)) {
        return ENCOUNTERED.get(election);
    }
    // Required properties
    const obj = {
        id: election?.id ?? '',
    };
    // Optional properties
    !isNullOrUndefined(election?.electionDate) && (obj.electionDate = election?.electionDate);
    !isNullOrUndefined(election?.name) && (obj.name = election?.name);
    !isNullOrUndefined(election?.type) && (obj.type = election?.type);
    !isNullOrUndefined(election?.turf) && (obj.turf = election?.turf);
    // Optional Relations
    election && ENCOUNTERED.set(election, obj);
    election && ENCOUNTERED.delete(election);
    return obj;
}
function flattenElection(election) {
    if (election && ENCOUNTERED.has(election)) {
        return ENCOUNTERED.get(election);
    }
    // Required properties
    const obj = {
        id: election?.id ?? '',
    };
    // Optional properties
    !isNullOrUndefined(election?.electionDate) && (obj.electionDate = election?.electionDate);
    !isNullOrUndefined(election?.name) && (obj.name = election?.name);
    !isNullOrUndefined(election?.type) && (obj.type = election?.type);
    !isNullOrUndefined(election?.turf) && (obj.turf = election?.turf);
    return obj;
}
const VoteKeys = new Set(['method', 'party', 'issued', 'returned', 'counted', 'personId', 'electionId']);
const VoteTypes = {
    method: { type: "enum.BallotType", isRequired: false, isPrimaryKey: false },
    party: { type: "enum.Party", isRequired: false, isPrimaryKey: false },
    issued: { type: "date", isRequired: false, isPrimaryKey: false },
    returned: { type: "date", isRequired: false, isPrimaryKey: false },
    counted: { type: "boolean", isRequired: false, isPrimaryKey: false },
    personId: { type: "string", isRequired: true, isPrimaryKey: true },
    electionId: { type: "string", isRequired: true, isPrimaryKey: true },
};
function stampVote(vote) {
    if (vote && ENCOUNTERED.has(vote)) {
        return ENCOUNTERED.get(vote);
    }
    const obj = {
        method: vote?.method ?? null,
        party: vote?.party ?? null,
        issued: vote?.issued ?? null,
        returned: vote?.returned ?? null,
        counted: vote?.counted ?? null,
        personId: vote?.personId ?? uuid(),
        person: undefined, electionId: vote?.electionId ?? uuid(),
        election: undefined,
    };
    vote && ENCOUNTERED.set(vote, obj);
    obj.counted = (obj.counted ?? null) !== null ? !!obj.counted : obj.counted;
    obj.person = vote?.person ? stampPerson(vote?.person) : undefined;
    obj.election = vote?.election ? stampElection(vote?.election) : undefined;
    vote && ENCOUNTERED.delete(vote);
    return obj;
}
function sqlVote(vote) {
    if (vote && ENCOUNTERED.has(vote)) {
        return ENCOUNTERED.get(vote);
    }
    const obj = {
        method: vote?.method ?? null,
        party: vote?.party ?? null,
        issued: vote?.issued ?? null,
        returned: vote?.returned ?? null,
        counted: vote?.counted ?? null,
        personId: vote?.personId ?? uuid(),
        electionId: vote?.electionId ?? uuid(),
    };
    vote && ENCOUNTERED.set(vote, obj);
    obj.counted = typeof obj.counted === 'boolean' ? +obj.counted : obj.counted;
    vote && ENCOUNTERED.delete(vote);
    return obj;
}
function dehydrateVote(vote) {
    if (vote && ENCOUNTERED.has(vote)) {
        return ENCOUNTERED.get(vote);
    }
    // Required properties
    const obj = {
        personId: vote?.personId ?? uuid(),
        electionId: vote?.electionId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(vote?.method) && (obj.method = vote?.method);
    !isNullOrUndefined(vote?.party) && (obj.party = vote?.party);
    !isNullOrUndefined(vote?.issued) && (obj.issued = vote?.issued);
    !isNullOrUndefined(vote?.returned) && (obj.returned = vote?.returned);
    !isNullOrUndefined(vote?.counted) && (obj.counted = vote?.counted);
    // Optional Relations
    vote && ENCOUNTERED.set(vote, obj);
    !isNullOrUndefined(vote?.person) && (obj.person = dehydratePerson(vote?.person));
    !isNullOrUndefined(vote?.election) && (obj.election = dehydrateElection(vote?.election));
    vote && ENCOUNTERED.delete(vote);
    return obj;
}
function flattenVote(vote) {
    if (vote && ENCOUNTERED.has(vote)) {
        return ENCOUNTERED.get(vote);
    }
    // Required properties
    const obj = {
        personId: vote?.personId ?? uuid(),
        electionId: vote?.electionId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(vote?.method) && (obj.method = vote?.method);
    !isNullOrUndefined(vote?.party) && (obj.party = vote?.party);
    !isNullOrUndefined(vote?.issued) && (obj.issued = vote?.issued);
    !isNullOrUndefined(vote?.returned) && (obj.returned = vote?.returned);
    !isNullOrUndefined(vote?.counted) && (obj.counted = vote?.counted);
    return obj;
}
const ReturnsKeys = new Set(['party', 'rank', 'tally', 'contestId', 'turfId']);
const ReturnsTypes = {
    party: { type: "enum.Party", isRequired: true, isPrimaryKey: true },
    rank: { type: "int", isRequired: true, isPrimaryKey: true },
    tally: { type: "int", isRequired: true, isPrimaryKey: false },
    contestId: { type: "string", isRequired: true, isPrimaryKey: true },
    turfId: { type: "string", isRequired: true, isPrimaryKey: true },
};
function stampReturns(returns) {
    if (returns && ENCOUNTERED.has(returns)) {
        return ENCOUNTERED.get(returns);
    }
    const obj = {
        party: returns?.party ?? enums.Party.U,
        rank: returns?.rank ?? 0,
        tally: returns?.tally ?? 0,
        contestId: returns?.contestId ?? uuid(),
        contest: undefined, turfId: returns?.turfId ?? uuid(),
        turf: undefined,
    };
    returns && ENCOUNTERED.set(returns, obj);
    obj.contest = returns?.contest ? stampContest(returns?.contest) : undefined;
    obj.turf = returns?.turf ? stampTurf(returns?.turf) : undefined;
    returns && ENCOUNTERED.delete(returns);
    return obj;
}
function sqlReturns(returns) {
    if (returns && ENCOUNTERED.has(returns)) {
        return ENCOUNTERED.get(returns);
    }
    const obj = {
        party: returns?.party ?? enums.Party.U,
        rank: returns?.rank ?? 0,
        tally: returns?.tally ?? 0,
        contestId: returns?.contestId ?? uuid(),
        turfId: returns?.turfId ?? uuid(),
    };
    returns && ENCOUNTERED.set(returns, obj);
    returns && ENCOUNTERED.delete(returns);
    return obj;
}
function dehydrateReturns(returns) {
    if (returns && ENCOUNTERED.has(returns)) {
        return ENCOUNTERED.get(returns);
    }
    // Required properties
    const obj = {
        party: returns?.party ?? enums.Party.U,
        rank: returns?.rank ?? 0,
        tally: returns?.tally ?? 0,
        contestId: returns?.contestId ?? uuid(),
        turfId: returns?.turfId ?? uuid(),
    };
    // Optional properties
    // Optional Relations
    returns && ENCOUNTERED.set(returns, obj);
    !isNullOrUndefined(returns?.contest) && (obj.contest = dehydrateContest(returns?.contest));
    !isNullOrUndefined(returns?.turf) && (obj.turf = dehydrateTurf(returns?.turf));
    returns && ENCOUNTERED.delete(returns);
    return obj;
}
function flattenReturns(returns) {
    if (returns && ENCOUNTERED.has(returns)) {
        return ENCOUNTERED.get(returns);
    }
    // Required properties
    const obj = {
        party: returns?.party ?? enums.Party.U,
        rank: returns?.rank ?? 0,
        tally: returns?.tally ?? 0,
        contestId: returns?.contestId ?? uuid(),
        turfId: returns?.turfId ?? uuid(),
    };
    // Optional properties
    return obj;
}
const ScoreKeys = new Set(['name', 'value', 'updatedAt', 'personId']);
const ScoreTypes = {
    name: { type: "string", isRequired: true, isPrimaryKey: true },
    value: { type: "float", isRequired: true, isPrimaryKey: false },
    updatedAt: { type: "date", isRequired: false, isPrimaryKey: false },
    personId: { type: "string", isRequired: true, isPrimaryKey: true },
};
function stampScore(score) {
    if (score && ENCOUNTERED.has(score)) {
        return ENCOUNTERED.get(score);
    }
    const obj = {
        name: score?.name ?? '',
        value: score?.value ?? 0,
        updatedAt: score?.updatedAt ?? null,
        personId: score?.personId ?? uuid(),
        person: undefined,
    };
    score && ENCOUNTERED.set(score, obj);
    obj.person = score?.person ? stampPerson(score?.person) : undefined;
    score && ENCOUNTERED.delete(score);
    return obj;
}
function sqlScore(score) {
    if (score && ENCOUNTERED.has(score)) {
        return ENCOUNTERED.get(score);
    }
    const obj = {
        name: score?.name ?? '',
        value: score?.value ?? 0,
        updatedAt: score?.updatedAt ?? null,
        personId: score?.personId ?? uuid(),
    };
    score && ENCOUNTERED.set(score, obj);
    score && ENCOUNTERED.delete(score);
    return obj;
}
function dehydrateScore(score) {
    if (score && ENCOUNTERED.has(score)) {
        return ENCOUNTERED.get(score);
    }
    // Required properties
    const obj = {
        name: score?.name ?? '',
        value: score?.value ?? 0,
        personId: score?.personId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(score?.updatedAt) && (obj.updatedAt = score?.updatedAt);
    // Optional Relations
    score && ENCOUNTERED.set(score, obj);
    !isNullOrUndefined(score?.person) && (obj.person = dehydratePerson(score?.person));
    score && ENCOUNTERED.delete(score);
    return obj;
}
function flattenScore(score) {
    if (score && ENCOUNTERED.has(score)) {
        return ENCOUNTERED.get(score);
    }
    // Required properties
    const obj = {
        name: score?.name ?? '',
        value: score?.value ?? 0,
        personId: score?.personId ?? uuid(),
    };
    // Optional properties
    !isNullOrUndefined(score?.updatedAt) && (obj.updatedAt = score?.updatedAt);
    return obj;
}
const PersonKeys = new Set(['id', 'countyId', 'affidavitNum', 'precinct', 'createdAt', 'updatedAt', 'deletedAt', 'preNominal', 'firstName', 'middleName', 'lastName', 'suffix', 'postNominal', 'nickname', 'birthDate', 'birthState', 'birthCountry', 'gender', 'party', 'ballot', 'religion', 'education', 'military', 'income', 'primaryLanguageCode', 'secondaryLanguageCode', 'primaryEthnicityCode', 'secondaryEthnicityCode']);
const PersonTypes = {
    id: { type: "string", isRequired: true, isPrimaryKey: true },
    countyId: { type: "string", isRequired: false, isPrimaryKey: false },
    affidavitNum: { type: "string", isRequired: false, isPrimaryKey: false },
    precinct: { type: "string", isRequired: false, isPrimaryKey: false },
    createdAt: { type: "date", isRequired: true, isPrimaryKey: false },
    updatedAt: { type: "date", isRequired: true, isPrimaryKey: false },
    deletedAt: { type: "date", isRequired: false, isPrimaryKey: false },
    preNominal: { type: "enum.PreNominal", isRequired: false, isPrimaryKey: false },
    firstName: { type: "string", isRequired: false, isPrimaryKey: false },
    middleName: { type: "string", isRequired: false, isPrimaryKey: false },
    lastName: { type: "string", isRequired: false, isPrimaryKey: false },
    suffix: { type: "enum.NameSuffix", isRequired: false, isPrimaryKey: false },
    postNominal: { type: "enum.PostNominal", isRequired: false, isPrimaryKey: false },
    nickname: { type: "string", isRequired: false, isPrimaryKey: false },
    birthDate: { type: "date", isRequired: false, isPrimaryKey: false },
    birthState: { type: "enum.State", isRequired: false, isPrimaryKey: false },
    birthCountry: { type: "enum.Country", isRequired: false, isPrimaryKey: false },
    gender: { type: "enum.Gender", isRequired: false, isPrimaryKey: false },
    party: { type: "enum.Party", isRequired: false, isPrimaryKey: false },
    ballot: { type: "enum.BallotType", isRequired: false, isPrimaryKey: false },
    religion: { type: "enum.Religion", isRequired: false, isPrimaryKey: false },
    education: { type: "enum.Education", isRequired: false, isPrimaryKey: false },
    military: { type: "enum.MilitaryStatus", isRequired: false, isPrimaryKey: false },
    income: { type: "int", isRequired: false, isPrimaryKey: false },
    primaryLanguageCode: { type: "enum.LanguageCode", isRequired: false, isPrimaryKey: false },
    secondaryLanguageCode: { type: "enum.LanguageCode", isRequired: false, isPrimaryKey: false },
    primaryEthnicityCode: { type: "enum.Ethnicity", isRequired: false, isPrimaryKey: false },
    secondaryEthnicityCode: { type: "enum.Ethnicity", isRequired: false, isPrimaryKey: false },
};
function stampPerson(person) {
    if (person && ENCOUNTERED.has(person)) {
        return ENCOUNTERED.get(person);
    }
    const obj = {
        id: person?.id ?? '',
        countyId: person?.countyId ?? null,
        affidavitNum: person?.affidavitNum ?? null,
        precinct: person?.precinct ?? null,
        createdAt: person?.createdAt ?? Date.now(),
        updatedAt: person?.updatedAt ?? Date.now(),
        deletedAt: person?.deletedAt ?? null,
        preNominal: person?.preNominal ?? null,
        firstName: person?.firstName ?? null,
        middleName: person?.middleName ?? null,
        lastName: person?.lastName ?? null,
        suffix: person?.suffix ?? null,
        postNominal: person?.postNominal ?? null,
        nickname: person?.nickname ?? null,
        birthDate: person?.birthDate ?? null,
        birthState: person?.birthState ?? null,
        birthCountry: person?.birthCountry ?? null,
        gender: person?.gender ?? null,
        party: person?.party ?? null,
        ballot: person?.ballot ?? null,
        religion: person?.religion ?? null,
        education: person?.education ?? null,
        military: person?.military ?? null,
        income: person?.income ?? null,
        primaryLanguageCode: person?.primaryLanguageCode ?? null,
        secondaryLanguageCode: person?.secondaryLanguageCode ?? null,
        primaryEthnicityCode: person?.primaryEthnicityCode ?? null,
        secondaryEthnicityCode: person?.secondaryEthnicityCode ?? null,
        emails: undefined, accounts: undefined, votes: undefined, phones: undefined, addresses: undefined, experience: undefined, scores: undefined,
    };
    person && ENCOUNTERED.set(person, obj);
    obj.emails = person?.emails?.filter(Boolean)?.map(stampEmail) ?? undefined;
    obj.accounts = person?.accounts?.filter(Boolean)?.map(stampAccount) ?? undefined;
    obj.votes = person?.votes?.filter(Boolean)?.map(stampVote) ?? undefined;
    obj.phones = person?.phones?.filter(Boolean)?.map(stampPersonPhone) ?? undefined;
    obj.addresses = person?.addresses?.filter(Boolean)?.map(stampPersonAddress) ?? undefined;
    obj.experience = person?.experience?.filter(Boolean)?.map(stampExperience) ?? undefined;
    obj.scores = person?.scores?.filter(Boolean)?.map(stampScore) ?? undefined;
    person && ENCOUNTERED.delete(person);
    return obj;
}
function sqlPerson(person) {
    if (person && ENCOUNTERED.has(person)) {
        return ENCOUNTERED.get(person);
    }
    const obj = {
        id: person?.id ?? '',
        countyId: person?.countyId ?? null,
        affidavitNum: person?.affidavitNum ?? null,
        precinct: person?.precinct ?? null,
        createdAt: person?.createdAt ?? Date.now(),
        updatedAt: person?.updatedAt ?? Date.now(),
        deletedAt: person?.deletedAt ?? null,
        preNominal: person?.preNominal ?? null,
        firstName: person?.firstName ?? null,
        middleName: person?.middleName ?? null,
        lastName: person?.lastName ?? null,
        suffix: person?.suffix ?? null,
        postNominal: person?.postNominal ?? null,
        nickname: person?.nickname ?? null,
        birthDate: person?.birthDate ?? null,
        birthState: person?.birthState ?? null,
        birthCountry: person?.birthCountry ?? null,
        gender: person?.gender ?? null,
        party: person?.party ?? null,
        ballot: person?.ballot ?? null,
        religion: person?.religion ?? null,
        education: person?.education ?? null,
        military: person?.military ?? null,
        income: person?.income ?? null,
        primaryLanguageCode: person?.primaryLanguageCode ?? null,
        secondaryLanguageCode: person?.secondaryLanguageCode ?? null,
        primaryEthnicityCode: person?.primaryEthnicityCode ?? null,
        secondaryEthnicityCode: person?.secondaryEthnicityCode ?? null,
    };
    person && ENCOUNTERED.set(person, obj);
    person && ENCOUNTERED.delete(person);
    return obj;
}
function dehydratePerson(person) {
    if (person && ENCOUNTERED.has(person)) {
        return ENCOUNTERED.get(person);
    }
    // Required properties
    const obj = {
        id: person?.id ?? '',
        createdAt: person?.createdAt ?? Date.now(),
        updatedAt: person?.updatedAt ?? Date.now(),
    };
    // Optional properties
    !isNullOrUndefined(person?.countyId) && (obj.countyId = person?.countyId);
    !isNullOrUndefined(person?.affidavitNum) && (obj.affidavitNum = person?.affidavitNum);
    !isNullOrUndefined(person?.precinct) && (obj.precinct = person?.precinct);
    !isNullOrUndefined(person?.deletedAt) && (obj.deletedAt = person?.deletedAt);
    !isNullOrUndefined(person?.preNominal) && (obj.preNominal = person?.preNominal);
    !isNullOrUndefined(person?.firstName) && (obj.firstName = person?.firstName);
    !isNullOrUndefined(person?.middleName) && (obj.middleName = person?.middleName);
    !isNullOrUndefined(person?.lastName) && (obj.lastName = person?.lastName);
    !isNullOrUndefined(person?.suffix) && (obj.suffix = person?.suffix);
    !isNullOrUndefined(person?.postNominal) && (obj.postNominal = person?.postNominal);
    !isNullOrUndefined(person?.nickname) && (obj.nickname = person?.nickname);
    !isNullOrUndefined(person?.birthDate) && (obj.birthDate = person?.birthDate);
    !isNullOrUndefined(person?.birthState) && (obj.birthState = person?.birthState);
    !isNullOrUndefined(person?.birthCountry) && (obj.birthCountry = person?.birthCountry);
    !isNullOrUndefined(person?.gender) && (obj.gender = person?.gender);
    !isNullOrUndefined(person?.party) && (obj.party = person?.party);
    !isNullOrUndefined(person?.ballot) && (obj.ballot = person?.ballot);
    !isNullOrUndefined(person?.religion) && (obj.religion = person?.religion);
    !isNullOrUndefined(person?.education) && (obj.education = person?.education);
    !isNullOrUndefined(person?.military) && (obj.military = person?.military);
    !isNullOrUndefined(person?.income) && (obj.income = person?.income);
    !isNullOrUndefined(person?.primaryLanguageCode) && (obj.primaryLanguageCode = person?.primaryLanguageCode);
    !isNullOrUndefined(person?.secondaryLanguageCode) && (obj.secondaryLanguageCode = person?.secondaryLanguageCode);
    !isNullOrUndefined(person?.primaryEthnicityCode) && (obj.primaryEthnicityCode = person?.primaryEthnicityCode);
    !isNullOrUndefined(person?.secondaryEthnicityCode) && (obj.secondaryEthnicityCode = person?.secondaryEthnicityCode);
    // Optional Relations
    person && ENCOUNTERED.set(person, obj);
    !isNullOrUndefined(person?.emails) && (obj.emails = person?.emails?.filter(Boolean)?.map(dehydrateEmail));
    !isNullOrUndefined(person?.accounts) && (obj.accounts = person?.accounts?.filter(Boolean)?.map(dehydrateAccount));
    !isNullOrUndefined(person?.votes) && (obj.votes = person?.votes?.filter(Boolean)?.map(dehydrateVote));
    !isNullOrUndefined(person?.phones) && (obj.phones = person?.phones?.filter(Boolean)?.map(dehydratePersonPhone));
    !isNullOrUndefined(person?.addresses) && (obj.addresses = person?.addresses?.filter(Boolean)?.map(dehydratePersonAddress));
    !isNullOrUndefined(person?.experience) && (obj.experience = person?.experience?.filter(Boolean)?.map(dehydrateExperience));
    !isNullOrUndefined(person?.scores) && (obj.scores = person?.scores?.filter(Boolean)?.map(dehydrateScore));
    person && ENCOUNTERED.delete(person);
    return obj;
}
function flattenPerson(person) {
    if (person && ENCOUNTERED.has(person)) {
        return ENCOUNTERED.get(person);
    }
    // Required properties
    const obj = {
        id: person?.id ?? '',
        createdAt: person?.createdAt ?? Date.now(),
        updatedAt: person?.updatedAt ?? Date.now(),
    };
    // Optional properties
    !isNullOrUndefined(person?.countyId) && (obj.countyId = person?.countyId);
    !isNullOrUndefined(person?.affidavitNum) && (obj.affidavitNum = person?.affidavitNum);
    !isNullOrUndefined(person?.precinct) && (obj.precinct = person?.precinct);
    !isNullOrUndefined(person?.deletedAt) && (obj.deletedAt = person?.deletedAt);
    !isNullOrUndefined(person?.preNominal) && (obj.preNominal = person?.preNominal);
    !isNullOrUndefined(person?.firstName) && (obj.firstName = person?.firstName);
    !isNullOrUndefined(person?.middleName) && (obj.middleName = person?.middleName);
    !isNullOrUndefined(person?.lastName) && (obj.lastName = person?.lastName);
    !isNullOrUndefined(person?.suffix) && (obj.suffix = person?.suffix);
    !isNullOrUndefined(person?.postNominal) && (obj.postNominal = person?.postNominal);
    !isNullOrUndefined(person?.nickname) && (obj.nickname = person?.nickname);
    !isNullOrUndefined(person?.birthDate) && (obj.birthDate = person?.birthDate);
    !isNullOrUndefined(person?.birthState) && (obj.birthState = person?.birthState);
    !isNullOrUndefined(person?.birthCountry) && (obj.birthCountry = person?.birthCountry);
    !isNullOrUndefined(person?.gender) && (obj.gender = person?.gender);
    !isNullOrUndefined(person?.party) && (obj.party = person?.party);
    !isNullOrUndefined(person?.ballot) && (obj.ballot = person?.ballot);
    !isNullOrUndefined(person?.religion) && (obj.religion = person?.religion);
    !isNullOrUndefined(person?.education) && (obj.education = person?.education);
    !isNullOrUndefined(person?.military) && (obj.military = person?.military);
    !isNullOrUndefined(person?.income) && (obj.income = person?.income);
    !isNullOrUndefined(person?.primaryLanguageCode) && (obj.primaryLanguageCode = person?.primaryLanguageCode);
    !isNullOrUndefined(person?.secondaryLanguageCode) && (obj.secondaryLanguageCode = person?.secondaryLanguageCode);
    !isNullOrUndefined(person?.primaryEthnicityCode) && (obj.primaryEthnicityCode = person?.primaryEthnicityCode);
    !isNullOrUndefined(person?.secondaryEthnicityCode) && (obj.secondaryEthnicityCode = person?.secondaryEthnicityCode);
    return obj;
}
export const Metadata = {
    keys() { return MetadataKeys; },
    types() { return { ...MetadataTypes }; },
    stamp() { return stampMetadata(); },
    hydrate: stampMetadata,
    dehydrate: dehydrateMetadata,
    flatten: flattenMetadata,
    sql: sqlMetadata,
};
export const Address = {
    keys() { return AddressKeys; },
    types() { return { ...AddressTypes }; },
    stamp() { return stampAddress(); },
    hydrate: stampAddress,
    dehydrate: dehydrateAddress,
    flatten: flattenAddress,
    sql: sqlAddress,
};
export const Turf = {
    keys() { return TurfKeys; },
    types() { return { ...TurfTypes }; },
    stamp() { return stampTurf(); },
    hydrate: stampTurf,
    dehydrate: dehydrateTurf,
    flatten: flattenTurf,
    sql: sqlTurf,
};
export const Email = {
    keys() { return EmailKeys; },
    types() { return { ...EmailTypes }; },
    stamp() { return stampEmail(); },
    hydrate: stampEmail,
    dehydrate: dehydrateEmail,
    flatten: flattenEmail,
    sql: sqlEmail,
};
export const Phone = {
    keys() { return PhoneKeys; },
    types() { return { ...PhoneTypes }; },
    stamp() { return stampPhone(); },
    hydrate: stampPhone,
    dehydrate: dehydratePhone,
    flatten: flattenPhone,
    sql: sqlPhone,
};
export const PersonAddress = {
    keys() { return PersonAddressKeys; },
    types() { return { ...PersonAddressTypes }; },
    stamp() { return stampPersonAddress(); },
    hydrate: stampPersonAddress,
    dehydrate: dehydratePersonAddress,
    flatten: flattenPersonAddress,
    sql: sqlPersonAddress,
};
export const PersonPhone = {
    keys() { return PersonPhoneKeys; },
    types() { return { ...PersonPhoneTypes }; },
    stamp() { return stampPersonPhone(); },
    hydrate: stampPersonPhone,
    dehydrate: dehydratePersonPhone,
    flatten: flattenPersonPhone,
    sql: sqlPersonPhone,
};
export const Account = {
    keys() { return AccountKeys; },
    types() { return { ...AccountTypes }; },
    stamp() { return stampAccount(); },
    hydrate: stampAccount,
    dehydrate: dehydrateAccount,
    flatten: flattenAccount,
    sql: sqlAccount,
};
export const Experience = {
    keys() { return ExperienceKeys; },
    types() { return { ...ExperienceTypes }; },
    stamp() { return stampExperience(); },
    hydrate: stampExperience,
    dehydrate: dehydrateExperience,
    flatten: flattenExperience,
    sql: sqlExperience,
};
export const Campaign = {
    keys() { return CampaignKeys; },
    types() { return { ...CampaignTypes }; },
    stamp() { return stampCampaign(); },
    hydrate: stampCampaign,
    dehydrate: dehydrateCampaign,
    flatten: flattenCampaign,
    sql: sqlCampaign,
};
export const Contest = {
    keys() { return ContestKeys; },
    types() { return { ...ContestTypes }; },
    stamp() { return stampContest(); },
    hydrate: stampContest,
    dehydrate: dehydrateContest,
    flatten: flattenContest,
    sql: sqlContest,
};
export const Election = {
    keys() { return ElectionKeys; },
    types() { return { ...ElectionTypes }; },
    stamp() { return stampElection(); },
    hydrate: stampElection,
    dehydrate: dehydrateElection,
    flatten: flattenElection,
    sql: sqlElection,
};
export const Vote = {
    keys() { return VoteKeys; },
    types() { return { ...VoteTypes }; },
    stamp() { return stampVote(); },
    hydrate: stampVote,
    dehydrate: dehydrateVote,
    flatten: flattenVote,
    sql: sqlVote,
};
export const Returns = {
    keys() { return ReturnsKeys; },
    types() { return { ...ReturnsTypes }; },
    stamp() { return stampReturns(); },
    hydrate: stampReturns,
    dehydrate: dehydrateReturns,
    flatten: flattenReturns,
    sql: sqlReturns,
};
export const Score = {
    keys() { return ScoreKeys; },
    types() { return { ...ScoreTypes }; },
    stamp() { return stampScore(); },
    hydrate: stampScore,
    dehydrate: dehydrateScore,
    flatten: flattenScore,
    sql: sqlScore,
};
export const Person = {
    keys() { return PersonKeys; },
    types() { return { ...PersonTypes }; },
    stamp() { return stampPerson(); },
    hydrate: stampPerson,
    dehydrate: dehydratePerson,
    flatten: flattenPerson,
    sql: sqlPerson,
};
//# sourceMappingURL=data:application/json;base64,