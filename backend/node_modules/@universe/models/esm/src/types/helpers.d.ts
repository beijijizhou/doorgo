/// <reference types="node" resolution-mode="require"/>
import * as models from './models.js';
export declare function sqliteGeopolyBufferToGeoJSON(buff: Buffer): number[][];
export type RuntimeType = "string" | "int" | "float" | "boolean" | "enum" | `enum.${string}` | "date" | "geometry" | "blob" | "null";
export type RuntimePropertyType = {
    type: RuntimeType;
    isRequired: boolean;
    isPrimaryKey: boolean;
};
declare function stampMetadata(metadata?: (Partial<models.IMetadata> | models.IMetadata | models.IPartialMetadata) | null): models.IMetadata;
declare function sqlMetadata(metadata?: ((Partial<models.IMetadata> | models.IMetadata | models.IPartialMetadata)) | null): models.IMetadata;
declare function dehydrateMetadata(metadata?: models.IMetadata | models.IPartialMetadata | null): models.IPartialMetadata;
declare function flattenMetadata(metadata?: models.IMetadata | models.IPartialMetadata | null): models.IPartialMetadata;
declare function stampAddress(address?: (Partial<models.IAddress> | models.IAddress | models.IPartialAddress) | null): models.IAddress;
declare function sqlAddress(address?: ((Partial<models.IAddress> | models.IAddress | models.IPartialAddress)) | null): models.IAddress;
declare function dehydrateAddress(address?: models.IAddress | models.IPartialAddress | null): models.IPartialAddress;
declare function flattenAddress(address?: models.IAddress | models.IPartialAddress | null): models.IPartialAddress;
declare function stampTurf(turf?: (Partial<models.ITurf> | models.ITurf | models.IPartialTurf) & {
    "shapeId"?: number;
} | null): models.ITurf;
declare function sqlTurf(turf?: ((Partial<models.ITurf> | models.ITurf | models.IPartialTurf) & {
    "shapeId"?: number;
}) | null): models.ITurf & {
    "shapeId"?: number;
};
declare function dehydrateTurf(turf?: models.ITurf | models.IPartialTurf | null): models.IPartialTurf;
declare function flattenTurf(turf?: models.ITurf | models.IPartialTurf | null): models.IPartialTurf;
declare function stampEmail(email?: (Partial<models.IEmail> | models.IEmail | models.IPartialEmail) | null): models.IEmail;
declare function sqlEmail(email?: ((Partial<models.IEmail> | models.IEmail | models.IPartialEmail)) | null): models.IEmail;
declare function dehydrateEmail(email?: models.IEmail | models.IPartialEmail | null): models.IPartialEmail;
declare function flattenEmail(email?: models.IEmail | models.IPartialEmail | null): models.IPartialEmail;
declare function stampPhone(phone?: (Partial<models.IPhone> | models.IPhone | models.IPartialPhone) | null): models.IPhone;
declare function sqlPhone(phone?: ((Partial<models.IPhone> | models.IPhone | models.IPartialPhone)) | null): models.IPhone;
declare function dehydratePhone(phone?: models.IPhone | models.IPartialPhone | null): models.IPartialPhone;
declare function flattenPhone(phone?: models.IPhone | models.IPartialPhone | null): models.IPartialPhone;
declare function stampPersonAddress(personaddress?: (Partial<models.IPersonAddress> | models.IPersonAddress | models.IPartialPersonAddress) | null): models.IPersonAddress;
declare function sqlPersonAddress(personaddress?: ((Partial<models.IPersonAddress> | models.IPersonAddress | models.IPartialPersonAddress)) | null): models.IPersonAddress;
declare function dehydratePersonAddress(personaddress?: models.IPersonAddress | models.IPartialPersonAddress | null): models.IPartialPersonAddress;
declare function flattenPersonAddress(personaddress?: models.IPersonAddress | models.IPartialPersonAddress | null): models.IPartialPersonAddress;
declare function stampPersonPhone(personphone?: (Partial<models.IPersonPhone> | models.IPersonPhone | models.IPartialPersonPhone) | null): models.IPersonPhone;
declare function sqlPersonPhone(personphone?: ((Partial<models.IPersonPhone> | models.IPersonPhone | models.IPartialPersonPhone)) | null): models.IPersonPhone;
declare function dehydratePersonPhone(personphone?: models.IPersonPhone | models.IPartialPersonPhone | null): models.IPartialPersonPhone;
declare function flattenPersonPhone(personphone?: models.IPersonPhone | models.IPartialPersonPhone | null): models.IPartialPersonPhone;
declare function stampAccount(account?: (Partial<models.IAccount> | models.IAccount | models.IPartialAccount) | null): models.IAccount;
declare function sqlAccount(account?: ((Partial<models.IAccount> | models.IAccount | models.IPartialAccount)) | null): models.IAccount;
declare function dehydrateAccount(account?: models.IAccount | models.IPartialAccount | null): models.IPartialAccount;
declare function flattenAccount(account?: models.IAccount | models.IPartialAccount | null): models.IPartialAccount;
declare function stampExperience(experience?: (Partial<models.IExperience> | models.IExperience | models.IPartialExperience) | null): models.IExperience;
declare function sqlExperience(experience?: ((Partial<models.IExperience> | models.IExperience | models.IPartialExperience)) | null): models.IExperience;
declare function dehydrateExperience(experience?: models.IExperience | models.IPartialExperience | null): models.IPartialExperience;
declare function flattenExperience(experience?: models.IExperience | models.IPartialExperience | null): models.IPartialExperience;
declare function stampCampaign(campaign?: (Partial<models.ICampaign> | models.ICampaign | models.IPartialCampaign) | null): models.ICampaign;
declare function sqlCampaign(campaign?: ((Partial<models.ICampaign> | models.ICampaign | models.IPartialCampaign)) | null): models.ICampaign;
declare function dehydrateCampaign(campaign?: models.ICampaign | models.IPartialCampaign | null): models.IPartialCampaign;
declare function flattenCampaign(campaign?: models.ICampaign | models.IPartialCampaign | null): models.IPartialCampaign;
declare function stampContest(contest?: (Partial<models.IContest> | models.IContest | models.IPartialContest) | null): models.IContest;
declare function sqlContest(contest?: ((Partial<models.IContest> | models.IContest | models.IPartialContest)) | null): models.IContest;
declare function dehydrateContest(contest?: models.IContest | models.IPartialContest | null): models.IPartialContest;
declare function flattenContest(contest?: models.IContest | models.IPartialContest | null): models.IPartialContest;
declare function stampElection(election?: (Partial<models.IElection> | models.IElection | models.IPartialElection) | null): models.IElection;
declare function sqlElection(election?: ((Partial<models.IElection> | models.IElection | models.IPartialElection)) | null): models.IElection;
declare function dehydrateElection(election?: models.IElection | models.IPartialElection | null): models.IPartialElection;
declare function flattenElection(election?: models.IElection | models.IPartialElection | null): models.IPartialElection;
declare function stampVote(vote?: (Partial<models.IVote> | models.IVote | models.IPartialVote) | null): models.IVote;
declare function sqlVote(vote?: ((Partial<models.IVote> | models.IVote | models.IPartialVote)) | null): models.IVote;
declare function dehydrateVote(vote?: models.IVote | models.IPartialVote | null): models.IPartialVote;
declare function flattenVote(vote?: models.IVote | models.IPartialVote | null): models.IPartialVote;
declare function stampReturns(returns?: (Partial<models.IReturns> | models.IReturns | models.IPartialReturns) | null): models.IReturns;
declare function sqlReturns(returns?: ((Partial<models.IReturns> | models.IReturns | models.IPartialReturns)) | null): models.IReturns;
declare function dehydrateReturns(returns?: models.IReturns | models.IPartialReturns | null): models.IPartialReturns;
declare function flattenReturns(returns?: models.IReturns | models.IPartialReturns | null): models.IPartialReturns;
declare function stampScore(score?: (Partial<models.IScore> | models.IScore | models.IPartialScore) | null): models.IScore;
declare function sqlScore(score?: ((Partial<models.IScore> | models.IScore | models.IPartialScore)) | null): models.IScore;
declare function dehydrateScore(score?: models.IScore | models.IPartialScore | null): models.IPartialScore;
declare function flattenScore(score?: models.IScore | models.IPartialScore | null): models.IPartialScore;
declare function stampPerson(person?: (Partial<models.IPerson> | models.IPerson | models.IPartialPerson) | null): models.IPerson;
declare function sqlPerson(person?: ((Partial<models.IPerson> | models.IPerson | models.IPartialPerson)) | null): models.IPerson;
declare function dehydratePerson(person?: models.IPerson | models.IPartialPerson | null): models.IPartialPerson;
declare function flattenPerson(person?: models.IPerson | models.IPartialPerson | null): models.IPartialPerson;
export declare const Metadata: {
    keys(): ReadonlySet<keyof models.IMetadata>;
    types(): Record<keyof models.IDehydratedMetadata, RuntimePropertyType>;
    stamp(): models.IMetadata;
    hydrate: typeof stampMetadata;
    dehydrate: typeof dehydrateMetadata;
    flatten: typeof flattenMetadata;
    sql: typeof sqlMetadata;
};
export declare const Address: {
    keys(): ReadonlySet<keyof models.IAddress>;
    types(): Record<keyof models.IDehydratedAddress, RuntimePropertyType>;
    stamp(): models.IAddress;
    hydrate: typeof stampAddress;
    dehydrate: typeof dehydrateAddress;
    flatten: typeof flattenAddress;
    sql: typeof sqlAddress;
};
export declare const Turf: {
    keys(): ReadonlySet<keyof models.ITurf>;
    types(): Record<keyof models.IDehydratedTurf, RuntimePropertyType>;
    stamp(): models.ITurf;
    hydrate: typeof stampTurf;
    dehydrate: typeof dehydrateTurf;
    flatten: typeof flattenTurf;
    sql: typeof sqlTurf;
};
export declare const Email: {
    keys(): ReadonlySet<keyof models.IEmail>;
    types(): Record<keyof models.IDehydratedEmail, RuntimePropertyType>;
    stamp(): models.IEmail;
    hydrate: typeof stampEmail;
    dehydrate: typeof dehydrateEmail;
    flatten: typeof flattenEmail;
    sql: typeof sqlEmail;
};
export declare const Phone: {
    keys(): ReadonlySet<keyof models.IPhone>;
    types(): Record<keyof models.IDehydratedPhone, RuntimePropertyType>;
    stamp(): models.IPhone;
    hydrate: typeof stampPhone;
    dehydrate: typeof dehydratePhone;
    flatten: typeof flattenPhone;
    sql: typeof sqlPhone;
};
export declare const PersonAddress: {
    keys(): ReadonlySet<keyof models.IPersonAddress>;
    types(): Record<keyof models.IDehydratedPersonAddress, RuntimePropertyType>;
    stamp(): models.IPersonAddress;
    hydrate: typeof stampPersonAddress;
    dehydrate: typeof dehydratePersonAddress;
    flatten: typeof flattenPersonAddress;
    sql: typeof sqlPersonAddress;
};
export declare const PersonPhone: {
    keys(): ReadonlySet<keyof models.IPersonPhone>;
    types(): Record<keyof models.IDehydratedPersonPhone, RuntimePropertyType>;
    stamp(): models.IPersonPhone;
    hydrate: typeof stampPersonPhone;
    dehydrate: typeof dehydratePersonPhone;
    flatten: typeof flattenPersonPhone;
    sql: typeof sqlPersonPhone;
};
export declare const Account: {
    keys(): ReadonlySet<keyof models.IAccount>;
    types(): Record<keyof models.IDehydratedAccount, RuntimePropertyType>;
    stamp(): models.IAccount;
    hydrate: typeof stampAccount;
    dehydrate: typeof dehydrateAccount;
    flatten: typeof flattenAccount;
    sql: typeof sqlAccount;
};
export declare const Experience: {
    keys(): ReadonlySet<keyof models.IExperience>;
    types(): Record<keyof models.IDehydratedExperience, RuntimePropertyType>;
    stamp(): models.IExperience;
    hydrate: typeof stampExperience;
    dehydrate: typeof dehydrateExperience;
    flatten: typeof flattenExperience;
    sql: typeof sqlExperience;
};
export declare const Campaign: {
    keys(): ReadonlySet<keyof models.ICampaign>;
    types(): Record<keyof models.IDehydratedCampaign, RuntimePropertyType>;
    stamp(): models.ICampaign;
    hydrate: typeof stampCampaign;
    dehydrate: typeof dehydrateCampaign;
    flatten: typeof flattenCampaign;
    sql: typeof sqlCampaign;
};
export declare const Contest: {
    keys(): ReadonlySet<keyof models.IContest>;
    types(): Record<keyof models.IDehydratedContest, RuntimePropertyType>;
    stamp(): models.IContest;
    hydrate: typeof stampContest;
    dehydrate: typeof dehydrateContest;
    flatten: typeof flattenContest;
    sql: typeof sqlContest;
};
export declare const Election: {
    keys(): ReadonlySet<keyof models.IElection>;
    types(): Record<keyof models.IDehydratedElection, RuntimePropertyType>;
    stamp(): models.IElection;
    hydrate: typeof stampElection;
    dehydrate: typeof dehydrateElection;
    flatten: typeof flattenElection;
    sql: typeof sqlElection;
};
export declare const Vote: {
    keys(): ReadonlySet<keyof models.IVote>;
    types(): Record<keyof models.IDehydratedVote, RuntimePropertyType>;
    stamp(): models.IVote;
    hydrate: typeof stampVote;
    dehydrate: typeof dehydrateVote;
    flatten: typeof flattenVote;
    sql: typeof sqlVote;
};
export declare const Returns: {
    keys(): ReadonlySet<keyof models.IReturns>;
    types(): Record<keyof models.IDehydratedReturns, RuntimePropertyType>;
    stamp(): models.IReturns;
    hydrate: typeof stampReturns;
    dehydrate: typeof dehydrateReturns;
    flatten: typeof flattenReturns;
    sql: typeof sqlReturns;
};
export declare const Score: {
    keys(): ReadonlySet<keyof models.IScore>;
    types(): Record<keyof models.IDehydratedScore, RuntimePropertyType>;
    stamp(): models.IScore;
    hydrate: typeof stampScore;
    dehydrate: typeof dehydrateScore;
    flatten: typeof flattenScore;
    sql: typeof sqlScore;
};
export declare const Person: {
    keys(): ReadonlySet<keyof models.IPerson>;
    types(): Record<keyof models.IDehydratedPerson, RuntimePropertyType>;
    stamp(): models.IPerson;
    hydrate: typeof stampPerson;
    dehydrate: typeof dehydratePerson;
    flatten: typeof flattenPerson;
    sql: typeof sqlPerson;
};
export {};
