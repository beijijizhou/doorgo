import * as models from './models.js';
import * as helpers from './helpers.js';
export declare enum ModelType {
    METADATA = "Metadata",
    ADDRESS = "Address",
    TURF = "Turf",
    EMAIL = "Email",
    PHONE = "Phone",
    PERSON_ADDRESS = "PersonAddress",
    PERSON_PHONE = "PersonPhone",
    ACCOUNT = "Account",
    EXPERIENCE = "Experience",
    CAMPAIGN = "Campaign",
    CONTEST = "Contest",
    ELECTION = "Election",
    VOTE = "Vote",
    RETURNS = "Returns",
    SCORE = "Score",
    PERSON = "Person"
}
export declare function isModelType(name: unknown): name is ModelType;
export interface IModelLookup {
    [ModelType.METADATA]: models.IMetadata;
    [ModelType.ADDRESS]: models.IAddress;
    [ModelType.TURF]: models.ITurf;
    [ModelType.EMAIL]: models.IEmail;
    [ModelType.PHONE]: models.IPhone;
    [ModelType.PERSON_ADDRESS]: models.IPersonAddress;
    [ModelType.PERSON_PHONE]: models.IPersonPhone;
    [ModelType.ACCOUNT]: models.IAccount;
    [ModelType.EXPERIENCE]: models.IExperience;
    [ModelType.CAMPAIGN]: models.ICampaign;
    [ModelType.CONTEST]: models.IContest;
    [ModelType.ELECTION]: models.IElection;
    [ModelType.VOTE]: models.IVote;
    [ModelType.RETURNS]: models.IReturns;
    [ModelType.SCORE]: models.IScore;
    [ModelType.PERSON]: models.IPerson;
}
export interface IPartialModelLookup {
    [ModelType.METADATA]: models.IPartialMetadata;
    [ModelType.ADDRESS]: models.IPartialAddress;
    [ModelType.TURF]: models.IPartialTurf;
    [ModelType.EMAIL]: models.IPartialEmail;
    [ModelType.PHONE]: models.IPartialPhone;
    [ModelType.PERSON_ADDRESS]: models.IPartialPersonAddress;
    [ModelType.PERSON_PHONE]: models.IPartialPersonPhone;
    [ModelType.ACCOUNT]: models.IPartialAccount;
    [ModelType.EXPERIENCE]: models.IPartialExperience;
    [ModelType.CAMPAIGN]: models.IPartialCampaign;
    [ModelType.CONTEST]: models.IPartialContest;
    [ModelType.ELECTION]: models.IPartialElection;
    [ModelType.VOTE]: models.IPartialVote;
    [ModelType.RETURNS]: models.IPartialReturns;
    [ModelType.SCORE]: models.IPartialScore;
    [ModelType.PERSON]: models.IPartialPerson;
}
export declare const ModelKeysLookup: {
    MetadataKeys: ReadonlySet<keyof models.IMetadata>;
    AddressKeys: ReadonlySet<keyof models.IAddress>;
    TurfKeys: ReadonlySet<keyof models.ITurf>;
    EmailKeys: ReadonlySet<keyof models.IEmail>;
    PhoneKeys: ReadonlySet<keyof models.IPhone>;
    PersonAddressKeys: ReadonlySet<keyof models.IPersonAddress>;
    PersonPhoneKeys: ReadonlySet<keyof models.IPersonPhone>;
    AccountKeys: ReadonlySet<keyof models.IAccount>;
    ExperienceKeys: ReadonlySet<keyof models.IExperience>;
    CampaignKeys: ReadonlySet<keyof models.ICampaign>;
    ContestKeys: ReadonlySet<keyof models.IContest>;
    ElectionKeys: ReadonlySet<keyof models.IElection>;
    VoteKeys: ReadonlySet<keyof models.IVote>;
    ReturnsKeys: ReadonlySet<keyof models.IReturns>;
    ScoreKeys: ReadonlySet<keyof models.IScore>;
    PersonKeys: ReadonlySet<keyof models.IPerson>;
};
export declare const ModelTypesLookup: {
    MetadataTypes: Record<keyof models.IMetadata, helpers.RuntimePropertyType>;
    AddressTypes: Record<"number" | "value" | "id" | "createdAt" | "updatedAt" | "deletedAt" | "care" | "facility" | "facilityType" | "pinNum" | "pinType" | "streetPreDir" | "streetName" | "streetType" | "streetPostDir" | "unitAbbr" | "unitNum" | "city" | "state" | "zip" | "zip4" | "country" | "verifiedAt" | "verification" | "carrierRoute" | "lineOfTravel" | "deliveryPoint" | "lat" | "lng" | "elv" | "accuracyScore" | "accuracyType" | "legLat" | "legLng" | "owner" | "area" | "yearBuilt" | "residentialCode" | "commercialCode" | "assessorCode" | "footprint" | "stories" | "doors" | "units" | "squareFeet" | "floors" | "rooms" | "bedrooms" | "bathrooms", helpers.RuntimePropertyType>;
    TurfTypes: Record<keyof models.ITurf, helpers.RuntimePropertyType>;
    EmailTypes: Record<"createdAt" | "updatedAt" | "deletedAt" | "personId" | "email" | "deliverable", helpers.RuntimePropertyType>;
    PhoneTypes: Record<"number" | "createdAt" | "updatedAt" | "deletedAt" | "system" | "sms" | "voice" | "ndnc", helpers.RuntimePropertyType>;
    PersonAddressTypes: Record<"createdAt" | "updatedAt" | "deletedAt" | "ncoa" | "type" | "personId" | "addressId", helpers.RuntimePropertyType>;
    PersonPhoneTypes: Record<"createdAt" | "updatedAt" | "deletedAt" | "type" | "personId" | "phoneId", helpers.RuntimePropertyType>;
    AccountTypes: Record<"createdAt" | "updatedAt" | "deletedAt" | "personId" | "accountType" | "accountId", helpers.RuntimePropertyType>;
    ExperienceTypes: Record<"createdAt" | "updatedAt" | "deletedAt" | "type" | "personId" | "employer" | "role" | "startDate" | "endDate", helpers.RuntimePropertyType>;
    CampaignTypes: Record<"id" | "name" | "contestId", helpers.RuntimePropertyType>;
    ContestTypes: Record<"id" | "name" | "electionId", helpers.RuntimePropertyType>;
    ElectionTypes: Record<keyof models.IElection, helpers.RuntimePropertyType>;
    VoteTypes: Record<"personId" | "party" | "electionId" | "method" | "issued" | "returned" | "counted", helpers.RuntimePropertyType>;
    ReturnsTypes: Record<"party" | "contestId" | "rank" | "tally" | "turfId", helpers.RuntimePropertyType>;
    ScoreTypes: Record<"value" | "updatedAt" | "personId" | "name", helpers.RuntimePropertyType>;
    PersonTypes: Record<"id" | "createdAt" | "updatedAt" | "deletedAt" | "countyId" | "affidavitNum" | "precinct" | "preNominal" | "firstName" | "middleName" | "lastName" | "suffix" | "postNominal" | "nickname" | "birthDate" | "birthState" | "birthCountry" | "gender" | "party" | "ballot" | "religion" | "education" | "military" | "income" | "primaryLanguageCode" | "secondaryLanguageCode" | "primaryEthnicityCode" | "secondaryEthnicityCode", helpers.RuntimePropertyType>;
};
export interface CreateDiff<T extends ModelType> {
    model: T;
    before: null;
    after: IPartialModelLookup[T];
}
export interface UpdateDiff<T extends ModelType> {
    model: T;
    before: IPartialModelLookup[T];
    after: IPartialModelLookup[T];
}
export interface DeleteDiff<T extends ModelType> {
    model: T;
    before: IPartialModelLookup[T];
    after: null;
}
export type Diff<T extends ModelType> = CreateDiff<T> | DeleteDiff<T> | UpdateDiff<T>;
export type UniverseDiff = (Diff<ModelType.METADATA> | Diff<ModelType.ADDRESS> | Diff<ModelType.TURF> | Diff<ModelType.EMAIL> | Diff<ModelType.PHONE> | Diff<ModelType.PERSON_ADDRESS> | Diff<ModelType.PERSON_PHONE> | Diff<ModelType.ACCOUNT> | Diff<ModelType.EXPERIENCE> | Diff<ModelType.CAMPAIGN> | Diff<ModelType.CONTEST> | Diff<ModelType.ELECTION> | Diff<ModelType.VOTE> | Diff<ModelType.RETURNS> | Diff<ModelType.SCORE> | Diff<ModelType.PERSON>);
export declare function diffMetadata(before: null, after: models.IMetadata | models.IPartialMetadata): CreateDiff<ModelType.METADATA>;
export declare function diffMetadata(before: models.IMetadata | models.IPartialMetadata, after: null): DeleteDiff<ModelType.METADATA>;
export declare function diffMetadata(before: models.IMetadata | models.IPartialMetadata, after: models.IMetadata | models.IPartialMetadata): UpdateDiff<ModelType.METADATA> | null;
export declare function diffAddress(before: null, after: models.IAddress | models.IPartialAddress): CreateDiff<ModelType.ADDRESS>;
export declare function diffAddress(before: models.IAddress | models.IPartialAddress, after: null): DeleteDiff<ModelType.ADDRESS>;
export declare function diffAddress(before: models.IAddress | models.IPartialAddress, after: models.IAddress | models.IPartialAddress): UpdateDiff<ModelType.ADDRESS> | null;
export declare function diffTurf(before: null, after: models.ITurf | models.IPartialTurf): CreateDiff<ModelType.TURF>;
export declare function diffTurf(before: models.ITurf | models.IPartialTurf, after: null): DeleteDiff<ModelType.TURF>;
export declare function diffTurf(before: models.ITurf | models.IPartialTurf, after: models.ITurf | models.IPartialTurf): UpdateDiff<ModelType.TURF> | null;
export declare function diffEmail(before: null, after: models.IEmail | models.IPartialEmail): CreateDiff<ModelType.EMAIL>;
export declare function diffEmail(before: models.IEmail | models.IPartialEmail, after: null): DeleteDiff<ModelType.EMAIL>;
export declare function diffEmail(before: models.IEmail | models.IPartialEmail, after: models.IEmail | models.IPartialEmail): UpdateDiff<ModelType.EMAIL> | null;
export declare function diffPhone(before: null, after: models.IPhone | models.IPartialPhone): CreateDiff<ModelType.PHONE>;
export declare function diffPhone(before: models.IPhone | models.IPartialPhone, after: null): DeleteDiff<ModelType.PHONE>;
export declare function diffPhone(before: models.IPhone | models.IPartialPhone, after: models.IPhone | models.IPartialPhone): UpdateDiff<ModelType.PHONE> | null;
export declare function diffPersonAddress(before: null, after: models.IPersonAddress | models.IPartialPersonAddress): CreateDiff<ModelType.PERSON_ADDRESS>;
export declare function diffPersonAddress(before: models.IPersonAddress | models.IPartialPersonAddress, after: null): DeleteDiff<ModelType.PERSON_ADDRESS>;
export declare function diffPersonAddress(before: models.IPersonAddress | models.IPartialPersonAddress, after: models.IPersonAddress | models.IPartialPersonAddress): UpdateDiff<ModelType.PERSON_ADDRESS> | null;
export declare function diffPersonPhone(before: null, after: models.IPersonPhone | models.IPartialPersonPhone): CreateDiff<ModelType.PERSON_PHONE>;
export declare function diffPersonPhone(before: models.IPersonPhone | models.IPartialPersonPhone, after: null): DeleteDiff<ModelType.PERSON_PHONE>;
export declare function diffPersonPhone(before: models.IPersonPhone | models.IPartialPersonPhone, after: models.IPersonPhone | models.IPartialPersonPhone): UpdateDiff<ModelType.PERSON_PHONE> | null;
export declare function diffAccount(before: null, after: models.IAccount | models.IPartialAccount): CreateDiff<ModelType.ACCOUNT>;
export declare function diffAccount(before: models.IAccount | models.IPartialAccount, after: null): DeleteDiff<ModelType.ACCOUNT>;
export declare function diffAccount(before: models.IAccount | models.IPartialAccount, after: models.IAccount | models.IPartialAccount): UpdateDiff<ModelType.ACCOUNT> | null;
export declare function diffExperience(before: null, after: models.IExperience | models.IPartialExperience): CreateDiff<ModelType.EXPERIENCE>;
export declare function diffExperience(before: models.IExperience | models.IPartialExperience, after: null): DeleteDiff<ModelType.EXPERIENCE>;
export declare function diffExperience(before: models.IExperience | models.IPartialExperience, after: models.IExperience | models.IPartialExperience): UpdateDiff<ModelType.EXPERIENCE> | null;
export declare function diffCampaign(before: null, after: models.ICampaign | models.IPartialCampaign): CreateDiff<ModelType.CAMPAIGN>;
export declare function diffCampaign(before: models.ICampaign | models.IPartialCampaign, after: null): DeleteDiff<ModelType.CAMPAIGN>;
export declare function diffCampaign(before: models.ICampaign | models.IPartialCampaign, after: models.ICampaign | models.IPartialCampaign): UpdateDiff<ModelType.CAMPAIGN> | null;
export declare function diffContest(before: null, after: models.IContest | models.IPartialContest): CreateDiff<ModelType.CONTEST>;
export declare function diffContest(before: models.IContest | models.IPartialContest, after: null): DeleteDiff<ModelType.CONTEST>;
export declare function diffContest(before: models.IContest | models.IPartialContest, after: models.IContest | models.IPartialContest): UpdateDiff<ModelType.CONTEST> | null;
export declare function diffElection(before: null, after: models.IElection | models.IPartialElection): CreateDiff<ModelType.ELECTION>;
export declare function diffElection(before: models.IElection | models.IPartialElection, after: null): DeleteDiff<ModelType.ELECTION>;
export declare function diffElection(before: models.IElection | models.IPartialElection, after: models.IElection | models.IPartialElection): UpdateDiff<ModelType.ELECTION> | null;
export declare function diffVote(before: null, after: models.IVote | models.IPartialVote): CreateDiff<ModelType.VOTE>;
export declare function diffVote(before: models.IVote | models.IPartialVote, after: null): DeleteDiff<ModelType.VOTE>;
export declare function diffVote(before: models.IVote | models.IPartialVote, after: models.IVote | models.IPartialVote): UpdateDiff<ModelType.VOTE> | null;
export declare function diffReturns(before: null, after: models.IReturns | models.IPartialReturns): CreateDiff<ModelType.RETURNS>;
export declare function diffReturns(before: models.IReturns | models.IPartialReturns, after: null): DeleteDiff<ModelType.RETURNS>;
export declare function diffReturns(before: models.IReturns | models.IPartialReturns, after: models.IReturns | models.IPartialReturns): UpdateDiff<ModelType.RETURNS> | null;
export declare function diffScore(before: null, after: models.IScore | models.IPartialScore): CreateDiff<ModelType.SCORE>;
export declare function diffScore(before: models.IScore | models.IPartialScore, after: null): DeleteDiff<ModelType.SCORE>;
export declare function diffScore(before: models.IScore | models.IPartialScore, after: models.IScore | models.IPartialScore): UpdateDiff<ModelType.SCORE> | null;
export declare function diffPerson(before: null, after: models.IPerson | models.IPartialPerson): CreateDiff<ModelType.PERSON>;
export declare function diffPerson(before: models.IPerson | models.IPartialPerson, after: null): DeleteDiff<ModelType.PERSON>;
export declare function diffPerson(before: models.IPerson | models.IPartialPerson, after: models.IPerson | models.IPartialPerson): UpdateDiff<ModelType.PERSON> | null;
