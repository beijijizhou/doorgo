import { isNumber, isNumberOrNull, isString, isStringOrNull, } from '@universe/util';
import { Address, isAccuracyTypeOrNull, isCommercialUseTypeOrNull, isCountryOrNull, isDirectionalOrNull, isFacilityTypeOrNull, isPersonalIdentifierOrNull, isResidenceUseTypeOrNull, isStateOrNull, isStreetTypeOrNull, isUnitAbbrOrNull, } from '../types/index.js';
const addressValidator = {
    id: isString,
    createdAt: isNumber,
    updatedAt: isNumber,
    deletedAt: isNumberOrNull,
    pinType: isPersonalIdentifierOrNull,
    pinNum: isStringOrNull,
    care: isStringOrNull,
    facility: isStringOrNull,
    facilityType: isFacilityTypeOrNull,
    number: isStringOrNull,
    streetType: isStreetTypeOrNull,
    streetPreDir: isDirectionalOrNull,
    streetName: isString,
    streetPostDir: isDirectionalOrNull,
    city: isStringOrNull,
    state: isStateOrNull,
    zip: isStringOrNull,
    zip4: isStringOrNull,
    unitAbbr: isUnitAbbrOrNull,
    unitNum: isStringOrNull,
    country: isCountryOrNull,
    owner: isStringOrNull,
    value: isNumberOrNull,
    area: isNumberOrNull,
    // Building Info
    yearBuilt: isNumberOrNull,
    residentialCode: isResidenceUseTypeOrNull,
    commercialCode: isCommercialUseTypeOrNull,
    assessorCode: isStringOrNull,
    footprint: isNumberOrNull,
    stories: isNumberOrNull,
    doors: isNumberOrNull,
    units: isNumberOrNull,
    // Property Info
    squareFeet: isNumberOrNull,
    floors: isNumberOrNull,
    rooms: isNumberOrNull,
    bedrooms: isNumberOrNull,
    bathrooms: isNumberOrNull,
    verifiedAt: isNumberOrNull,
    verification: isStringOrNull,
    carrierRoute: isStringOrNull,
    lineOfTravel: isNumberOrNull,
    deliveryPoint: isNumberOrNull,
    lat: isNumberOrNull,
    lng: isNumberOrNull,
    elv: isNumberOrNull,
    accuracyScore: isNumberOrNull,
    accuracyType: isAccuracyTypeOrNull,
    legLat: isNumberOrNull,
    legLng: isNumberOrNull,
    residents: (v) => Array.isArray(v),
};
export function isAddress(o, log = false) {
    if (!o || typeof o !== 'object') {
        return false;
    }
    let ret = true;
    const addr = o;
    for (const key of Address.keys()) {
        if (!addressValidator[key]?.(addr[key])) {
            log && log(`Unsanitary Data for person "${addr.id}". Invalid value for ${key}: ${JSON.stringify(addr[key], null, 2)}`);
            ret = false;
        }
    }
    return ret;
}
export function isAddressOrNull(o) {
    if (o === null) {
        return true;
    }
    return isAddress(o);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvQWRkcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsUUFBUSxFQUNSLGNBQWMsRUFDZCxRQUFRLEVBQ1IsY0FBYyxHQUNmLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEIsT0FBTyxFQUNMLE9BQU8sRUFHUCxvQkFBb0IsRUFDcEIseUJBQXlCLEVBQ3pCLGVBQWUsRUFDZixtQkFBbUIsRUFDbkIsb0JBQW9CLEVBQ3BCLDBCQUEwQixFQUMxQix3QkFBd0IsRUFDeEIsYUFBYSxFQUNiLGtCQUFrQixFQUNsQixnQkFBZ0IsR0FDakIsTUFBTSxtQkFBbUIsQ0FBQztBQU0zQixNQUFNLGdCQUFnQixHQUF3QjtJQUM1QyxFQUFFLEVBQUUsUUFBUTtJQUNaLFNBQVMsRUFBRSxRQUFRO0lBQ25CLFNBQVMsRUFBRSxRQUFRO0lBQ25CLFNBQVMsRUFBRSxjQUFjO0lBRXpCLE9BQU8sRUFBRSwwQkFBMEI7SUFDbkMsTUFBTSxFQUFFLGNBQWM7SUFFdEIsSUFBSSxFQUFFLGNBQWM7SUFDcEIsUUFBUSxFQUFFLGNBQWM7SUFDeEIsWUFBWSxFQUFFLG9CQUFvQjtJQUNsQyxNQUFNLEVBQUUsY0FBYztJQUV0QixVQUFVLEVBQUUsa0JBQWtCO0lBQzlCLFlBQVksRUFBRSxtQkFBbUI7SUFDakMsVUFBVSxFQUFFLFFBQVE7SUFDcEIsYUFBYSxFQUFFLG1CQUFtQjtJQUNsQyxJQUFJLEVBQUUsY0FBYztJQUNwQixLQUFLLEVBQUUsYUFBYTtJQUNwQixHQUFHLEVBQUUsY0FBYztJQUNuQixJQUFJLEVBQUUsY0FBYztJQUNwQixRQUFRLEVBQUUsZ0JBQWdCO0lBQzFCLE9BQU8sRUFBRSxjQUFjO0lBQ3ZCLE9BQU8sRUFBRSxlQUFlO0lBRXhCLEtBQUssRUFBRSxjQUFjO0lBQ3JCLEtBQUssRUFBRSxjQUFjO0lBQ3JCLElBQUksRUFBRSxjQUFjO0lBRXBCLGdCQUFnQjtJQUNoQixTQUFTLEVBQUUsY0FBYztJQUN6QixlQUFlLEVBQUUsd0JBQXdCO0lBQ3pDLGNBQWMsRUFBRSx5QkFBeUI7SUFDekMsWUFBWSxFQUFFLGNBQWM7SUFDNUIsU0FBUyxFQUFFLGNBQWM7SUFDekIsT0FBTyxFQUFFLGNBQWM7SUFDdkIsS0FBSyxFQUFFLGNBQWM7SUFDckIsS0FBSyxFQUFFLGNBQWM7SUFFckIsZ0JBQWdCO0lBQ2hCLFVBQVUsRUFBRSxjQUFjO0lBQzFCLE1BQU0sRUFBRSxjQUFjO0lBQ3RCLEtBQUssRUFBRSxjQUFjO0lBQ3JCLFFBQVEsRUFBRSxjQUFjO0lBQ3hCLFNBQVMsRUFBRSxjQUFjO0lBRXpCLFVBQVUsRUFBRSxjQUFjO0lBQzFCLFlBQVksRUFBRSxjQUFjO0lBQzVCLFlBQVksRUFBRSxjQUFjO0lBQzVCLFlBQVksRUFBRSxjQUFjO0lBQzVCLGFBQWEsRUFBRSxjQUFjO0lBRTdCLEdBQUcsRUFBRSxjQUFjO0lBQ25CLEdBQUcsRUFBRSxjQUFjO0lBQ25CLEdBQUcsRUFBRSxjQUFjO0lBQ25CLGFBQWEsRUFBRSxjQUFjO0lBQzdCLFlBQVksRUFBRSxvQkFBb0I7SUFDbEMsTUFBTSxFQUFFLGNBQWM7SUFDdEIsTUFBTSxFQUFFLGNBQWM7SUFFdEIsU0FBUyxFQUFFLENBQUMsQ0FBVSxFQUF5QixFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Q0FDbkUsQ0FBQztBQUVGLE1BQU0sVUFBVSxTQUFTLENBQUMsQ0FBVSxFQUFFLE1BQWMsS0FBSztJQUN2RCxJQUFJLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUMvQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBRUQsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQ2YsTUFBTSxJQUFJLEdBQUcsQ0FBYSxDQUFDO0lBQzNCLEtBQUssTUFBTSxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ3ZDLEdBQUcsSUFBSSxHQUFHLENBQUMsK0JBQStCLElBQUksQ0FBQyxFQUFFLHdCQUF3QixHQUFHLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2SCxHQUFHLEdBQUcsS0FBSyxDQUFDO1NBQ2I7S0FDRjtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsQ0FBVTtJQUN4QyxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFBRSxPQUFPLElBQUksQ0FBQztLQUFFO0lBQ2hDLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBpc051bWJlcixcbiAgaXNOdW1iZXJPck51bGwsXG4gIGlzU3RyaW5nLFxuICBpc1N0cmluZ09yTnVsbCxcbn0gZnJvbSAnQHVuaXZlcnNlL3V0aWwnO1xuXG5pbXBvcnQge1xuICBBZGRyZXNzLFxuICBJQWRkcmVzcyxcbiAgSVBlcnNvbkFkZHJlc3MsXG4gIGlzQWNjdXJhY3lUeXBlT3JOdWxsLFxuICBpc0NvbW1lcmNpYWxVc2VUeXBlT3JOdWxsLFxuICBpc0NvdW50cnlPck51bGwsXG4gIGlzRGlyZWN0aW9uYWxPck51bGwsXG4gIGlzRmFjaWxpdHlUeXBlT3JOdWxsLFxuICBpc1BlcnNvbmFsSWRlbnRpZmllck9yTnVsbCxcbiAgaXNSZXNpZGVuY2VVc2VUeXBlT3JOdWxsLFxuICBpc1N0YXRlT3JOdWxsLFxuICBpc1N0cmVldFR5cGVPck51bGwsXG4gIGlzVW5pdEFiYnJPck51bGwsXG59IGZyb20gJy4uL3R5cGVzL2luZGV4LmpzJztcblxuLy8gVE9ETzogQ29kZWdlbiB2YWxpZGF0b3JzLlxuZXhwb3J0IHR5cGUgVmFsaWRhdG9yPFQ+ID0geyBba2V5IGluIGtleW9mIFRdOiAodjogdW5rbm93bikgPT4gdiBpcyBUW2tleV0gfTtcbmV4cG9ydCB0eXBlIExvZ2dlciA9IGZhbHNlIHwgKChtc2c6IHN0cmluZykgPT4gdm9pZCk7XG5cbmNvbnN0IGFkZHJlc3NWYWxpZGF0b3I6IFZhbGlkYXRvcjxJQWRkcmVzcz4gPSB7XG4gIGlkOiBpc1N0cmluZyxcbiAgY3JlYXRlZEF0OiBpc051bWJlcixcbiAgdXBkYXRlZEF0OiBpc051bWJlcixcbiAgZGVsZXRlZEF0OiBpc051bWJlck9yTnVsbCxcblxuICBwaW5UeXBlOiBpc1BlcnNvbmFsSWRlbnRpZmllck9yTnVsbCxcbiAgcGluTnVtOiBpc1N0cmluZ09yTnVsbCxcblxuICBjYXJlOiBpc1N0cmluZ09yTnVsbCxcbiAgZmFjaWxpdHk6IGlzU3RyaW5nT3JOdWxsLFxuICBmYWNpbGl0eVR5cGU6IGlzRmFjaWxpdHlUeXBlT3JOdWxsLFxuICBudW1iZXI6IGlzU3RyaW5nT3JOdWxsLFxuXG4gIHN0cmVldFR5cGU6IGlzU3RyZWV0VHlwZU9yTnVsbCxcbiAgc3RyZWV0UHJlRGlyOiBpc0RpcmVjdGlvbmFsT3JOdWxsLFxuICBzdHJlZXROYW1lOiBpc1N0cmluZyxcbiAgc3RyZWV0UG9zdERpcjogaXNEaXJlY3Rpb25hbE9yTnVsbCxcbiAgY2l0eTogaXNTdHJpbmdPck51bGwsXG4gIHN0YXRlOiBpc1N0YXRlT3JOdWxsLFxuICB6aXA6IGlzU3RyaW5nT3JOdWxsLFxuICB6aXA0OiBpc1N0cmluZ09yTnVsbCxcbiAgdW5pdEFiYnI6IGlzVW5pdEFiYnJPck51bGwsXG4gIHVuaXROdW06IGlzU3RyaW5nT3JOdWxsLFxuICBjb3VudHJ5OiBpc0NvdW50cnlPck51bGwsXG5cbiAgb3duZXI6IGlzU3RyaW5nT3JOdWxsLFxuICB2YWx1ZTogaXNOdW1iZXJPck51bGwsXG4gIGFyZWE6IGlzTnVtYmVyT3JOdWxsLFxuXG4gIC8vIEJ1aWxkaW5nIEluZm9cbiAgeWVhckJ1aWx0OiBpc051bWJlck9yTnVsbCxcbiAgcmVzaWRlbnRpYWxDb2RlOiBpc1Jlc2lkZW5jZVVzZVR5cGVPck51bGwsXG4gIGNvbW1lcmNpYWxDb2RlOiBpc0NvbW1lcmNpYWxVc2VUeXBlT3JOdWxsLFxuICBhc3Nlc3NvckNvZGU6IGlzU3RyaW5nT3JOdWxsLFxuICBmb290cHJpbnQ6IGlzTnVtYmVyT3JOdWxsLFxuICBzdG9yaWVzOiBpc051bWJlck9yTnVsbCxcbiAgZG9vcnM6IGlzTnVtYmVyT3JOdWxsLFxuICB1bml0czogaXNOdW1iZXJPck51bGwsXG5cbiAgLy8gUHJvcGVydHkgSW5mb1xuICBzcXVhcmVGZWV0OiBpc051bWJlck9yTnVsbCxcbiAgZmxvb3JzOiBpc051bWJlck9yTnVsbCxcbiAgcm9vbXM6IGlzTnVtYmVyT3JOdWxsLFxuICBiZWRyb29tczogaXNOdW1iZXJPck51bGwsXG4gIGJhdGhyb29tczogaXNOdW1iZXJPck51bGwsXG5cbiAgdmVyaWZpZWRBdDogaXNOdW1iZXJPck51bGwsXG4gIHZlcmlmaWNhdGlvbjogaXNTdHJpbmdPck51bGwsXG4gIGNhcnJpZXJSb3V0ZTogaXNTdHJpbmdPck51bGwsXG4gIGxpbmVPZlRyYXZlbDogaXNOdW1iZXJPck51bGwsXG4gIGRlbGl2ZXJ5UG9pbnQ6IGlzTnVtYmVyT3JOdWxsLFxuXG4gIGxhdDogaXNOdW1iZXJPck51bGwsXG4gIGxuZzogaXNOdW1iZXJPck51bGwsXG4gIGVsdjogaXNOdW1iZXJPck51bGwsXG4gIGFjY3VyYWN5U2NvcmU6IGlzTnVtYmVyT3JOdWxsLFxuICBhY2N1cmFjeVR5cGU6IGlzQWNjdXJhY3lUeXBlT3JOdWxsLFxuICBsZWdMYXQ6IGlzTnVtYmVyT3JOdWxsLFxuICBsZWdMbmc6IGlzTnVtYmVyT3JOdWxsLFxuXG4gIHJlc2lkZW50czogKHY6IHVua25vd24pOiB2IGlzIElQZXJzb25BZGRyZXNzW10gPT4gQXJyYXkuaXNBcnJheSh2KSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FkZHJlc3MobzogdW5rbm93biwgbG9nOiBMb2dnZXIgPSBmYWxzZSk6IG8gaXMgSUFkZHJlc3Mge1xuICBpZiAoIW8gfHwgdHlwZW9mIG8gIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGV0IHJldCA9IHRydWU7XG4gIGNvbnN0IGFkZHIgPSBvIGFzIElBZGRyZXNzO1xuICBmb3IgKGNvbnN0IGtleSBvZiBBZGRyZXNzLmtleXMoKSkge1xuICAgIGlmICghYWRkcmVzc1ZhbGlkYXRvcltrZXldPy4oYWRkcltrZXldKSkge1xuICAgICAgbG9nICYmIGxvZyhgVW5zYW5pdGFyeSBEYXRhIGZvciBwZXJzb24gXCIke2FkZHIuaWR9XCIuIEludmFsaWQgdmFsdWUgZm9yICR7a2V5fTogJHtKU09OLnN0cmluZ2lmeShhZGRyW2tleV0sIG51bGwsIDIpfWApO1xuICAgICAgcmV0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FkZHJlc3NPck51bGwobzogdW5rbm93bik6IG8gaXMgSUFkZHJlc3MgfCBudWxsIHtcbiAgaWYgKG8gPT09IG51bGwpIHsgcmV0dXJuIHRydWU7IH1cbiAgcmV0dXJuIGlzQWRkcmVzcyhvKTtcbn1cbiJdfQ==