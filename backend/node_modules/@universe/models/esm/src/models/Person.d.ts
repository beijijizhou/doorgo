import { IAccount, IAddress, IEmail, IExperience, IPartialPerson, IPerson, IPhone } from '../index.js';
import { AccountType } from './Account.js';
export type Validator<T> = {
    [key in keyof T]: (v: unknown) => v is T[key];
};
export type Logger = false | ((msg: string) => void);
export declare function preferredAddress(addr1: IAddress | null, addr2: IAddress | null): IAddress | null;
export declare function mergeIPerson(...people: (IPartialPerson | null | undefined)[]): IPerson;
export declare class Person {
    static stamp: () => IPerson;
    static hydrate: (person?: IPerson | IPartialPerson | Partial<IPerson> | null | undefined) => IPerson;
    static dehydrate: (person?: IPerson | IPartialPerson | null | undefined) => IPartialPerson;
    static flatten: (person?: IPerson | IPartialPerson | null | undefined) => IPartialPerson;
    static merge: typeof mergeIPerson;
    static getAccountId(acctType: AccountType, person: IPerson): IAccount | null;
    static preferredPhone(person?: Partial<IPerson> | null): IPhone | null;
    static currentRole(person?: Partial<IPerson> | null): IExperience | null;
    static preferredEmail(person?: Partial<IPerson> | null): IEmail | null;
    static residentialAddress(person?: Partial<IPerson> | null): IAddress | null;
    static mailAddress(person?: Partial<IPerson> | null): IAddress | null;
    static age(person?: Partial<IPerson> | null): number | null;
    static fullName(person?: Partial<IPerson> | null): string | null;
    static primaryLanguage(person?: Partial<IPerson> | null): string | null;
    static secondaryLanguage(person?: Partial<IPerson> | null): string | null;
    static primaryEthnicity(person?: Partial<IPerson> | null): string | null;
    static secondaryEthnicity(person?: Partial<IPerson> | null): string | null;
}
export type PersonProps = keyof IPerson;
export declare const personValidator: Validator<IPerson>;
export declare const personProps: Set<keyof IPerson>;
export declare const isPersonProp: (key: string) => key is keyof IPerson;
export declare function isValidPerson(o: unknown, log?: Logger): o is IPerson;
export declare function ensurePerson(o: Partial<IPerson> | IPerson | IPartialPerson): IPerson;
export { IPerson };
