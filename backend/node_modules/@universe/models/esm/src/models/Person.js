import { isNumber, isNumberOrNull, isStringOrNull, isUuid, } from '@universe/util';
import { LangCodeToName } from '../enums/LanguageCode.js';
import { AddressType, isBallotTypeOrNull, isCountryOrNull, isEducationOrNull, isEthnicityOrNull, isGenderOrNull, isLanguageCodeOrNull, isMilitaryStatusOrNull, isNameSuffixOrNull, isPartyOrNull, isPostNominalOrNull, isPreNominalOrNull, isReligionOrNull, isStateOrNull, } from '../index.js';
import { Person as PersonAPI } from '../types/helpers.js';
import { PhoneType, stampPhone } from './Phone.js';
// Given an IPersonPhone, always return a valid IPhone object, even if it's missing the phone on itself.
function getPhone(personPhone) {
    if (!personPhone) {
        return null;
    }
    return personPhone.phone || stampPhone({ number: personPhone.phoneId });
}
// Given two addresses, return the more "complete" object.
// TODO: Make more intelligent.
export function preferredAddress(addr1, addr2) {
    if (!addr1 || !addr2) {
        return addr1 || addr2;
    }
    if (addr1.lat && addr1.lng && (!addr2.lat || !addr2.lng)) {
        return addr1;
    }
    if (addr2.lat && addr2.lng && (!addr1.lat || !addr1.lng)) {
        return addr2;
    }
    if (addr1.number && !addr2.number) {
        return addr1;
    }
    if (addr2.number && !addr1.number) {
        return addr2;
    }
    if (addr1.zip && !addr2.zip) {
        return addr1;
    }
    if (addr2.zip && !addr1.zip) {
        return addr2;
    }
    if (addr1.unitNum && !addr2.unitNum) {
        return addr1;
    }
    if (addr2.unitNum && !addr1.unitNum) {
        return addr2;
    }
    return addr1;
}
function ensureUniqueEntity(key, entities) {
    const discovered = {};
    for (const entity of entities) {
        if (!entity || typeof entity !== 'object') {
            continue;
        }
        key in entity && (discovered[entity[key]] = entity);
    }
    return Object.values(discovered);
}
export function mergeIPerson(...people) {
    const out = Person.stamp();
    for (const person of people) {
        if (!person) {
            continue;
        }
        out.id = out.id || person.id;
        out.countyId = out.countyId ?? person.countyId;
        out.affidavitNum = out.affidavitNum ?? person.affidavitNum;
        out.precinct = out.precinct ?? person.precinct;
        out.createdAt = out.createdAt ?? person.createdAt;
        out.updatedAt = out.updatedAt ?? person.updatedAt;
        out.deletedAt = out.deletedAt ?? person.deletedAt;
        out.preNominal = out.preNominal ?? person.preNominal;
        out.firstName = out.firstName ?? person.firstName;
        out.middleName = out.middleName ?? person.middleName;
        out.lastName = out.lastName ?? person.lastName;
        out.suffix = out.suffix ?? person.suffix;
        out.postNominal = out.postNominal ?? person.postNominal;
        out.nickname = out.nickname ?? person.nickname;
        out.birthDate = out.birthDate ?? person.birthDate;
        out.birthState = out.birthState ?? person.birthState;
        out.birthCountry = out.birthCountry ?? person.birthCountry;
        out.gender = out.gender ?? person.gender;
        out.party = out.party ?? person.party;
        out.ballot = out.ballot ?? person.ballot;
        out.religion = out.religion ?? person.religion;
        out.education = out.education ?? person.education;
        out.military = out.military ?? person.military;
        out.income = out.income ?? person.income;
        out.primaryLanguageCode = out.primaryLanguageCode ?? person.primaryLanguageCode;
        out.secondaryLanguageCode = out.secondaryLanguageCode ?? person.secondaryLanguageCode;
        out.primaryEthnicityCode = out.primaryEthnicityCode ?? person.primaryEthnicityCode;
        out.secondaryEthnicityCode = out.secondaryEthnicityCode ?? person.secondaryEthnicityCode;
        out.phones = ensureUniqueEntity("phoneId", [
            ...(person.phones || []),
            ...(out.phones || []),
        ]);
        out.experience = ensureUniqueEntity("employer", [
            ...(person.experience || []),
            ...(out.experience || []),
        ]);
        out.addresses = ensureUniqueEntity("addressId", [
            ...(person.addresses || []),
            ...(out.addresses || []),
        ]);
        out.emails = ensureUniqueEntity("email", [
            ...(person.emails || []),
            ...(out.emails || []),
        ]);
    }
    return out;
}
export class Person {
    static stamp = PersonAPI.stamp;
    static hydrate = PersonAPI.hydrate;
    static dehydrate = PersonAPI.dehydrate;
    static flatten = PersonAPI.flatten;
    static merge = mergeIPerson;
    static getAccountId(acctType, person) {
        if (!person.accounts) {
            return null;
        }
        for (const acct of person.accounts) {
            if (acct.accountType === acctType) {
                return acct;
            }
        }
        return null;
    }
    static preferredPhone(person) {
        if (!person) {
            return null;
        }
        if (!person.phones || person.phones.length === 0) {
            return null;
        }
        let cell = null;
        let home = null;
        let work = null;
        let other = null;
        for (const phone of person.phones) {
            if (!phone) {
                continue;
            }
            switch (phone.type) {
                case PhoneType.PERS:
                    cell = getPhone(phone) || null;
                    break;
                case PhoneType.HOME:
                    home = getPhone(phone) || null;
                    break;
                case PhoneType.WORK:
                    work = getPhone(phone) || null;
                    break;
                case PhoneType.OTHER:
                    other = getPhone(phone) || null;
                    break;
            }
        }
        return cell || home || work || other || getPhone(person.phones[0]) || null;
    }
    // TODO: Make better
    static currentRole(person) {
        if (!person) {
            return null;
        }
        if (!person.experience || person.experience.length === 0) {
            return null;
        }
        let currentRole = null;
        for (const role of person.experience) {
            if (!currentRole || !currentRole.startDate || +(role.startDate || 0) > +(currentRole?.startDate || 0)) {
                currentRole = role;
            }
        }
        return currentRole;
    }
    // TODO: Make better
    static preferredEmail(person) {
        if (!person) {
            return null;
        }
        if (!person.emails || person.emails.length === 0) {
            return null;
        }
        for (const email of person.emails) {
            if (email.deliverable) {
                return email;
            }
        }
        return person.emails[0] || null;
    }
    static residentialAddress(person) {
        if (!person) {
            return null;
        }
        if (!person.addresses || person.addresses.length === 0) {
            return null;
        }
        let preferred = null;
        for (const addr of person.addresses) {
            if (addr.type !== AddressType.INV && addr.type !== AddressType.MAIL) {
                preferred = preferredAddress(preferred, addr.address || null);
            }
        }
        return preferred;
    }
    static mailAddress(person) {
        if (!person) {
            return null;
        }
        if (!person.addresses || person.addresses.length === 0) {
            return null;
        }
        let preferred = null;
        for (const addr of person.addresses) {
            if (addr.type === AddressType.MAIL) {
                preferred = preferredAddress(preferred, addr.address || null);
            }
        }
        return preferred || Person.residentialAddress(person);
    }
    static age(person) {
        if (!person || !person.birthDate) {
            return null;
        }
        const birthday = +new Date(person.birthDate);
        return ~~((Date.now() - birthday) / (31557600000)); // Magic way to turn a date in to age.
    }
    static fullName(person) {
        if (!person) {
            return null;
        }
        return [person.firstName, person.lastName].join(' ').trim();
    }
    static primaryLanguage(person) {
        if (!person?.primaryLanguageCode) {
            return null;
        }
        return LangCodeToName[person.primaryLanguageCode];
    }
    static secondaryLanguage(person) {
        if (!person?.secondaryLanguageCode) {
            return null;
        }
        return LangCodeToName[person.secondaryLanguageCode];
    }
    static primaryEthnicity(person) {
        if (!person?.primaryEthnicityCode) {
            return null;
        }
        return person.primaryEthnicityCode;
    }
    static secondaryEthnicity(person) {
        if (!person?.secondaryEthnicityCode) {
            return null;
        }
        return person.secondaryEthnicityCode;
    }
}
const defaultPerson = PersonAPI.stamp();
export const personValidator = {
    id: isUuid,
    countyId: isStringOrNull,
    affidavitNum: isStringOrNull,
    createdAt: isNumber,
    updatedAt: isNumber,
    deletedAt: isNumberOrNull,
    preNominal: isPreNominalOrNull,
    firstName: isStringOrNull,
    middleName: isStringOrNull,
    lastName: isStringOrNull,
    postNominal: isPostNominalOrNull,
    suffix: isNameSuffixOrNull,
    nickname: isStringOrNull,
    votes: (v) => Array.isArray(v),
    accounts: (v) => Array.isArray(v),
    addresses: (v) => Array.isArray(v),
    emails: (v) => Array.isArray(v),
    phones: (v) => Array.isArray(v),
    experience: (v) => Array.isArray(v),
    scores: (v) => Array.isArray(v),
    gender: isGenderOrNull,
    party: isPartyOrNull,
    birthDate: isNumberOrNull,
    birthState: isStateOrNull,
    birthCountry: isCountryOrNull,
    religion: isReligionOrNull,
    education: isEducationOrNull,
    military: isMilitaryStatusOrNull,
    income: isNumberOrNull,
    primaryLanguageCode: isLanguageCodeOrNull,
    secondaryLanguageCode: isLanguageCodeOrNull,
    primaryEthnicityCode: isEthnicityOrNull,
    secondaryEthnicityCode: isEthnicityOrNull,
    ballot: isBallotTypeOrNull,
    precinct: isStringOrNull,
};
export const personProps = new Set(Object.keys(personValidator));
/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
export const isPersonProp = (key) => personProps.has(key);
export function isValidPerson(o, log = false) {
    if (!o || typeof o !== 'object') {
        return false;
    }
    let ret = true;
    const person = o;
    for (const key of PersonAPI.keys()) {
        if (!personValidator[key]?.(person[key])) {
            log && log(`Unsanitary Data for person "${person.id}". Invalid value for ${key}: ${JSON.stringify(person[key], null, 2)}`);
            ret = false;
        }
    }
    return ret;
}
export function ensurePerson(o) {
    for (const key of Object.keys(o)) {
        if (!isPersonProp(key)) {
            delete o[key];
        }
    }
    for (const key of personProps) {
        if (!personValidator[key]?.(o[key])) {
            o[key] = defaultPerson[key];
        }
    }
    return PersonAPI.hydrate(o);
}
//# sourceMappingURL=data:application/json;base64,