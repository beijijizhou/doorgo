import { Database } from 'better-sqlite3';
import * as Diff from './types/diffs.js';
export interface IGeometry {
    rowid: number;
    _shape: number[][];
}
export declare function models(db: Database, onChange?: (diff: Diff.UniverseDiff[]) => void): {
    indexes: {
        create(): void;
        delete(): void;
    };
    Metadata: {
        getById(key: string): import("./index.js").IMetadata | null;
        insert(data: import("./index.js").IPartialMetadata, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.METADATA> | null;
        upsert(data: import("./index.js").IPartialMetadata, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.METADATA> | Diff.UpdateDiff<Diff.ModelType.METADATA> | null;
        delete(key: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.METADATA> | null;
        apply(diff: Diff.Diff<Diff.ModelType.METADATA>): Diff.Diff<Diff.ModelType.METADATA> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.METADATA>): Diff.Diff<Diff.ModelType.METADATA> | null;
    };
    Address: {
        getById(id: string): import("./index.js").IAddress | null;
        insert(data: import("./index.js").IPartialAddress, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.ADDRESS> | null;
        upsert(data: import("./index.js").IPartialAddress, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.ADDRESS> | Diff.UpdateDiff<Diff.ModelType.ADDRESS> | null;
        delete(id: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.ADDRESS> | null;
        apply(diff: Diff.Diff<Diff.ModelType.ADDRESS>): Diff.Diff<Diff.ModelType.ADDRESS> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.ADDRESS>): Diff.Diff<Diff.ModelType.ADDRESS> | null;
    };
    Turf: {
        getById(id: string): import("./index.js").ITurf | null;
        insert(data: import("./index.js").IPartialTurf, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.TURF> | null;
        upsert(data: import("./index.js").IPartialTurf, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.TURF> | Diff.UpdateDiff<Diff.ModelType.TURF> | null;
        delete(id: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.TURF> | null;
        apply(diff: Diff.Diff<Diff.ModelType.TURF>): Diff.Diff<Diff.ModelType.TURF> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.TURF>): Diff.Diff<Diff.ModelType.TURF> | null;
    };
    Email: {
        getById(personId: string, email: string): import("./index.js").IEmail | null;
        insert(data: import("./index.js").IPartialEmail, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.EMAIL> | null;
        upsert(data: import("./index.js").IPartialEmail, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.EMAIL> | Diff.UpdateDiff<Diff.ModelType.EMAIL> | null;
        delete(personId: string, email: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.EMAIL> | null;
        apply(diff: Diff.Diff<Diff.ModelType.EMAIL>): Diff.Diff<Diff.ModelType.EMAIL> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.EMAIL>): Diff.Diff<Diff.ModelType.EMAIL> | null;
    };
    Phone: {
        getById(number: string): import("./index.js").IPhone | null;
        insert(data: import("./index.js").IPartialPhone, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.PHONE> | null;
        upsert(data: import("./index.js").IPartialPhone, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.PHONE> | Diff.UpdateDiff<Diff.ModelType.PHONE> | null;
        delete(number: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.PHONE> | null;
        apply(diff: Diff.Diff<Diff.ModelType.PHONE>): Diff.Diff<Diff.ModelType.PHONE> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.PHONE>): Diff.Diff<Diff.ModelType.PHONE> | null;
    };
    PersonAddress: {
        getById(personId: string, addressId: string): import("./index.js").IPersonAddress | null;
        insert(data: import("./index.js").IPartialPersonAddress, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.PERSON_ADDRESS> | null;
        upsert(data: import("./index.js").IPartialPersonAddress, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.PERSON_ADDRESS> | Diff.UpdateDiff<Diff.ModelType.PERSON_ADDRESS> | null;
        delete(personId: string, addressId: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.PERSON_ADDRESS> | null;
        apply(diff: Diff.Diff<Diff.ModelType.PERSON_ADDRESS>): Diff.Diff<Diff.ModelType.PERSON_ADDRESS> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.PERSON_ADDRESS>): Diff.Diff<Diff.ModelType.PERSON_ADDRESS> | null;
    };
    PersonPhone: {
        getById(personId: string, phoneId: string): import("./index.js").IPersonPhone | null;
        insert(data: import("./index.js").IPartialPersonPhone, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.PERSON_PHONE> | null;
        upsert(data: import("./index.js").IPartialPersonPhone, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.PERSON_PHONE> | Diff.UpdateDiff<Diff.ModelType.PERSON_PHONE> | null;
        delete(personId: string, phoneId: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.PERSON_PHONE> | null;
        apply(diff: Diff.Diff<Diff.ModelType.PERSON_PHONE>): Diff.Diff<Diff.ModelType.PERSON_PHONE> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.PERSON_PHONE>): Diff.Diff<Diff.ModelType.PERSON_PHONE> | null;
    };
    Account: {
        getById(personId: string, accountType: string, accountId: string): import("./index.js").IAccount | null;
        insert(data: import("./index.js").IPartialAccount, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.ACCOUNT> | null;
        upsert(data: import("./index.js").IPartialAccount, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.ACCOUNT> | Diff.UpdateDiff<Diff.ModelType.ACCOUNT> | null;
        delete(personId: string, accountType: import("./index.js").AccountType, accountId: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.ACCOUNT> | null;
        apply(diff: Diff.Diff<Diff.ModelType.ACCOUNT>): Diff.Diff<Diff.ModelType.ACCOUNT> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.ACCOUNT>): Diff.Diff<Diff.ModelType.ACCOUNT> | null;
    };
    Experience: {
        getById(personId: string, type: string, employer: string, role: string): import("./index.js").IExperience | null;
        insert(data: import("./index.js").IPartialExperience, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.EXPERIENCE> | null;
        upsert(data: import("./index.js").IPartialExperience, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.EXPERIENCE> | Diff.UpdateDiff<Diff.ModelType.EXPERIENCE> | null;
        delete(personId: string, type: import("./index.js").ExperienceType, employer: string, role: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.EXPERIENCE> | null;
        apply(diff: Diff.Diff<Diff.ModelType.EXPERIENCE>): Diff.Diff<Diff.ModelType.EXPERIENCE> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.EXPERIENCE>): Diff.Diff<Diff.ModelType.EXPERIENCE> | null;
    };
    Campaign: {
        getById(id: string): import("./index.js").ICampaign | null;
        insert(data: import("./index.js").IPartialCampaign, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.CAMPAIGN> | null;
        upsert(data: import("./index.js").IPartialCampaign, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.CAMPAIGN> | Diff.UpdateDiff<Diff.ModelType.CAMPAIGN> | null;
        delete(id: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.CAMPAIGN> | null;
        apply(diff: Diff.Diff<Diff.ModelType.CAMPAIGN>): Diff.Diff<Diff.ModelType.CAMPAIGN> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.CAMPAIGN>): Diff.Diff<Diff.ModelType.CAMPAIGN> | null;
    };
    Contest: {
        getById(id: string): import("./index.js").IContest | null;
        insert(data: import("./index.js").IPartialContest, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.CONTEST> | null;
        upsert(data: import("./index.js").IPartialContest, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.CONTEST> | Diff.UpdateDiff<Diff.ModelType.CONTEST> | null;
        delete(id: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.CONTEST> | null;
        apply(diff: Diff.Diff<Diff.ModelType.CONTEST>): Diff.Diff<Diff.ModelType.CONTEST> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.CONTEST>): Diff.Diff<Diff.ModelType.CONTEST> | null;
    };
    Election: {
        getById(id: string): import("./index.js").IElection | null;
        insert(data: import("./index.js").IPartialElection, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.ELECTION> | null;
        upsert(data: import("./index.js").IPartialElection, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.ELECTION> | Diff.UpdateDiff<Diff.ModelType.ELECTION> | null;
        delete(id: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.ELECTION> | null;
        apply(diff: Diff.Diff<Diff.ModelType.ELECTION>): Diff.Diff<Diff.ModelType.ELECTION> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.ELECTION>): Diff.Diff<Diff.ModelType.ELECTION> | null;
    };
    Vote: {
        getById(personId: string, electionId: string): import("./index.js").IVote | null;
        insert(data: import("./index.js").IPartialVote, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.VOTE> | null;
        upsert(data: import("./index.js").IPartialVote, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.VOTE> | Diff.UpdateDiff<Diff.ModelType.VOTE> | null;
        delete(personId: string, electionId: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.VOTE> | null;
        apply(diff: Diff.Diff<Diff.ModelType.VOTE>): Diff.Diff<Diff.ModelType.VOTE> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.VOTE>): Diff.Diff<Diff.ModelType.VOTE> | null;
    };
    Returns: {
        getById(contestId: string, turfId: string, party: string, rank: string): import("./index.js").IReturns | null;
        insert(data: import("./index.js").IPartialReturns, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.RETURNS> | null;
        upsert(data: import("./index.js").IPartialReturns, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.RETURNS> | Diff.UpdateDiff<Diff.ModelType.RETURNS> | null;
        delete(contestId: string, turfId: string, party: import("./index.js").Party, rank: number, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.RETURNS> | null;
        apply(diff: Diff.Diff<Diff.ModelType.RETURNS>): Diff.Diff<Diff.ModelType.RETURNS> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.RETURNS>): Diff.Diff<Diff.ModelType.RETURNS> | null;
    };
    Score: {
        getById(personId: string, name: string): import("./index.js").IScore | null;
        insert(data: import("./index.js").IPartialScore, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.SCORE> | null;
        upsert(data: import("./index.js").IPartialScore, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.SCORE> | Diff.UpdateDiff<Diff.ModelType.SCORE> | null;
        delete(personId: string, name: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.SCORE> | null;
        apply(diff: Diff.Diff<Diff.ModelType.SCORE>): Diff.Diff<Diff.ModelType.SCORE> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.SCORE>): Diff.Diff<Diff.ModelType.SCORE> | null;
    };
    Person: {
        getById(id: string): import("./index.js").IPerson | null;
        insert(data: import("./index.js").IPartialPerson, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.PERSON> | null;
        upsert(data: import("./index.js").IPartialPerson, silent?: boolean | undefined): Diff.CreateDiff<Diff.ModelType.PERSON> | Diff.UpdateDiff<Diff.ModelType.PERSON> | null;
        delete(id: string, silent?: boolean | undefined): Diff.DeleteDiff<Diff.ModelType.PERSON> | null;
        apply(diff: Diff.Diff<Diff.ModelType.PERSON>): Diff.Diff<Diff.ModelType.PERSON> | null;
        rollback(diff: Diff.Diff<Diff.ModelType.PERSON>): Diff.Diff<Diff.ModelType.PERSON> | null;
    };
};
export type IModels = ReturnType<typeof models>;
