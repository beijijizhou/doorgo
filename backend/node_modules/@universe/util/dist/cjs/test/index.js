"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* global describe, it */
const assert = __importStar(require("assert"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const index_1 = require("../src/index");
describe('Utils', () => {
    describe('debounce should', () => {
        it('delay a call', async () => {
            const first = Date.now();
            let second = 0;
            await (0, index_1.debounce)(() => second = Date.now(), 1000)();
            assert.ok(second - first >= 1000);
        });
        it('only call the function once', async () => {
            const first = Date.now();
            let second = 0;
            let count = 0;
            const func = (0, index_1.debounce)(() => {
                count++;
                second = Date.now();
            }, 1200);
            func();
            func();
            func();
            await func();
            assert.ok(second - first >= 1000);
            assert.strictEqual(count, 1);
        });
        it('no debounce memory leak', async function () {
            this.timeout(120000);
            const func = (0, index_1.debounce)((arr) => {
                arr[0] = arr[1];
            }, 1);
            const before = process.memoryUsage().heapUsed / 1024 / 1024;
            for (let i = 0; i < 2000; i++) {
                await func(new Array(1000000).fill(1));
            }
            global?.gc?.();
            await new Promise(resolve => setTimeout(resolve, 3000));
            const after = process.memoryUsage().heapUsed / 1024 / 1024;
            assert.ok(after <= before, 'memory usage does not grow with many debounce calls');
        });
    });
    it('runs md5', () => {
        assert.strictEqual((0, index_1.md5)('hello'), '5d41402abc4b2a76b9719d911017c592');
        assert.strictEqual((0, index_1.md5)('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'), 'c1906fa4ec71ebdc02c49c5d19908a39');
        assert.strictEqual((0, index_1.md5)(fs.readFileSync(path.join(__dirname, '../../../fixtures/share.jpg'), 'binary')), '7b55446ad872973c5db5006905cc92aa');
    });
    it('runs base64Url', () => {
        assert.strictEqual((0, index_1.base64UrlEncode)('Adam Miller'), 'QWRhbSBNaWxsZXI');
        assert.strictEqual((0, index_1.base64UrlDecode)((0, index_1.base64UrlEncode)('Adam Miller')), 'Adam Miller');
        assert.strictEqual((0, index_1.base64UrlEncode)('Kelly'), 'S2VsbHk');
        assert.strictEqual((0, index_1.base64UrlDecode)((0, index_1.base64UrlEncode)('Kelly')), 'Kelly');
    });
    it('runs base85UuidEncode / base85UuidEncode', () => {
        const id = '1d0d0699-7002-4273-b013-2a963852c388';
        const encoded = (0, index_1.base85UuidEncode)(id);
        assert.strictEqual((0, index_1.isUuid)(id), true);
        assert.strictEqual(encoded.length, 20);
        assert.strictEqual((0, index_1.base85UuidDecode)(encoded), id);
        for (let i = 0; i < 2000; i++) {
            const id = (0, index_1.uuid)();
            const encoded = (0, index_1.base85UuidEncode)(id);
            assert.strictEqual((0, index_1.isUuid)(id), true);
            assert.strictEqual(encoded.length, 20);
            assert.strictEqual((0, index_1.base85UuidDecode)(encoded), id);
        }
    });
    it('validates emails', () => {
        assert.ok((0, index_1.validateEmail)('adam@universe.app'));
        assert.ok((0, index_1.validateEmail)('adam+tag@universe.app'));
        assert.ok(!(0, index_1.validateEmail)('@universe.app'));
        assert.ok(!(0, index_1.validateEmail)('adam@universe'));
        assert.ok(!(0, index_1.validateEmail)('adam@universe.'));
        assert.ok(!(0, index_1.validateEmail)('superduperlongemailaddressthatistechnicallynotallowedsuperduperlongemailaddressthatistechnicallynotallowed@universe.app'));
        assert.ok(!(0, index_1.validateEmail)('INVALID'));
        assert.ok(!(0, index_1.validateEmail)(false));
        assert.ok(!(0, index_1.validateEmail)(100));
        assert.ok(!(0, index_1.validateEmail)(new Date()));
        assert.ok(!(0, index_1.validateEmail)({}));
    });
    it('deep clones', async () => {
        const obj = {
            a: 1,
            b: { c: 3 },
            d: [1, 2, { e: 5 }],
        };
        const clone = await (0, index_1.deepClone)(obj);
        assert.notStrictEqual(obj, clone);
        assert.deepStrictEqual(obj, clone);
    });
    it('converts posix to date', async () => {
        const dates = [
            '6/29/1991',
            '1/1/1900',
            '1/1/3030',
            '12/31/1845',
            '12/31/7082',
            '6/1/2009',
            '6/29/2009',
        ];
        for (const date of dates) {
            const res = (0, index_1.posixToDate)(+(new Date(date)));
            assert.strictEqual(`${res.month}/${res.day}/${res.year}`, date);
        }
    });
    describe('deferrable should', () => {
        it('resolve', async () => {
            let runs = false;
            const deferrable = new index_1.Deferred();
            const promise = deferrable.then((res) => {
                runs = true;
                assert.strictEqual(1, res);
            });
            deferrable.resolve(1);
            await promise;
            assert.strictEqual(true, runs);
        });
        it('reject', async () => {
            let runs = false;
            const deferrable = new index_1.Deferred();
            const promise = deferrable.catch((err) => {
                runs = true;
                assert.strictEqual('Test', err.message);
            });
            deferrable.reject(new Error('Test'));
            await promise;
            assert.strictEqual(true, runs);
        });
    });
    describe('string methods should', () => {
        it('run toLowerCase', () => {
            assert.strictEqual((0, index_1.toLowerCase)('WORKS'), 'works');
            assert.strictEqual((0, index_1.toLowerCase)('works'), 'works');
            assert.strictEqual((0, index_1.toLowerCase)('WoRkz 4-A c0^^P13X sTRing'), 'workz 4-a c0^^p13x string');
        });
        it('run toUpperCase', () => {
            assert.strictEqual((0, index_1.toUpperCase)('WORKS'), 'WORKS');
            assert.strictEqual((0, index_1.toUpperCase)('works'), 'WORKS');
            assert.strictEqual((0, index_1.toUpperCase)('WoRkz 4-A c0^^P13X sTRing'), 'WORKZ 4-A C0^^P13X STRING');
        });
        it('run toSnakeCase', () => {
            assert.strictEqual((0, index_1.toSnakeCase)('WORKS'), 'works');
            assert.strictEqual((0, index_1.toSnakeCase)('works'), 'works');
            assert.strictEqual((0, index_1.toSnakeCase)('WoRkz 4-A c0^^P13X sTRing'), 'wo_rkz_4_a_c0_p_13_x_s_t_ring');
            assert.strictEqual((0, index_1.toSnakeCase)('kebab-case'), 'kebab_case');
            assert.strictEqual((0, index_1.toSnakeCase)('snake_case'), 'snake_case');
            assert.strictEqual((0, index_1.toSnakeCase)('Title Case'), 'title_case');
            assert.strictEqual((0, index_1.toSnakeCase)('PascalCase'), 'pascal_case');
            assert.strictEqual((0, index_1.toSnakeCase)('camalCase'), 'camal_case');
        });
        it('run toKebabCase', () => {
            assert.strictEqual((0, index_1.toKebabCase)('WORKS'), 'works');
            assert.strictEqual((0, index_1.toKebabCase)('works'), 'works');
            assert.strictEqual((0, index_1.toKebabCase)('kebab-case'), 'kebab-case');
            assert.strictEqual((0, index_1.toKebabCase)('snake_case'), 'snake-case');
            assert.strictEqual((0, index_1.toKebabCase)('Title Case'), 'title-case');
            assert.strictEqual((0, index_1.toKebabCase)('PascalCase'), 'pascal-case');
            assert.strictEqual((0, index_1.toKebabCase)('camalCase'), 'camal-case');
        });
        it('run toTitleCase', () => {
            assert.strictEqual((0, index_1.toTitleCase)('WORKS'), 'WORKS');
            assert.strictEqual((0, index_1.toTitleCase)('works'), 'Works');
            assert.strictEqual((0, index_1.toTitleCase)('kebab-case'), 'Kebab Case');
            assert.strictEqual((0, index_1.toTitleCase)('snake_case'), 'Snake Case');
            assert.strictEqual((0, index_1.toTitleCase)('Title Case'), 'Title Case');
            assert.strictEqual((0, index_1.toTitleCase)('PascalCase'), 'Pascal Case');
            assert.strictEqual((0, index_1.toTitleCase)('camalCase'), 'Camal Case');
        });
        it('run toPascalCase', () => {
            assert.strictEqual((0, index_1.toPascalCase)('WORKS'), 'Works');
            assert.strictEqual((0, index_1.toPascalCase)('works'), 'Works');
            assert.strictEqual((0, index_1.toPascalCase)('kebab-case'), 'KebabCase');
            assert.strictEqual((0, index_1.toPascalCase)('snake_case'), 'SnakeCase');
            assert.strictEqual((0, index_1.toPascalCase)('Title Case'), 'TitleCase');
            assert.strictEqual((0, index_1.toPascalCase)('PascalCase'), 'PascalCase');
            assert.strictEqual((0, index_1.toPascalCase)('camalCase'), 'CamalCase');
        });
        it('run toCamelCase', () => {
            assert.strictEqual((0, index_1.toCamelCase)('WORKS'), 'works');
            assert.strictEqual((0, index_1.toCamelCase)('works'), 'works');
            assert.strictEqual((0, index_1.toCamelCase)('kebab-case'), 'kebabCase');
            assert.strictEqual((0, index_1.toCamelCase)('snake_case'), 'snakeCase');
            assert.strictEqual((0, index_1.toCamelCase)('Title Case'), 'titleCase');
            assert.strictEqual((0, index_1.toCamelCase)('PascalCase'), 'pascalCase');
            assert.strictEqual((0, index_1.toCamelCase)('camalCase'), 'camalCase');
        });
        it('run toNameCase', () => {
            assert.strictEqual((0, index_1.toNameCase)('WORKS'), 'Works');
            assert.strictEqual((0, index_1.toNameCase)('works'), 'Works');
            assert.strictEqual((0, index_1.toNameCase)('kebab-case'), 'Kebab-Case');
            assert.strictEqual((0, index_1.toNameCase)('snake_case'), 'SnakeCase');
            assert.strictEqual((0, index_1.toNameCase)('Title Case'), 'Title Case');
            assert.strictEqual((0, index_1.toNameCase)('PascalCase'), 'PascalCase');
            assert.strictEqual((0, index_1.toNameCase)('camalCase'), 'CamalCase');
            assert.strictEqual((0, index_1.toNameCase)("o'Farrell"), "O'Farrell");
            assert.strictEqual((0, index_1.toNameCase)('emily baker-white'), 'Emily Baker-White');
            assert.strictEqual((0, index_1.toNameCase)('KellyRose fluty'), 'KellyRose Fluty');
        });
    });
    describe('Local Hours to UTC', () => {
        it('should convert local hours to utc while maintaining minutes elapsed', () => {
            assert.strictEqual((0, index_1.localHourToUTC)(2.5), 10.5);
        });
        it('should convert local hours to utc while wrapping for the 24th hour mark', () => {
            assert.strictEqual((0, index_1.localHourToUTC)(22.5), 6.5);
        });
        it('should convert local hours to utc', () => {
            assert.strictEqual((0, index_1.localHourToUTC)(22), 6);
        });
        it('should convert utc hours to local while maintaining minutes elapsed', () => {
            assert.strictEqual((0, index_1.utcHourToLocal)(2.5), 18.5);
        });
        it('should convert utc hours to local while wrapping for the 24th hour mark', () => {
            assert.strictEqual((0, index_1.utcHourToLocal)(22.5), 14.5);
        });
        it('should convert utc hours to local', () => {
            assert.strictEqual((0, index_1.utcHourToLocal)(22), 14);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,