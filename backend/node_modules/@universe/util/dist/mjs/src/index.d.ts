export declare const isNull: (v: unknown) => v is null;
export declare const isString: (v: unknown) => v is string;
export declare const isStringOrNull: (v: unknown) => v is string | null;
export declare const isBoolean: (v: unknown) => v is boolean;
export declare const isBooleanOrNull: (v: unknown) => v is boolean | null;
export declare const isNumber: (v: unknown) => v is number;
export declare const isNumberOrNull: (v: unknown) => v is number | null;
export declare const isDate: (v: unknown) => v is Date;
export declare const isDateOrNull: (v: unknown) => v is Date | null;
export declare const isObject: (o: unknown) => o is Record<string, unknown>;
export declare const isObjectOrNull: (o: unknown) => o is Record<string, unknown>;
export declare const isArray: (arg: any) => arg is any[];
export declare const isArrayOrNull: (a: unknown) => a is unknown[];
export declare const noop: (..._: any[]) => void;
export declare const identityFunction: <T = unknown>(arg: T) => T;
export declare const assertNever: (message: string) => never;
export declare class DomUtils<E extends HTMLElement> {
    private s;
    constructor(s: string);
    el(n: number): E;
    on(type: string, fn: EventListener, bubble?: boolean): this;
    off(type: string, fn: EventListener, bubble?: boolean): this;
    css(v: string): this;
    html(v: string): this;
    insertBefore(v: string): this;
    insertAfter(v: string): this;
    insertFirst(v: string): this;
    insertLast(v: string): this;
    text(v: string): this;
    addClass(v: string): this;
    toggleClass(v: string): this;
    removeClass(v: string): this;
    empty(): this;
    attr(a: string, v: string): this;
    getAttr(v: string): string | null;
    removeAttr(v: string): this;
    parent(): ParentNode | null;
}
export declare const $: <E extends HTMLElement = HTMLElement>(s: string) => DomUtils<E>;
export type JsonArray = Array<string | number | boolean | null | Date | Json | JsonArray>;
export interface Json {
    [x: string]: string | number | boolean | null | Date | Json | JsonArray;
}
export declare const NIL_UUID = "00000000-0000-0000-0000-000000000000";
export declare const isUuid: (v: unknown) => v is string;
export declare const uuid: (() => string);
export declare function base85UuidEncode(uuid: string): string;
export declare function base85UuidDecode(data: string): string | null;
export declare const base64UrlEncode: (str: string) => string;
export declare const base64UrlDecode: (str: string) => string;
export declare const GET: <O>(url: string, headers?: {}) => Promise<O>;
export declare const POST: <O>(url: string, data?: Json, headers?: {}) => Promise<O>;
export declare const debounce: <F extends (...args: any) => any>(func: F, timeout: number) => (this: ThisParameterType<F>, ...args: Parameters<F>) => Promise<ReturnType<F>>;
export declare function validateEmail(email: any): email is string;
export declare function posixToDate(s: number): {
    month: number;
    day: number;
    year: number;
};
export declare const abbrNum: (num: number, fixed?: number) => string | null;
export declare function sha1Digest(message: string): Promise<string>;
export declare function sha256Digest(message: string): Promise<string>;
export declare const toLowerCase: (str: string) => string;
export declare const toUpperCase: (str: string) => string;
export declare const toSnakeCase: (str: string) => string;
export declare const toKebabCase: (str: string) => string;
export declare const toTitleCase: (str: string) => string;
export declare const toPascalCase: (str: string) => string;
export declare const toNameCase: (str: string) => string;
export declare const toCamelCase: (str: string) => string;
export declare function idToHue(input: string, shift?: number): number;
export declare function maxDate(...dates: (Date | number | null | undefined)[]): Date;
export declare function lineCount(filePath: string): Promise<number>;
export declare function md5(s: string): string;
export declare function relativeDate(input: Date | number): string;
export declare const deepClone: <T>(data: T) => Promise<T>;
export declare class Deferred<T = void> extends Promise<T> {
    resolve: (value: T | PromiseLike<T>) => void;
    reject: (err: Error) => void;
    constructor();
    static get [Symbol.species](): typeof Promise;
    get [Symbol.toStringTag](): string;
}
export declare const localHourToUTC: (hour: number) => number;
export declare const utcHourToLocal: (hour: number) => number;
declare enum TimeZone {
    US_ALASKA = "US/Alaska",
    US_ALEUTIAN = "US/Aleutian",
    US_ARIZONA = "US/Arizona",
    US_CENTRAL = "US/Central",
    US_EAST_INDIANA = "US/East-Indiana",
    US_EASTERN = "US/Eastern",
    US_HAWAII = "US/Hawaii",
    US_INDIANA_STARKE = "US/Indiana-Starke",
    US_MICHIGAN = "US/Michigan",
    US_MOUNTAIN = "US/Mountain",
    US_PACIFIC = "US/Pacific",
    US_SAMOA = "US/Samoa",
    ETC_GMT = "Etc/GMT"
}
export declare function getTimezone(): TimeZone;
export {};
